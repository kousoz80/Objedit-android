<?xml version="1.0" encoding="Shift_JIS" ?>
<!-- なんちゃってXML version 0.1( ObjectEditor専用 ) -->
<xobject>
<ID>project</ID>
<x0>0</x0>
<y0>0</y0>
<width>200</width>
<height>100</height>
<ID_maker>119</ID_maker>
<objectname>objedit_android</objectname>
<description>新規のアプリケーション</description>
<codeclip>
<ID>_CSTART</ID>
<x0>20</x0>
<y0>35</y0>
<width>135</width>
<height>20</height>
<codetext>Activity ACTIVITY;
</codetext>
</codeclip>
<pin>
<ID>_PSTART</ID>
<x0>913</x0>
<y0>251</y0>
<width>55</width>
<height>24</height>
<text>Start()</text>
<px>50</px>
<py>50</py>
</pin>
<codeclip>
<ID>_C2</ID>
<x0>498</x0>
<y0>9</y0>
<width>240</width>
<height>45</height>
<codetext>// オブジェクトエディタコンポーネント
ObjEditGUI oedit_gui;
class ObjEditGUI{

AbsoluteLayout base;
AbsoluteLayout bbase;
AbsoluteLayout obase;
ScrollView oyview;
HorizontalScrollView bxview;
HorizontalScrollView oxview;
AbsoluteLayout opanel;

EditText oname;
ImageButton obup;
ImageButton obnew;
ImageButton obfile;
ImageButton obcompile;
ImageButton obrun;
ImageButton obxobj;
ImageButton obaobj;
ImageButton obuobj;
ImageButton obsignal;
ImageButton obpin;
ImageButton obcodeclip;
ImageButton obgroup;
ImageButton obguidsin;
ImageButton obdelete;
ImageButton obcopy;
ImageButton obpaste;
ImageButton obgtox;
ImageButton obxtog;
ImageButton obsetting;
ImageButton obcamera;

// オブジェクトエディタコンポーネントを作成
ObjEditGUI(){

dprint(&quot;objedit gui\n&quot;);

int name_wid=300;
int btn_wid=80;
int btn_hei=80;
int pos=0;

base = new AbsoluteLayout(ACTIVITY);
base.setBackgroundColor(Color.rgb( 255, 255, 255));
bbase = new AbsoluteLayout(ACTIVITY);
bbase.setBackgroundColor(Color.rgb( 255, 255, 255));
obase = new AbsoluteLayout(ACTIVITY);
obase.setBackgroundColor(Color.rgb( 255, 255, 255));

oname = new EditText(ACTIVITY);
oname.setPadding(1, 1, 1, 1);
oname.setTextSize( 24f );
oname.setTextColor( Color.rgb( 0, 0, 0 ));
oname.setBackgroundColor( Color.rgb( 230, 230, 230 ));
oname.setText( &quot;&quot; );
oname.setLayoutParams( new AbsoluteLayout.LayoutParams( name_wid,btn_hei,0,0 ) );
bbase.addView( oname );
pos = name_wid;

obup = new ImageButton(ACTIVITY);
obup.setPadding(1, 1, 1, 1);
obup.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//obup.setGravity(Gravity.CENTER|Gravity.CENTER);
obup.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.upobj ));
obup.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;obup&quot;);}
});
obup.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( obup );
pos+=btn_wid;

obnew = new ImageButton(ACTIVITY);
obnew.setPadding(1, 1, 1, 1);
obnew.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//obnew.setGravity(Gravity.CENTER|Gravity.CENTER);
obnew.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.clrall ));
obnew.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;obnew&quot;);}

});
obnew.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( obnew );
pos+=btn_wid;

obfile = new ImageButton(ACTIVITY);
obfile.setPadding(1, 1, 1, 1);
obfile.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//obfile.setGravity(Gravity.CENTER|Gravity.CENTER);
obfile.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.filewin ));
obfile.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;obfile&quot;);}
});
obfile.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( obfile );
pos+=btn_wid;

obcompile = new ImageButton(ACTIVITY);
obcompile.setPadding(1, 1, 1, 1);
obcompile.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//obcompile.setGravity(Gravity.CENTER|Gravity.CENTER);
obcompile.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.compile ));
obcompile.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;obcompile&quot;);}

});
obcompile.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( obcompile );
pos+=btn_wid;

obrun = new ImageButton(ACTIVITY);
obrun.setPadding(1, 1, 1, 1);
obrun.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//obrun.setGravity(Gravity.CENTER|Gravity.CENTER);
obrun.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.run ));
obrun.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;obrun&quot;);}
});
obrun.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( obrun );
pos+=btn_wid;

obxobj = new ImageButton(ACTIVITY);
obxobj.setPadding(1, 1, 1, 1);
obxobj.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//obxobj.setGravity(Gravity.CENTER|Gravity.CENTER);
obxobj.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.xobj ));
obxobj.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;obxobj&quot;);}
});
obxobj.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( obxobj );
pos+=btn_wid;

obaobj = new ImageButton(ACTIVITY);
obaobj.setPadding(1, 1, 1, 1);
obaobj.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//obaobj.setGravity(Gravity.CENTER|Gravity.CENTER);
obaobj.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.aobj ));
obaobj.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;obaobj&quot;);}
});
obaobj.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( obaobj );
pos+=btn_wid;

obuobj = new ImageButton(ACTIVITY);
obuobj.setPadding(1, 1, 1, 1);
obuobj.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//obuobj.setGravity(Gravity.CENTER|Gravity.CENTER);
obuobj.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.uobj ));
obuobj.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;obuobj&quot;);}
});
obuobj.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( obuobj );
pos+=btn_wid;

obsignal = new ImageButton(ACTIVITY);
obsignal.setPadding(1, 1, 1, 1);
obsignal.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//obsignal.setGravity(Gravity.CENTER|Gravity.CENTER);
obsignal.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.signal ));
obsignal.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;obsignal&quot;);}
});
obsignal.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( obsignal );
pos+=btn_wid;

obpin = new ImageButton(ACTIVITY);
obpin.setPadding(1, 1, 1, 1);
obpin.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//obpin.setGravity(Gravity.CENTER|Gravity.CENTER);
obpin.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.pin ));
obpin.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;obpin&quot;);}
});
obpin.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( obpin );
pos+=btn_wid;

obcodeclip = new ImageButton(ACTIVITY);
obcodeclip.setPadding(1, 1, 1, 1);
obcodeclip.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//obcodeclip.setGravity(Gravity.CENTER|Gravity.CENTER);
obcodeclip.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.codeclip ));
obcodeclip.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;obcodeclip&quot;);}
});
obcodeclip.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( obcodeclip );
pos+=btn_wid;

obgroup = new ImageButton(ACTIVITY);
obgroup.setPadding(1, 1, 1, 1);
obgroup.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//obgroup.setGravity(Gravity.CENTER|Gravity.CENTER);
obgroup.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.group ));
obgroup.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;obgroup&quot;);}
});
obgroup.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( obgroup );
pos+=btn_wid;

obguidsin = new ImageButton(ACTIVITY);
obguidsin.setPadding(1, 1, 1, 1);
obguidsin.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//obguidsin.setGravity(Gravity.CENTER|Gravity.CENTER);
obguidsin.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.guidsin ));
obguidsin.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;obguidsin&quot;);}
});
obguidsin.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( obguidsin );
pos+=btn_wid;

obdelete = new ImageButton(ACTIVITY);
obdelete.setPadding(1, 1, 1, 1);
obdelete.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//obdelete.setGravity(Gravity.CENTER|Gravity.CENTER);
obdelete.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.delete ));
obdelete.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;obdelete&quot;);}
});
obdelete.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( obdelete );
pos+=btn_wid;

obcopy = new ImageButton(ACTIVITY);
obcopy.setPadding(1, 1, 1, 1);
obcopy.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//obcopy.setGravity(Gravity.CENTER|Gravity.CENTER);
obcopy.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.copy ));
obcopy.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;obcopy&quot;);}
});
obcopy.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( obcopy );
pos+=btn_wid;

obpaste = new ImageButton(ACTIVITY);
obpaste.setPadding(1, 1, 1, 1);
obpaste.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//obpaste.setGravity(Gravity.CENTER|Gravity.CENTER);
obpaste.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.paste ));
obpaste.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;obpaste&quot;);}
});
obpaste.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( obpaste );
pos+=btn_wid;

obgtox = new ImageButton(ACTIVITY);
obgtox.setPadding(1, 1, 1, 1);
obgtox.setBackgroundColor( Color.rgb( 200, 200, 200 ));
obgtox.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.g2x ));
obgtox.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;obgtox&quot;);}
});
obgtox.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( obgtox );
pos+=btn_wid;

obxtog = new ImageButton(ACTIVITY);
obxtog.setPadding(1, 1, 1, 1);
obxtog.setBackgroundColor( Color.rgb( 200, 200, 200 ));
obxtog.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.x2g ));
obxtog.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;obxtog&quot;);}
});
obxtog.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( obxtog );
pos+=btn_wid;

obsetting = new ImageButton(ACTIVITY);
obsetting.setPadding(1, 1, 1, 1);
obsetting.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//obsetting.setGravity(Gravity.CENTER|Gravity.CENTER);
obsetting.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.setting ));
obsetting.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;obsetting&quot;);}
});
obsetting.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( obsetting );
pos+=btn_wid;

obcamera = new ImageButton(ACTIVITY);
obcamera.setPadding(1, 1, 1, 1);
obcamera.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//obcamera.setGravity(Gravity.CENTER|Gravity.CENTER);
obcamera.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.camera ));
obcamera.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;obcamera&quot;);}
});
obcamera.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( obcamera );
pos+=btn_wid;

bxview = new HorizontalScrollView(ACTIVITY);
bxview.addView(bbase);

opanel =new AbsoluteLayout(ACTIVITY);
opanel.setBackgroundColor(Color.rgb( 240, 240, 240));
opanel.setOnTouchListener( new View.OnTouchListener(){
  @Override    
  public boolean onTouch(View v, MotionEvent event) {
    if (event.getAction() == MotionEvent.ACTION_UP) {
      touch_x = (int) event.getRawX();    
      touch_y = (int) event.getRawY();
      handler(opanel,&quot;opanel&quot;);
    }
    return true;
  }
});
opanel.setLayoutParams( new AbsoluteLayout.LayoutParams( 3200,2400,0,0 ) );
obase.addView( opanel );

oyview = new ScrollView(ACTIVITY);
oyview.addView(obase);
oxview = new HorizontalScrollView(ACTIVITY);
oxview.addView(oyview);


bxview.setLayoutParams( new AbsoluteLayout.LayoutParams( screen_width,btn_hei,0,0 ) );
oxview.setLayoutParams( new AbsoluteLayout.LayoutParams( screen_width,screen_height-btn_hei,0,btn_hei ) );
base.addView(bxview);
base.addView(oxview);

}

public void set_objectname( String s ){
  oname.setText(s);
}
 
public String get_objectname(){
  return get_text(oname);
}
 
// コンポーネントの数を返す
public int get_component_count(){
  return opanel.getChildCount();
}

// コンポーネントを返す
public View get_component( int ix ){
  return opanel.getChildAt(ix);
}

// コンポーネントを追加する
public void add(View v){
  opanel.addView(v);
}

// コンポーネントを背面に追加する
public void addBack(View v){
  opanel.addView(v,0);
}

// コンポーネントを削除する
public void remove(View v){
  opanel.removeView(v);
}

// コンポーネントを全て消去する
public void clear(){
  opanel.removeAllViews();
}

// 再描画する
public void invalidate(){
  oxview.invalidate();
}

// 表示する
public void show( String title){
ACTIVITY.setContentView(present_view=base);
ACTIVITY.setTitle(title);
sedit_is_active = false;
}

// イメージをファイルに出力する
public void print_image(){

try{

Thread.sleep(100); 

// ファイル名表示部にフォーカスを移動(カーソルが画像に表示されないようにする)
oname.requestFocus();

//保存用Bitmap準備
Bitmap image = Bitmap.createBitmap(max_width+4, max_height+4, Bitmap.Config.ARGB_8888);

//新しいcanvasに保存用Bitmapをセット
Canvas canvas = new Canvas(image);

//canvasに対して描画
opanel.draw(canvas);                      // canvas に view を描画する

//出力ファイルを準備
FileOutputStream fos = new FileOutputStream(new File(CurrentDir,&quot;ScreenShot.jpg&quot;));

//JPG形式で出力
image.compress(CompressFormat.JPEG, 100, fos);
fos.close();

image_gui.show( image );

}catch (Throwable e) {}

}

}
</codetext>
</codeclip>
<relation>
<ID>_R7</ID>
<pin1name>_PSTART</pin1name>
<pin2name>_X_G83(_P84)</pin2name>
</relation>
<codeclip>
<ID>_C17</ID>
<x0>522</x0>
<y0>106</y0>
<width>213</width>
<height>49</height>
<codetext>// プロパティコンポーネント
PropertyGUI property_gui;
class PropertyGUI{
    int bottom_margine = 180; // 下部の余白

    AbsoluteLayout base;
    AbsoluteLayout bbase;
    AbsoluteLayout pbase;
    HorizontalScrollView bxview;
    ScrollView   pyview;

    Button       pbok;
    Button       pbcan;
    Button       pbset;
    Button       pbrst;

    TextView     Lscale;
    EditText     tscale;

    TextView     Lproperty0;
    TextView     Lcompilecommand0;
    EditText     compilecommand0;
    TextView     Lruncommand0;
    EditText     runcommand0;
    TextView     Lguidesignercommand0;
    EditText     guidesignercommand0;
    TextView     Limportfiles0;
    EditText     importfiles0;
    TextView     Lprogramstartupcode0;
    EditText     programstartupcode0;
    EditText     nativehelpcommand0;
    TextView     Lnativehelpcommand0;

    TextView     Lproperty1;
    TextView     Lcompilecommand1;
    EditText     compilecommand1;
    TextView     Lruncommand1;
    EditText     runcommand1;
    TextView     Lguidesignercommand1;
    EditText     guidesignercommand1;
    TextView     Limportfiles1;
    EditText     importfiles1;
    TextView     Lprogramstartupcode1;
    EditText     programstartupcode1;
    EditText     nativehelpcommand1;
    TextView     Lnativehelpcommand1;

    TextView     Lproperty2;
    TextView     Lcompilecommand2;
    EditText     compilecommand2;
    TextView     Lruncommand2;
    EditText     runcommand2;
    TextView     Lguidesignercommand2;
    EditText     guidesignercommand2;
    TextView     Limportfiles2;
    EditText     importfiles2;
    TextView     Lprogramstartupcode2;
    EditText     programstartupcode2;
    EditText     nativehelpcommand2;
    TextView     Lnativehelpcommand2;

    TextView     Lproperty3;
    TextView     Lcompilecommand3;
    EditText     compilecommand3;
    TextView     Lruncommand3;
    EditText     runcommand3;
    TextView     Lguidesignercommand3;
    EditText     guidesignercommand3;
    TextView     Limportfiles3;
    EditText     importfiles3;
    TextView     Lprogramstartupcode3;
    EditText     programstartupcode3;
    EditText     nativehelpcommand3;
    TextView     Lnativehelpcommand3;

    TextView     Lproperty4;
    TextView     Lcompilecommand4;
    EditText     compilecommand4;
    TextView     Lruncommand4;
    EditText     runcommand4;
    TextView     Lguidesignercommand4;
    EditText     guidesignercommand4;
    TextView     Limportfiles4;
    EditText     importfiles4;
    TextView     Lprogramstartupcode4;
    EditText     programstartupcode4;
    EditText     nativehelpcommand4;
    TextView     Lnativehelpcommand4;

    TextView     Lproperty5;
    TextView     Lcompilecommand5;
    EditText     compilecommand5;
    TextView     Lruncommand5;
    EditText     runcommand5;
    TextView     Lguidesignercommand5;
    EditText     guidesignercommand5;
    TextView     Limportfiles5;
    EditText     importfiles5;
    TextView     Lprogramstartupcode5;
    EditText     programstartupcode5;
    EditText     nativehelpcommand5;
    TextView     Lnativehelpcommand5;

    TextView     Lproperty6;
    TextView     Lcompilecommand6;
    EditText     compilecommand6;
    TextView     Lruncommand6;
    EditText     runcommand6;
    TextView     Lguidesignercommand6;
    EditText     guidesignercommand6;
    TextView     Limportfiles6;
    EditText     importfiles6;
    TextView     Lprogramstartupcode6;
    EditText     programstartupcode6;
    TextView     Lnativehelpcommand6;
    EditText     nativehelpcommand6;
    TextView     Lmargine;

// プロパティコンポーネントを作成
PropertyGUI(){

dprint(&quot;property gui\n&quot;);

int prop_wid=screen_width-32;
int btn_wid=200;
int btn_hei=65;
int pos=0;

base = new AbsoluteLayout(ACTIVITY);
base.setBackgroundColor(Color.rgb( 255, 255, 255));
bbase = new AbsoluteLayout(ACTIVITY);
bbase.setBackgroundColor(Color.rgb( 255, 255, 255));
pbase = new AbsoluteLayout(ACTIVITY);
pbase.setBackgroundColor(Color.rgb( 255, 255, 255));

dprint(&quot;buttons\n&quot;);

pbok = new Button(ACTIVITY);
pbok.setPadding(1, 1, 1, 1);
pbok.setGravity(Gravity.CENTER|Gravity.CENTER);
pbok.setText(&quot;OK&quot;);
pbok.setTextColor( Color.rgb( 0, 0, 0 ));
pbok.setBackgroundColor( Color.rgb( 200, 200, 200 ));
pbok.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     restore_property();
     hide();
   }
});
pbok.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( pbok );
pos+=btn_wid+5;

pbcan = new Button(ACTIVITY);
pbcan.setPadding(1, 1, 1, 1);
pbcan.setGravity(Gravity.CENTER|Gravity.CENTER);
pbcan.setText(&quot;キャンセル&quot;);
pbcan.setTextColor( Color.rgb( 0, 0, 0 ));
pbcan.setBackgroundColor( Color.rgb( 200, 200, 200 ));
pbcan.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     hide();
   }
});
pbcan.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( pbcan );
pos+=btn_wid+5;

pbset = new Button(ACTIVITY);
pbset.setPadding(1, 1, 1, 1);
pbset.setGravity(Gravity.CENTER|Gravity.CENTER);
pbset.setText(&quot;デフォルトに設定&quot;);
pbset.setTextColor( Color.rgb( 0, 0, 0 ));
pbset.setBackgroundColor( Color.rgb( 200, 200, 200 ));
pbset.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     restore_property();
     saveProperty();
     hide();
   }
});
pbset.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( pbset );
pos+=btn_wid+5;

pbrst = new Button(ACTIVITY);
pbrst.setPadding(1, 1, 1, 1);
pbrst.setGravity(Gravity.CENTER|Gravity.CENTER);
pbrst.setText(&quot;デフォルトに戻す&quot;);
pbrst.setTextColor( Color.rgb( 0, 0, 0 ));
pbrst.setBackgroundColor( Color.rgb( 200, 200, 200 ));
pbrst.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     loadProperty();
     recall();
     menu_gui = new MenuGUI();
   }
});
pbrst.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( pbrst );
pos=btn_hei+3;

dprint(&quot;property0\n&quot;);

Lscale = new TextView(ACTIVITY);
Lscale.setPadding(1, 1, 1, 1);
Lscale.setGravity(Gravity.CENTER|Gravity.CENTER);
Lscale.setTextSize( 20f );
Lscale.setTextColor( Color.rgb( 0, 0, 0 ));
Lscale.setText(&quot;( 拡大率 )&quot;);
Lscale.setLayoutParams( new AbsoluteLayout.LayoutParams( 200,btn_hei,0,pos ) );
pbase.addView( Lscale );
pos+=btn_hei+3;

tscale = new EditText(ACTIVITY);
tscale.setPadding(1, 1, 1, 1);
tscale.setGravity(Gravity.CENTER|Gravity.CENTER);
tscale.setTextColor( Color.rgb( 0, 0, 0 ));
tscale.setLayoutParams( new AbsoluteLayout.LayoutParams( 200,btn_hei,0,pos ) );
pbase.addView( tscale );
pos+=btn_hei+30;

Lproperty0 = new TextView(ACTIVITY);
Lproperty0.setPadding(1, 1, 1, 1);
Lproperty0.setGravity(Gravity.LEFT|Gravity.CENTER);
Lproperty0.setTextSize( 16f );
Lproperty0.setTextColor( Color.rgb( 0, 0, 0 ));
Lproperty0.setText(&quot;（Javaのプロパティ）&quot;);
Lproperty0.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lproperty0 );
pos+=btn_hei+3;

Lcompilecommand0 = new TextView(ACTIVITY);
Lcompilecommand0.setPadding(1, 1, 1, 1);
Lcompilecommand0.setGravity(Gravity.LEFT|Gravity.CENTER);
Lcompilecommand0.setTextSize( 16f );
Lcompilecommand0.setTextColor( Color.rgb( 0, 0, 0 ));
Lcompilecommand0.setText(&quot;コンパイルコマンド&quot;);
Lcompilecommand0.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lcompilecommand0 );
pos+=btn_hei+3;

compilecommand0 = new EditText(ACTIVITY);
compilecommand0.setPadding(1, 1, 1, 1);
compilecommand0.setGravity(Gravity.LEFT|Gravity.CENTER);
compilecommand0.setTextColor( Color.rgb( 0, 0, 0 ));
compilecommand0.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( compilecommand0 );
pos+=btn_hei+3;

Lruncommand0 = new TextView(ACTIVITY);
Lruncommand0.setPadding(1, 1, 1, 1);
Lruncommand0.setGravity(Gravity.LEFT|Gravity.CENTER);
Lruncommand0.setTextSize( 16f );
Lruncommand0.setTextColor( Color.rgb( 0, 0, 0 ));
Lruncommand0.setText(&quot;実行コマンド&quot;);
Lruncommand0.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lruncommand0 );
pos+=btn_hei+3;

runcommand0 = new EditText(ACTIVITY);
runcommand0.setPadding(1, 1, 1, 1);
runcommand0.setGravity(Gravity.LEFT|Gravity.CENTER);
runcommand0.setTextColor( Color.rgb( 0, 0, 0 ));
runcommand0.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( runcommand0 );
pos+=btn_hei+3;

Lguidesignercommand0 = new TextView(ACTIVITY);
Lguidesignercommand0.setPadding(1, 1, 1, 1);
Lguidesignercommand0.setGravity(Gravity.LEFT|Gravity.CENTER);
Lguidesignercommand0.setTextSize( 16f );
Lguidesignercommand0.setTextColor( Color.rgb( 0, 0, 0 ));
Lguidesignercommand0.setText(&quot;GUIデザイナの起動コマンド&quot;);
Lguidesignercommand0.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lguidesignercommand0 );
pos+=btn_hei+3;

guidesignercommand0 = new EditText(ACTIVITY);
guidesignercommand0.setPadding(1, 1, 1, 1);
guidesignercommand0.setGravity(Gravity.LEFT|Gravity.CENTER);
guidesignercommand0.setTextColor( Color.rgb( 0, 0, 0 ));
guidesignercommand0.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( guidesignercommand0 );
pos+=btn_hei+3;

Limportfiles0 = new TextView(ACTIVITY);
Limportfiles0.setPadding(1, 1, 1, 1);
Limportfiles0.setGravity(Gravity.LEFT|Gravity.CENTER);
Limportfiles0.setTextSize( 16f );
Limportfiles0.setTextColor( Color.rgb( 0, 0, 0 ));
Limportfiles0.setText(&quot;インポートパッケージ＆プログラムスタートアップコード&quot;);
Limportfiles0.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Limportfiles0 );
pos+=btn_hei+3;

importfiles0 = new EditText(ACTIVITY);
importfiles0.setPadding(1, 1, 1, 1);
importfiles0.setGravity(Gravity.LEFT|Gravity.CENTER);
importfiles0.setTextColor( Color.rgb( 0, 0, 0 ));
importfiles0.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( importfiles0 );
pos+=btn_hei+3;

Lprogramstartupcode0 = new TextView(ACTIVITY);
Lprogramstartupcode0.setPadding(1, 1, 1, 1);
Lprogramstartupcode0.setGravity(Gravity.LEFT|Gravity.CENTER);
Lprogramstartupcode0.setTextSize( 16f );
Lprogramstartupcode0.setTextColor( Color.rgb( 0, 0, 0 ));
Lprogramstartupcode0.setText(&quot;変数宣言など&quot;);
Lprogramstartupcode0.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lprogramstartupcode0 );
pos+=btn_hei+3;

programstartupcode0 = new EditText(ACTIVITY);
programstartupcode0.setPadding(1, 1, 1, 1);
programstartupcode0.setGravity(Gravity.LEFT|Gravity.CENTER);
programstartupcode0.setTextColor( Color.rgb( 0, 0, 0 ));
programstartupcode0.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( programstartupcode0 );
pos+=btn_hei+3;

Lnativehelpcommand0 = new TextView(ACTIVITY);
Lnativehelpcommand0.setPadding(1, 1, 1, 1);
Lnativehelpcommand0.setGravity(Gravity.LEFT|Gravity.CENTER);
Lnativehelpcommand0.setTextSize( 16f );
Lnativehelpcommand0.setTextColor( Color.rgb( 0, 0, 0 ));
Lnativehelpcommand0.setText(&quot;Javaのヘルプファイルを開くコマンド&quot;);
Lnativehelpcommand0.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lnativehelpcommand0 );
pos+=btn_hei+3;

nativehelpcommand0 = new EditText(ACTIVITY);
nativehelpcommand0.setPadding(1, 1, 1, 1);
nativehelpcommand0.setGravity(Gravity.LEFT|Gravity.CENTER);
nativehelpcommand0.setTextColor( Color.rgb( 0, 0, 0 ));
nativehelpcommand0.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( nativehelpcommand0 );
pos+=btn_hei+3;

dprint(&quot;property1\n&quot;);

Lproperty1 = new TextView(ACTIVITY);
Lproperty1.setPadding(1, 1, 1, 1);
Lproperty1.setGravity(Gravity.LEFT|Gravity.CENTER);
Lproperty1.setTextSize( 16f );
Lproperty1.setTextColor( Color.rgb( 0, 0, 0 ));
Lproperty1.setText(&quot;（Javaアプレットのプロパティ）&quot;);
Lproperty1.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lproperty1 );
pos+=btn_hei+3;

Lcompilecommand1 = new TextView(ACTIVITY);
Lcompilecommand1.setPadding(1, 1, 1, 1);
Lcompilecommand1.setGravity(Gravity.LEFT|Gravity.CENTER);
Lcompilecommand1.setTextSize( 16f );
Lcompilecommand1.setTextColor( Color.rgb( 0, 0, 0 ));
Lcompilecommand1.setText(&quot;コンパイルコマンド&quot;);
Lcompilecommand1.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lcompilecommand1 );
pos+=btn_hei+3;

compilecommand1 = new EditText(ACTIVITY);
compilecommand1.setPadding(1, 1, 1, 1);
compilecommand1.setGravity(Gravity.LEFT|Gravity.CENTER);
compilecommand1.setTextColor( Color.rgb( 0, 0, 0 ));
compilecommand1.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( compilecommand1 );
pos+=btn_hei+3;

Lruncommand1 = new TextView(ACTIVITY);
Lruncommand1.setPadding(1, 1, 1, 1);
Lruncommand1.setGravity(Gravity.LEFT|Gravity.CENTER);
Lruncommand1.setTextSize( 16f );
Lruncommand1.setTextColor( Color.rgb( 0, 0, 0 ));
Lruncommand1.setText(&quot;実行コマンド&quot;);
Lruncommand1.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lruncommand1 );
pos+=btn_hei+3;

runcommand1 = new EditText(ACTIVITY);
runcommand1.setPadding(1, 1, 1, 1);
runcommand1.setGravity(Gravity.LEFT|Gravity.CENTER);
runcommand1.setTextColor( Color.rgb( 0, 0, 0 ));
runcommand1.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( runcommand1 );
pos+=btn_hei+3;

Lguidesignercommand1 = new TextView(ACTIVITY);
Lguidesignercommand1.setPadding(1, 1, 1, 1);
Lguidesignercommand1.setGravity(Gravity.LEFT|Gravity.CENTER);
Lguidesignercommand1.setTextSize( 16f );
Lguidesignercommand1.setTextColor( Color.rgb( 0, 0, 0 ));
Lguidesignercommand1.setText(&quot;GUIデザイナの起動コマンド&quot;);
Lguidesignercommand1.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lguidesignercommand1 );
pos+=btn_hei+3;

guidesignercommand1 = new EditText(ACTIVITY);
guidesignercommand1.setPadding(1, 1, 1, 1);
guidesignercommand1.setGravity(Gravity.LEFT|Gravity.CENTER);
guidesignercommand1.setTextColor( Color.rgb( 0, 0, 0 ));
guidesignercommand1.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( guidesignercommand1 );
pos+=btn_hei+3;

Limportfiles1 = new TextView(ACTIVITY);
Limportfiles1.setPadding(1, 1, 1, 1);
Limportfiles1.setGravity(Gravity.LEFT|Gravity.CENTER);
Limportfiles1.setTextSize( 16f );
Limportfiles1.setTextColor( Color.rgb( 0, 0, 0 ));
Limportfiles1.setText(&quot;インポートするパッケージ &amp; スタートアップコード&quot;);
Limportfiles1.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Limportfiles1 );
pos+=btn_hei+3;

importfiles1 = new EditText(ACTIVITY);
importfiles1.setPadding(1, 1, 1, 1);
importfiles1.setGravity(Gravity.LEFT|Gravity.CENTER);
importfiles1.setTextColor( Color.rgb( 0, 0, 0 ));
importfiles1.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( importfiles1 );
pos+=btn_hei+3;

Lprogramstartupcode1 = new TextView(ACTIVITY);
Lprogramstartupcode1.setPadding(1, 1, 1, 1);
Lprogramstartupcode1.setGravity(Gravity.LEFT|Gravity.CENTER);
Lprogramstartupcode1.setTextSize( 16f );
Lprogramstartupcode1.setTextColor( Color.rgb( 0, 0, 0 ));
Lprogramstartupcode1.setText(&quot;変数宣言など&quot;);
Lprogramstartupcode1.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lprogramstartupcode1 );
pos+=btn_hei+3;

programstartupcode1 = new EditText(ACTIVITY);
programstartupcode1.setPadding(1, 1, 1, 1);
programstartupcode1.setGravity(Gravity.LEFT|Gravity.CENTER);
programstartupcode1.setTextColor( Color.rgb( 0, 0, 0 ));
programstartupcode1.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( programstartupcode1 );
pos+=btn_hei+3;

Lnativehelpcommand1 = new TextView(ACTIVITY);
Lnativehelpcommand1.setPadding(1, 1, 1, 1);
Lnativehelpcommand1.setGravity(Gravity.LEFT|Gravity.CENTER);
Lnativehelpcommand1.setTextSize( 16f );
Lnativehelpcommand1.setTextColor( Color.rgb( 0, 0, 0 ));
Lnativehelpcommand1.setText(&quot;Javaアプレットのヘルプファイルを開くコマンド&quot;);
Lnativehelpcommand1.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lnativehelpcommand1 );
pos+=btn_hei+3;

nativehelpcommand1 = new EditText(ACTIVITY);
nativehelpcommand1.setPadding(1, 1, 1, 1);
nativehelpcommand1.setGravity(Gravity.LEFT|Gravity.CENTER);
nativehelpcommand1.setTextColor( Color.rgb( 0, 0, 0 ));
nativehelpcommand1.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( nativehelpcommand1 );
pos+=btn_hei+3;

dprint(&quot;property2\n&quot;);

Lproperty2 = new TextView(ACTIVITY);
Lproperty2.setPadding(1, 1, 1, 1);
Lproperty2.setGravity(Gravity.LEFT|Gravity.CENTER);
Lproperty2.setTextSize( 16f );
Lproperty2.setTextColor( Color.rgb( 0, 0, 0 ));
Lproperty2.setText(&quot;（C++コンソールアプリケーションのプロパティ）&quot;);
Lproperty2.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lproperty2 );
pos+=btn_hei+3;

Lcompilecommand2 = new TextView(ACTIVITY);
Lcompilecommand2.setPadding(1, 1, 1, 1);
Lcompilecommand2.setGravity(Gravity.LEFT|Gravity.CENTER);
Lcompilecommand2.setTextSize( 16f );
Lcompilecommand2.setTextColor( Color.rgb( 0, 0, 0 ));
Lcompilecommand2.setText(&quot;コンパイルコマンド&quot;);
Lcompilecommand2.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lcompilecommand2 );
pos+=btn_hei+3;

compilecommand2 = new EditText(ACTIVITY);
compilecommand2.setPadding(1, 1, 1, 1);
compilecommand2.setGravity(Gravity.LEFT|Gravity.CENTER);
compilecommand2.setTextColor( Color.rgb( 0, 0, 0 ));
compilecommand2.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( compilecommand2 );
pos+=btn_hei+3;

Lruncommand2 = new TextView(ACTIVITY);
Lruncommand2.setPadding(1, 1, 1, 1);
Lruncommand2.setGravity(Gravity.LEFT|Gravity.CENTER);
Lruncommand2.setTextSize( 16f );
Lruncommand2.setTextColor( Color.rgb( 0, 0, 0 ));
Lruncommand2.setText(&quot;実行コマンド&quot;);
Lruncommand2.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lruncommand2 );
pos+=btn_hei+3;

runcommand2 = new EditText(ACTIVITY);
runcommand2.setPadding(1, 1, 1, 1);
runcommand2.setGravity(Gravity.LEFT|Gravity.CENTER);
runcommand2.setTextColor( Color.rgb( 0, 0, 0 ));
runcommand2.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( runcommand2 );
pos+=btn_hei+3;

Lguidesignercommand2 = new TextView(ACTIVITY);
Lguidesignercommand2.setPadding(1, 1, 1, 1);
Lguidesignercommand2.setGravity(Gravity.LEFT|Gravity.CENTER);
Lguidesignercommand2.setTextSize( 16f );
Lguidesignercommand2.setTextColor( Color.rgb( 0, 0, 0 ));
Lguidesignercommand2.setText(&quot;GUIデザイナの起動コマンド&quot;);
Lguidesignercommand2.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lguidesignercommand2 );
pos+=btn_hei+3;

guidesignercommand2 = new EditText(ACTIVITY);
guidesignercommand2.setPadding(1, 1, 1, 1);
guidesignercommand2.setGravity(Gravity.LEFT|Gravity.CENTER);
guidesignercommand2.setTextColor( Color.rgb( 0, 0, 0 ));
guidesignercommand2.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( guidesignercommand2 );
pos+=btn_hei+3;

Limportfiles2 = new TextView(ACTIVITY);
Limportfiles2.setPadding(1, 1, 1, 1);
Limportfiles2.setGravity(Gravity.LEFT|Gravity.CENTER);
Limportfiles2.setTextSize( 16f );
Limportfiles2.setTextColor( Color.rgb( 0, 0, 0 ));
Limportfiles2.setText(&quot;インクルード宣言など&quot;);
Limportfiles2.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Limportfiles2 );
pos+=btn_hei+3;

importfiles2 = new EditText(ACTIVITY);
importfiles2.setPadding(1, 1, 1, 1);
importfiles2.setGravity(Gravity.LEFT|Gravity.CENTER);
importfiles2.setTextColor( Color.rgb( 0, 0, 0 ));
importfiles2.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( importfiles2 );
pos+=btn_hei+3;

Lprogramstartupcode2 = new TextView(ACTIVITY);
Lprogramstartupcode2.setPadding(1, 1, 1, 1);
Lprogramstartupcode2.setGravity(Gravity.LEFT|Gravity.CENTER);
Lprogramstartupcode2.setTextSize( 16f );
Lprogramstartupcode2.setTextColor( Color.rgb( 0, 0, 0 ));
Lprogramstartupcode2.setText(&quot;スタートアップコード&quot;);
Lprogramstartupcode2.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lprogramstartupcode2 );
pos+=btn_hei+3;

programstartupcode2 = new EditText(ACTIVITY);
programstartupcode2.setPadding(1, 1, 1, 1);
programstartupcode2.setGravity(Gravity.LEFT|Gravity.CENTER);
programstartupcode2.setTextColor( Color.rgb( 0, 0, 0 ));
programstartupcode2.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( programstartupcode2 );
pos+=btn_hei+3;

Lnativehelpcommand2 = new TextView(ACTIVITY);
Lnativehelpcommand2.setPadding(1, 1, 1, 1);
Lnativehelpcommand2.setGravity(Gravity.LEFT|Gravity.CENTER);
Lnativehelpcommand2.setTextSize( 16f );
Lnativehelpcommand2.setTextColor( Color.rgb( 0, 0, 0 ));
Lnativehelpcommand2.setText(&quot;C++のヘルプファイルを開くコマンド&quot;);
Lnativehelpcommand2.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lnativehelpcommand2 );
pos+=btn_hei+3;

nativehelpcommand2 = new EditText(ACTIVITY);
nativehelpcommand2.setPadding(1, 1, 1, 1);
nativehelpcommand2.setGravity(Gravity.LEFT|Gravity.CENTER);
nativehelpcommand2.setTextColor( Color.rgb( 0, 0, 0 ));
nativehelpcommand2.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( nativehelpcommand2 );
pos+=btn_hei+3;

dprint(&quot;property3\n&quot;);

Lproperty3 = new TextView(ACTIVITY);
Lproperty3.setPadding(1, 1, 1, 1);
Lproperty3.setGravity(Gravity.LEFT|Gravity.CENTER);
Lproperty3.setTextSize( 16f );
Lproperty3.setTextColor( Color.rgb( 0, 0, 0 ));
Lproperty3.setText(&quot;（C++ウィンドウアプリケーションのプロパティ）&quot;);
Lproperty3.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lproperty3 );
pos+=btn_hei+3;

Lcompilecommand3 = new TextView(ACTIVITY);
Lcompilecommand3.setPadding(1, 1, 1, 1);
Lcompilecommand3.setGravity(Gravity.LEFT|Gravity.CENTER);
Lcompilecommand3.setTextSize( 16f );
Lcompilecommand3.setTextColor( Color.rgb( 0, 0, 0 ));
Lcompilecommand3.setText(&quot;コンパイルコマンド&quot;);
Lcompilecommand3.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lcompilecommand3 );
pos+=btn_hei+3;

compilecommand3 = new EditText(ACTIVITY);
compilecommand3.setPadding(1, 1, 1, 1);
compilecommand3.setGravity(Gravity.LEFT|Gravity.CENTER);
compilecommand3.setTextColor( Color.rgb( 0, 0, 0 ));
compilecommand3.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( compilecommand3 );
pos+=btn_hei+3;

Lruncommand3 = new TextView(ACTIVITY);
Lruncommand3.setPadding(1, 1, 1, 1);
Lruncommand3.setGravity(Gravity.LEFT|Gravity.CENTER);
Lruncommand3.setTextSize( 16f );
Lruncommand3.setTextColor( Color.rgb( 0, 0, 0 ));
Lruncommand3.setText(&quot;実行コマンド&quot;);
Lruncommand3.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lruncommand3 );
pos+=btn_hei+3;

runcommand3 = new EditText(ACTIVITY);
runcommand3.setPadding(1, 1, 1, 1);
runcommand3.setGravity(Gravity.LEFT|Gravity.CENTER);
runcommand3.setTextColor( Color.rgb( 0, 0, 0 ));
runcommand3.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( runcommand3 );
pos+=btn_hei+3;

Lguidesignercommand3 = new TextView(ACTIVITY);
Lguidesignercommand3.setPadding(1, 1, 1, 1);
Lguidesignercommand3.setGravity(Gravity.LEFT|Gravity.CENTER);
Lguidesignercommand3.setTextSize( 16f );
Lguidesignercommand3.setTextColor( Color.rgb( 0, 0, 0 ));
Lguidesignercommand3.setText(&quot;GUIデザイナの起動コマンド&quot;);
Lguidesignercommand3.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lguidesignercommand3 );
pos+=btn_hei+3;

guidesignercommand3 = new EditText(ACTIVITY);
guidesignercommand3.setPadding(1, 1, 1, 1);
guidesignercommand3.setGravity(Gravity.LEFT|Gravity.CENTER);
guidesignercommand3.setTextColor( Color.rgb( 0, 0, 0 ));
guidesignercommand3.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( guidesignercommand3 );
pos+=btn_hei+3;

Limportfiles3 = new TextView(ACTIVITY);
Limportfiles3.setPadding(1, 1, 1, 1);
Limportfiles3.setGravity(Gravity.LEFT|Gravity.CENTER);
Limportfiles3.setTextSize( 16f );
Limportfiles3.setTextColor( Color.rgb( 0, 0, 0 ));
Limportfiles3.setText(&quot;インクルード宣言など&quot;);
Limportfiles3.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Limportfiles3 );
pos+=btn_hei+3;

importfiles3 = new EditText(ACTIVITY);
importfiles3.setPadding(1, 1, 1, 1);
importfiles3.setGravity(Gravity.LEFT|Gravity.CENTER);
importfiles3.setTextColor( Color.rgb( 0, 0, 0 ));
importfiles3.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( importfiles3 );
pos+=btn_hei+3;

Lprogramstartupcode3 = new TextView(ACTIVITY);
Lprogramstartupcode3.setPadding(1, 1, 1, 1);
Lprogramstartupcode3.setGravity(Gravity.LEFT|Gravity.CENTER);
Lprogramstartupcode3.setTextSize( 16f );
Lprogramstartupcode3.setTextColor( Color.rgb( 0, 0, 0 ));
Lprogramstartupcode3.setText(&quot;スタートアップコード&quot;);
Lprogramstartupcode3.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lprogramstartupcode3 );
pos+=btn_hei+3;

programstartupcode3 = new EditText(ACTIVITY);
programstartupcode3.setPadding(1, 1, 1, 1);
programstartupcode3.setGravity(Gravity.LEFT|Gravity.CENTER);
programstartupcode3.setTextColor( Color.rgb( 0, 0, 0 ));
programstartupcode3.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( programstartupcode3 );
pos+=btn_hei+3;

Lnativehelpcommand3 = new TextView(ACTIVITY);
Lnativehelpcommand3.setPadding(1, 1, 1, 1);
Lnativehelpcommand3.setGravity(Gravity.LEFT|Gravity.CENTER);
Lnativehelpcommand3.setTextSize( 16f );
Lnativehelpcommand3.setTextColor( Color.rgb( 0, 0, 0 ));
Lnativehelpcommand3.setText(&quot;C++のヘルプファイルを開くコマンド&quot;);
Lnativehelpcommand3.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lnativehelpcommand3 );
pos+=btn_hei+3;

nativehelpcommand3 = new EditText(ACTIVITY);
nativehelpcommand3.setPadding(1, 1, 1, 1);
nativehelpcommand3.setGravity(Gravity.LEFT|Gravity.CENTER);
nativehelpcommand3.setTextColor( Color.rgb( 0, 0, 0 ));
nativehelpcommand3.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( nativehelpcommand3 );
pos+=btn_hei+3;

dprint(&quot;property4\n&quot;);

Lproperty4 = new TextView(ACTIVITY);
Lproperty4.setPadding(1, 1, 1, 1);
Lproperty4.setGravity(Gravity.LEFT|Gravity.CENTER);
Lproperty4.setTextSize( 16f );
Lproperty4.setTextColor( Color.rgb( 0, 0, 0 ));
Lproperty4.setText(&quot;（androidのプロパティ）&quot;);
Lproperty4.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lproperty4 );
pos+=btn_hei+3;

Lcompilecommand4 = new TextView(ACTIVITY);
Lcompilecommand4.setPadding(1, 1, 1, 1);
Lcompilecommand4.setGravity(Gravity.LEFT|Gravity.CENTER);
Lcompilecommand4.setTextSize( 16f );
Lcompilecommand4.setTextColor( Color.rgb( 0, 0, 0 ));
Lcompilecommand4.setText(&quot;コンパイルコマンド&quot;);
Lcompilecommand4.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lcompilecommand4 );
pos+=btn_hei+3;

compilecommand4 = new EditText(ACTIVITY);
compilecommand4.setPadding(1, 1, 1, 1);
compilecommand4.setGravity(Gravity.LEFT|Gravity.CENTER);
compilecommand4.setTextColor( Color.rgb( 0, 0, 0 ));
compilecommand4.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( compilecommand4 );
pos+=btn_hei+3;

Lruncommand4 = new TextView(ACTIVITY);
Lruncommand4.setPadding(1, 1, 1, 1);
Lruncommand4.setGravity(Gravity.LEFT|Gravity.CENTER);
Lruncommand4.setTextSize( 16f );
Lruncommand4.setTextColor( Color.rgb( 0, 0, 0 ));
Lruncommand4.setText(&quot;実行コマンド&quot;);
Lruncommand4.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lruncommand4 );
pos+=btn_hei+3;

runcommand4 = new EditText(ACTIVITY);
runcommand4.setPadding(1, 1, 1, 1);
runcommand4.setGravity(Gravity.LEFT|Gravity.CENTER);
runcommand4.setTextColor( Color.rgb( 0, 0, 0 ));
runcommand4.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( runcommand4 );
pos+=btn_hei+3;

Lguidesignercommand4 = new TextView(ACTIVITY);
Lguidesignercommand4.setPadding(1, 1, 1, 1);
Lguidesignercommand4.setGravity(Gravity.LEFT|Gravity.CENTER);
Lguidesignercommand4.setTextSize( 16f );
Lguidesignercommand4.setTextColor( Color.rgb( 0, 0, 0 ));
Lguidesignercommand4.setText(&quot;GUIデザイナの起動コマンド&quot;);
Lguidesignercommand4.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lguidesignercommand4 );
pos+=btn_hei+3;

guidesignercommand4 = new EditText(ACTIVITY);
guidesignercommand4.setPadding(1, 1, 1, 1);
guidesignercommand4.setGravity(Gravity.LEFT|Gravity.CENTER);
guidesignercommand4.setTextColor( Color.rgb( 0, 0, 0 ));
guidesignercommand4.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( guidesignercommand4 );
pos+=btn_hei+3;

Limportfiles4 = new TextView(ACTIVITY);
Limportfiles4.setPadding(1, 1, 1, 1);
Limportfiles4.setGravity(Gravity.LEFT|Gravity.CENTER);
Limportfiles4.setTextSize( 16f );
Limportfiles4.setTextColor( Color.rgb( 0, 0, 0 ));
Limportfiles4.setText(&quot;インポートするパッケージ &amp; スタートアップコード&quot;);
Limportfiles4.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Limportfiles4 );
pos+=btn_hei+3;

importfiles4 = new EditText(ACTIVITY);
importfiles4.setPadding(1, 1, 1, 1);
importfiles4.setGravity(Gravity.LEFT|Gravity.CENTER);
importfiles4.setTextColor( Color.rgb( 0, 0, 0 ));
importfiles4.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( importfiles4 );
pos+=btn_hei+3;

Lprogramstartupcode4 = new TextView(ACTIVITY);
Lprogramstartupcode4.setPadding(1, 1, 1, 1);
Lprogramstartupcode4.setGravity(Gravity.LEFT|Gravity.CENTER);
Lprogramstartupcode4.setTextSize( 16f );
Lprogramstartupcode4.setTextColor( Color.rgb( 0, 0, 0 ));
Lprogramstartupcode4.setText(&quot;変数宣言など&quot;);
Lprogramstartupcode4.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lprogramstartupcode4 );
pos+=btn_hei+3;

programstartupcode4 = new EditText(ACTIVITY);
programstartupcode4.setPadding(1, 1, 1, 1);
programstartupcode4.setGravity(Gravity.LEFT|Gravity.CENTER);
programstartupcode4.setTextColor( Color.rgb( 0, 0, 0 ));
programstartupcode4.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( programstartupcode4 );
pos+=btn_hei+3;

Lnativehelpcommand4 = new TextView(ACTIVITY);
Lnativehelpcommand4.setPadding(1, 1, 1, 1);
Lnativehelpcommand4.setGravity(Gravity.LEFT|Gravity.CENTER);
Lnativehelpcommand4.setTextSize( 16f );
Lnativehelpcommand4.setTextColor( Color.rgb( 0, 0, 0 ));
Lnativehelpcommand4.setText(&quot;androidマニフェスト&quot;);
Lnativehelpcommand4.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lnativehelpcommand4 );
pos+=btn_hei+3;

nativehelpcommand4 = new EditText(ACTIVITY);
nativehelpcommand4.setPadding(1, 1, 1, 1);
nativehelpcommand4.setGravity(Gravity.LEFT|Gravity.CENTER);
nativehelpcommand4.setTextColor( Color.rgb( 0, 0, 0 ));
nativehelpcommand4.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( nativehelpcommand4 );
pos+=btn_hei+3;

dprint(&quot;property5\n&quot;);

Lproperty5 = new TextView(ACTIVITY);
Lproperty5.setPadding(1, 1, 1, 1);
Lproperty5.setGravity(Gravity.LEFT|Gravity.CENTER);
Lproperty5.setTextSize( 16f );
Lproperty5.setTextColor( Color.rgb( 0, 0, 0 ));
Lproperty5.setText(&quot;（BASICのプロパティ）&quot;);
Lproperty5.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lproperty5 );
pos+=btn_hei+3;

Lcompilecommand5 = new TextView(ACTIVITY);
Lcompilecommand5.setPadding(1, 1, 1, 1);
Lcompilecommand5.setGravity(Gravity.LEFT|Gravity.CENTER);
Lcompilecommand5.setTextSize( 16f );
Lcompilecommand5.setTextColor( Color.rgb( 0, 0, 0 ));
Lcompilecommand5.setText(&quot;コンパイルコマンド&quot;);
Lcompilecommand5.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lcompilecommand5 );
pos+=btn_hei+3;

compilecommand5 = new EditText(ACTIVITY);
compilecommand5.setPadding(1, 1, 1, 1);
compilecommand5.setGravity(Gravity.LEFT|Gravity.CENTER);
compilecommand5.setTextColor( Color.rgb( 0, 0, 0 ));
compilecommand5.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( compilecommand5 );
pos+=btn_hei+3;

Lruncommand5 = new TextView(ACTIVITY);
Lruncommand5.setPadding(1, 1, 1, 1);
Lruncommand5.setGravity(Gravity.LEFT|Gravity.CENTER);
Lruncommand5.setTextSize( 16f );
Lruncommand5.setTextColor( Color.rgb( 0, 0, 0 ));
Lruncommand5.setText(&quot;実行コマンド&quot;);
Lruncommand5.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lruncommand5 );
pos+=btn_hei+3;

runcommand5 = new EditText(ACTIVITY);
runcommand5.setPadding(1, 1, 1, 1);
runcommand5.setGravity(Gravity.LEFT|Gravity.CENTER);
runcommand5.setTextColor( Color.rgb( 0, 0, 0 ));
runcommand5.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( runcommand5 );
pos+=btn_hei+3;

Lguidesignercommand5 = new TextView(ACTIVITY);
Lguidesignercommand5.setPadding(1, 1, 1, 1);
Lguidesignercommand5.setGravity(Gravity.LEFT|Gravity.CENTER);
Lguidesignercommand5.setTextSize( 16f );
Lguidesignercommand5.setTextColor( Color.rgb( 0, 0, 0 ));
Lguidesignercommand5.setText(&quot;GUIデザイナの起動コマンド&quot;);
Lguidesignercommand5.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lguidesignercommand5 );
pos+=btn_hei+3;

guidesignercommand5 = new EditText(ACTIVITY);
guidesignercommand5.setPadding(1, 1, 1, 1);
guidesignercommand5.setGravity(Gravity.LEFT|Gravity.CENTER);
guidesignercommand5.setTextColor( Color.rgb( 0, 0, 0 ));
guidesignercommand5.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( guidesignercommand5 );
pos+=btn_hei+3;

Limportfiles5 = new TextView(ACTIVITY);
Limportfiles5.setPadding(1, 1, 1, 1);
Limportfiles5.setGravity(Gravity.LEFT|Gravity.CENTER);
Limportfiles5.setTextSize( 16f );
Limportfiles5.setTextColor( Color.rgb( 0, 0, 0 ));
Limportfiles5.setText(&quot;変数宣言など&quot;);
Limportfiles5.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Limportfiles5 );
pos+=btn_hei+3;

importfiles5 = new EditText(ACTIVITY);
importfiles5.setPadding(1, 1, 1, 1);
importfiles5.setGravity(Gravity.LEFT|Gravity.CENTER);
importfiles5.setTextColor( Color.rgb( 0, 0, 0 ));
importfiles5.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( importfiles5 );
pos+=btn_hei+3;

Lprogramstartupcode5 = new TextView(ACTIVITY);
Lprogramstartupcode5.setPadding(1, 1, 1, 1);
Lprogramstartupcode5.setGravity(Gravity.LEFT|Gravity.CENTER);
Lprogramstartupcode5.setTextSize( 16f );
Lprogramstartupcode5.setTextColor( Color.rgb( 0, 0, 0 ));
Lprogramstartupcode5.setText(&quot;スタートアップコード&quot;);
Lprogramstartupcode5.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lprogramstartupcode5 );
pos+=btn_hei+3;

programstartupcode5 = new EditText(ACTIVITY);
programstartupcode5.setPadding(1, 1, 1, 1);
programstartupcode5.setGravity(Gravity.LEFT|Gravity.CENTER);
programstartupcode5.setTextColor( Color.rgb( 0, 0, 0 ));
programstartupcode5.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( programstartupcode5 );
pos+=btn_hei+3;

Lnativehelpcommand5 = new TextView(ACTIVITY);
Lnativehelpcommand5.setPadding(1, 1, 1, 1);
Lnativehelpcommand5.setGravity(Gravity.LEFT|Gravity.CENTER);
Lnativehelpcommand5.setTextSize( 16f );
Lnativehelpcommand5.setTextColor( Color.rgb( 0, 0, 0 ));
Lnativehelpcommand5.setText(&quot;BASICのヘルプファイルを開くコマンド&quot;);
Lnativehelpcommand5.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lnativehelpcommand5 );
pos+=btn_hei+3;

nativehelpcommand5 = new EditText(ACTIVITY);
nativehelpcommand5.setPadding(1, 1, 1, 1);
nativehelpcommand5.setGravity(Gravity.LEFT|Gravity.CENTER);
nativehelpcommand5.setTextColor( Color.rgb( 0, 0, 0 ));
nativehelpcommand5.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( nativehelpcommand5 );
pos+=btn_hei+3;

dprint(&quot;property6\n&quot;);

Lproperty6 = new TextView(ACTIVITY);
Lproperty6.setPadding(1, 1, 1, 1);
Lproperty6.setGravity(Gravity.LEFT|Gravity.CENTER);
Lproperty6.setTextSize( 16f );
Lproperty6.setTextColor( Color.rgb( 0, 0, 0 ));
Lproperty6.setText(&quot;（C言語のプロパティ）&quot;);
Lproperty6.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lproperty6 );
pos+=btn_hei+3;

Lcompilecommand6 = new TextView(ACTIVITY);
Lcompilecommand6.setPadding(1, 1, 1, 1);
Lcompilecommand6.setGravity(Gravity.LEFT|Gravity.CENTER);
Lcompilecommand6.setTextSize( 16f );
Lcompilecommand6.setTextColor( Color.rgb( 0, 0, 0 ));
Lcompilecommand6.setText(&quot;コンパイルコマンド&quot;);
Lcompilecommand6.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lcompilecommand6 );
pos+=btn_hei+3;

compilecommand6 = new EditText(ACTIVITY);
compilecommand6.setPadding(1, 1, 1, 1);
compilecommand6.setGravity(Gravity.LEFT|Gravity.CENTER);
compilecommand6.setTextColor( Color.rgb( 0, 0, 0 ));
compilecommand6.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( compilecommand6 );
pos+=btn_hei+3;

Lruncommand6 = new TextView(ACTIVITY);
Lruncommand6.setPadding(1, 1, 1, 1);
Lruncommand6.setGravity(Gravity.LEFT|Gravity.CENTER);
Lruncommand6.setTextSize( 16f );
Lruncommand6.setTextColor( Color.rgb( 0, 0, 0 ));
Lruncommand6.setText(&quot;実行コマンド&quot;);
Lruncommand6.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lruncommand6 );
pos+=btn_hei+3;

runcommand6 = new EditText(ACTIVITY);
runcommand6.setPadding(1, 1, 1, 1);
runcommand6.setGravity(Gravity.LEFT|Gravity.CENTER);
runcommand6.setTextColor( Color.rgb( 0, 0, 0 ));
runcommand6.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( runcommand6 );
pos+=btn_hei+3;

Lguidesignercommand6 = new TextView(ACTIVITY);
Lguidesignercommand6.setPadding(1, 1, 1, 1);
Lguidesignercommand6.setGravity(Gravity.LEFT|Gravity.CENTER);
Lguidesignercommand6.setTextSize( 16f );
Lguidesignercommand6.setTextColor( Color.rgb( 0, 0, 0 ));
Lguidesignercommand6.setText(&quot;GUIデザイナの起動コマンド&quot;);
Lguidesignercommand6.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lguidesignercommand6 );
pos+=btn_hei+3;

guidesignercommand6 = new EditText(ACTIVITY);
guidesignercommand6.setPadding(1, 1, 1, 1);
guidesignercommand6.setGravity(Gravity.LEFT|Gravity.CENTER);
guidesignercommand6.setTextColor( Color.rgb( 0, 0, 0 ));
guidesignercommand6.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( guidesignercommand6 );
pos+=btn_hei+3;

Limportfiles6 = new TextView(ACTIVITY);
Limportfiles6.setPadding(1, 1, 1, 1);
Limportfiles6.setGravity(Gravity.LEFT|Gravity.CENTER);
Limportfiles6.setTextSize( 16f );
Limportfiles6.setTextColor( Color.rgb( 0, 0, 0 ));
Limportfiles6.setText(&quot;インクルード宣言など&quot;);
Limportfiles6.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Limportfiles6 );
pos+=btn_hei+3;

importfiles6 = new EditText(ACTIVITY);
importfiles6.setPadding(1, 1, 1, 1);
importfiles6.setGravity(Gravity.LEFT|Gravity.CENTER);
importfiles6.setTextColor( Color.rgb( 0, 0, 0 ));
importfiles6.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( importfiles6 );
pos+=btn_hei+3;

Lprogramstartupcode6 = new TextView(ACTIVITY);
Lprogramstartupcode6.setPadding(1, 1, 1, 1);
Lprogramstartupcode6.setGravity(Gravity.LEFT|Gravity.CENTER);
Lprogramstartupcode6.setTextSize( 16f );
Lprogramstartupcode6.setTextColor( Color.rgb( 0, 0, 0 ));
Lprogramstartupcode6.setText(&quot;スタートアップコード&quot;);
Lprogramstartupcode6.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lprogramstartupcode6 );
pos+=btn_hei+3;

programstartupcode6 = new EditText(ACTIVITY);
programstartupcode6.setPadding(1, 1, 1, 1);
programstartupcode6.setGravity(Gravity.LEFT|Gravity.CENTER);
programstartupcode6.setTextColor( Color.rgb( 0, 0, 0 ));
programstartupcode6.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( programstartupcode6 );
pos+=btn_hei+3;

Lnativehelpcommand6 = new TextView(ACTIVITY);
Lnativehelpcommand6.setPadding(1, 1, 1, 1);
Lnativehelpcommand6.setGravity(Gravity.LEFT|Gravity.CENTER);
Lnativehelpcommand6.setTextSize( 16f );
Lnativehelpcommand6.setTextColor( Color.rgb( 0, 0, 0 ));
Lnativehelpcommand6.setText(&quot;C言語のヘルプファイルを開くコマンド&quot;);
Lnativehelpcommand6.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( Lnativehelpcommand6 );
pos+=btn_hei+3;

nativehelpcommand6 = new EditText(ACTIVITY);
nativehelpcommand6.setPadding(1, 1, 1, 1);
nativehelpcommand6.setGravity(Gravity.LEFT|Gravity.CENTER);
nativehelpcommand6.setTextColor( Color.rgb( 0, 0, 0 ));
nativehelpcommand6.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,btn_hei,0,pos ) );
pbase.addView( nativehelpcommand6 );
pos+=btn_hei+3;

Lmargine = new TextView(ACTIVITY);
Lmargine.setPadding(1, 1, 1, 1);
Lmargine.setGravity(Gravity.LEFT|Gravity.CENTER);
Lmargine.setTextSize( 16f );
Lmargine.setTextColor( Color.rgb( 0, 0, 0 ));
Lmargine.setText(&quot;     &quot;);
Lmargine.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,bottom_margine,0,pos ) );
pbase.addView( Lmargine );

bxview = new HorizontalScrollView(ACTIVITY);
bxview.addView(bbase);
bxview.setLayoutParams( new AbsoluteLayout.LayoutParams( screen_width,btn_hei,0,0 ) );
base.addView(bxview);

pyview = new ScrollView(ACTIVITY);
pyview.addView(pbase);
pyview.setLayoutParams( new AbsoluteLayout.LayoutParams( screen_width,screen_height-btn_hei-4,0,btn_hei+4 ) );
base.addView(pyview);
}



    private void recall(){

      tscale.setText(&quot;&quot;+scale);

      compilecommand0.setText(CompileCommand[0]);
      runcommand0.setText(RunCommand[0]);
      guidesignercommand0.setText(GUIDesignerCommand[0]);
      importfiles0.setText(ImportFiles[0]);
      programstartupcode0.setText(ProgramStartupCode[0]);
      nativehelpcommand0.setText(NativeHelpCommand[0]);

      compilecommand1.setText(CompileCommand[1]);
      runcommand1.setText(RunCommand[1]);
      guidesignercommand1.setText(GUIDesignerCommand[1]);
      importfiles1.setText(ImportFiles[1]);
      programstartupcode1.setText(ProgramStartupCode[1]);
      nativehelpcommand1.setText(NativeHelpCommand[1]);

      compilecommand2.setText(CompileCommand[2]);
      runcommand2.setText(RunCommand[2]);
      guidesignercommand2.setText(GUIDesignerCommand[2]);
      importfiles2.setText(ImportFiles[2]);
      programstartupcode2.setText(ProgramStartupCode[2]);
      nativehelpcommand2.setText(NativeHelpCommand[2]);

      compilecommand3.setText(CompileCommand[3]);
      runcommand3.setText(RunCommand[3]);
      guidesignercommand3.setText(GUIDesignerCommand[3]);
      importfiles3.setText(ImportFiles[3]);
      programstartupcode3.setText(ProgramStartupCode[3]);
      nativehelpcommand3.setText(NativeHelpCommand[3]);

      compilecommand4.setText(CompileCommand[4]);
      runcommand4.setText(RunCommand[4]);
      guidesignercommand4.setText(GUIDesignerCommand[4]);
      importfiles4.setText(ImportFiles[4]);
      programstartupcode4.setText(ProgramStartupCode[4]);
      nativehelpcommand4.setText(NativeHelpCommand[4]);

      compilecommand5.setText(CompileCommand[5]);
      runcommand5.setText(RunCommand[5]);
      guidesignercommand5.setText(GUIDesignerCommand[5]);
      importfiles5.setText(ImportFiles[5]);
      programstartupcode5.setText(ProgramStartupCode[5]);
      nativehelpcommand5.setText(NativeHelpCommand[5]);

      compilecommand6.setText(CompileCommand[6]);
      runcommand6.setText(RunCommand[6]);
      guidesignercommand6.setText(GUIDesignerCommand[6]);
      importfiles6.setText(ImportFiles[6]);
      programstartupcode6.setText(ProgramStartupCode[6]);
      nativehelpcommand6.setText(NativeHelpCommand[6]);

    }


    private void restore_property(){

        scale = parseInt( get_text(tscale) );

        CompileCommand[0] = get_text( compilecommand0);
        RunCommand[0] = get_text(runcommand0);
        GUIDesignerCommand[0] = get_text(guidesignercommand0);
        ImportFiles[0] = get_text(importfiles0);
        ProgramStartupCode[0] = get_text(programstartupcode0);
        NativeHelpCommand[0] = get_text(nativehelpcommand0);

        CompileCommand[1] = get_text(compilecommand1);
        RunCommand[1] = get_text(runcommand1);
        GUIDesignerCommand[1] = get_text(guidesignercommand1);
        ImportFiles[1] = get_text(importfiles1);
        ProgramStartupCode[1] = get_text(programstartupcode1);
        NativeHelpCommand[1] = get_text(nativehelpcommand1);

        CompileCommand[2] = get_text(compilecommand2);
        RunCommand[2] = get_text(runcommand2);
        GUIDesignerCommand[2] = get_text(guidesignercommand2);
        ImportFiles[2] = get_text(importfiles2);
        ProgramStartupCode[2] = get_text(programstartupcode2);
        NativeHelpCommand[2] = get_text(nativehelpcommand2);

        CompileCommand[3] = get_text(compilecommand3);
        RunCommand[3] = get_text(runcommand3);
        GUIDesignerCommand[3] = get_text(guidesignercommand3);
        ImportFiles[3] = get_text(importfiles3);
        ProgramStartupCode[3] = get_text(programstartupcode3);
        NativeHelpCommand[3] = get_text(nativehelpcommand3);

        CompileCommand[4] = get_text(compilecommand4);
        RunCommand[4] = get_text(runcommand4);
        GUIDesignerCommand[4] = get_text(guidesignercommand4);
        ImportFiles[4] = get_text(importfiles4);
        ProgramStartupCode[4] = get_text(programstartupcode4);
        NativeHelpCommand[4] = get_text(nativehelpcommand4);

        CompileCommand[5] = get_text(compilecommand5);
        RunCommand[5] = get_text(runcommand5);
        GUIDesignerCommand[5] = get_text(guidesignercommand5);
        ImportFiles[5] = get_text(importfiles5);
        ProgramStartupCode[5] = get_text(programstartupcode5);
        NativeHelpCommand[5] = get_text(nativehelpcommand5);

        CompileCommand[6] = get_text(compilecommand6);
        RunCommand[6] = get_text(runcommand6);
        GUIDesignerCommand[6] = get_text(guidesignercommand6);
        ImportFiles[6] = get_text(importfiles6);
        ProgramStartupCode[6] = get_text(programstartupcode6);
        NativeHelpCommand[6] = get_text(nativehelpcommand6);

        restoreProperty();
}


// 表示する
  public void show(){
    syncProperty();
    recall();
    ACTIVITY.setContentView(base);
}


// 表示を戻す
  public void hide(){
    if( sedit_is_active ){
      Object e = sedit.element;
      sedit.Logout();
      sedit.Login(e);
      sedit.resize();
    }
    else{
      Object e = oedit.element;
      oedit.Logout();
      oedit.Login(e);
      oedit.resize();
    }
  }

}
</codetext>
</codeclip>
<codeclip>
<ID>_C20</ID>
<x0>524</x0>
<y0>162</y0>
<width>214</width>
<height>50</height>
<codetext>// ファイルコンポーネント
FileGUI file_gui;
class FileGUI{
    String id=&quot;&quot;;
    int bottom_margine = 180; // 下部の余白

    AbsoluteLayout base;
    AbsoluteLayout bbase;
    ScrollView     byview;
    Button         bopen;
    Button         bsave;
    Button         bcopy;
    Button         bpaste;
    Button         bdelete;
    Button         bcancel;
    TextView       Lmargine;

// ファイルコンポーネントを作成
FileGUI(){

dprint(&quot;file gui\n&quot;);

int bwid=screen_width-16;
int bhei=62;
int p = 3;

base = new AbsoluteLayout(ACTIVITY);
base.setBackgroundColor(Color.rgb( 255, 255, 255));
bbase = new AbsoluteLayout(ACTIVITY);
bbase.setBackgroundColor(Color.rgb( 255, 255, 255));

bopen = new Button(ACTIVITY);
bopen.setPadding(1, 1, 1, 1);
bopen.setGravity(Gravity.CENTER|Gravity.CENTER);
bopen.setText(&quot;開く&quot;);
bopen.setTextColor( Color.rgb( 0, 0, 0 ));
bopen.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bopen.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     ACTIVITY.setContentView(present_view);
     handler(null,id+&quot;_open&quot;);
   }
});
bopen.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bhei,3,p ) );
bbase.addView( bopen );
p+=bhei+3;

bsave = new Button(ACTIVITY);
bsave.setPadding(1, 1, 1, 1);
bsave.setGravity(Gravity.CENTER|Gravity.CENTER);
bsave.setText(&quot;保存&quot;);
bsave.setTextColor( Color.rgb( 0, 0, 0 ));
bsave.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bsave.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     ACTIVITY.setContentView(present_view);
     handler(null,id+&quot;_save&quot;);
   }
});
bsave.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bhei,3,p ) );
bbase.addView( bsave );
p+=bhei+3;

bcopy = new Button(ACTIVITY);
bcopy.setPadding(1, 1, 1, 1);
bcopy.setGravity(Gravity.CENTER|Gravity.CENTER);
bcopy.setText(&quot;ファイルにコピー&quot;);
bcopy.setTextColor( Color.rgb( 0, 0, 0 ));
bcopy.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bcopy.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     ACTIVITY.setContentView(present_view);
     handler(null,id+&quot;_copy&quot;);
   }
});
bcopy.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bhei,3,p ) );
bbase.addView( bcopy );
p+=bhei+3;

bpaste = new Button(ACTIVITY);
bpaste.setPadding(1, 1, 1, 1);
bpaste.setGravity(Gravity.CENTER|Gravity.CENTER);
bpaste.setText(&quot;ファイルから貼り付け&quot;);
bpaste.setTextColor( Color.rgb( 0, 0, 0 ));
bpaste.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bpaste.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     ACTIVITY.setContentView(present_view);
     handler(null,id+&quot;_paste&quot;);
   }
});
bpaste.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bhei,3,p ) );
bbase.addView( bpaste );
p+=bhei+3;

bdelete = new Button(ACTIVITY);
bdelete.setPadding(1, 1, 1, 1);
bdelete.setGravity(Gravity.CENTER|Gravity.CENTER);
bdelete.setText(&quot;ファイルを削除&quot;);
bdelete.setTextColor( Color.rgb( 0, 0, 0 ));
bdelete.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bdelete.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     ACTIVITY.setContentView(present_view);
     handler(null,id+&quot;_delete&quot;);
   }
});
bdelete.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bhei,3,p ) );
bbase.addView( bdelete );
p+=bhei+3;

bcancel = new Button(ACTIVITY);
bcancel.setPadding(1, 1, 1, 1);
bcancel.setGravity(Gravity.CENTER|Gravity.CENTER);
bcancel.setText(&quot;キャンセル&quot;);
bcancel.setTextColor( Color.rgb( 0, 0, 0 ));
bcancel.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bcancel.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     ACTIVITY.setContentView(present_view);
     handler(null,id+&quot;_cancel&quot;);
   }
});
bcancel.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bhei,3,p ) );
bbase.addView( bcancel );
p+=bhei+3;

Lmargine = new TextView(ACTIVITY);
Lmargine.setPadding(1, 1, 1, 1);
Lmargine.setGravity(Gravity.LEFT|Gravity.CENTER);
Lmargine.setTextSize( 16f );
Lmargine.setTextColor( Color.rgb( 0, 0, 0 ));
Lmargine.setText(&quot;     &quot;);
Lmargine.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bottom_margine,0,p ) );
bbase.addView( Lmargine );

byview = new ScrollView(ACTIVITY);
byview.addView(bbase);
byview.setLayoutParams( new AbsoluteLayout.LayoutParams( screen_width,screen_height,0,0 ) );
base.addView(byview);

}

// 表示する
public void show( String i ){

dprint(&quot;file gui show\n&quot;);

id=i;
ACTIVITY.setContentView(base);

}

}

</codetext>
</codeclip>
<codeclip>
<ID>_C21</ID>
<x0>523</x0>
<y0>221</y0>
<width>247</width>
<height>49</height>
<codetext>// コンソールコンポーネント
ConsoleGUI console_gui;
class ConsoleGUI{
    String msg = &quot;&quot;;
    Handler xhandler;
    int bottom_margine = 80; // 下部の余白

    AbsoluteLayout base;
    AbsoluteLayout bbase;
    HorizontalScrollView bxview;
    Button         bexec;
    Button         bcls;
    Button         bclose;
    EditText       ecmd;
    EditText       edisp;

//コンソールコンポーネントを作成
ConsoleGUI(){

dprint(&quot;console gui\n&quot;);

xhandler = new Handler();

base = new AbsoluteLayout(ACTIVITY);
base.setBackgroundColor(Color.rgb( 255, 255, 255));
bbase = new AbsoluteLayout(ACTIVITY);
bbase.setBackgroundColor(Color.rgb( 255, 255, 255));

ecmd = new EditText(ACTIVITY);
ecmd.setText(&quot;&quot;);
ecmd.setTextColor( Color.rgb( 0, 0, 0 ));
ecmd.setBackgroundColor( Color.rgb( 255, 255, 255 ));
ecmd.setPadding(1, 1, 1, 1);
ecmd.setGravity(Gravity.LEFT|Gravity.CENTER);
ecmd.setLayoutParams( new AbsoluteLayout.LayoutParams( 360,60,0,0 ) );
bbase.addView( ecmd );

bexec = new Button(ACTIVITY);
bexec.setPadding(1, 1, 1, 1);
bexec.setGravity(Gravity.CENTER|Gravity.CENTER);
bexec.setTextColor( Color.rgb( 0, 0, 0 ));
bexec.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bexec.setText(&quot;実行&quot;);
bexec.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     execcommand( &quot;コマンドを実行します\n&quot;, &quot;ERROR!!\n&quot;, get_text(ecmd) );
   }
});
bexec.setLayoutParams( new AbsoluteLayout.LayoutParams( 120,60,372,0 ) );
bbase.addView( bexec );

bcls = new Button(ACTIVITY);
bcls.setPadding(1, 1, 1, 1);
bcls.setGravity(Gravity.CENTER|Gravity.CENTER);
bcls.setTextColor( Color.rgb( 0, 0, 0 ));
bcls.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bcls.setText(&quot;消去&quot;);
bcls.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     cls();
   }
});
bcls.setLayoutParams( new AbsoluteLayout.LayoutParams( 120,60,498,0 ) );
bbase.addView( bcls );

bclose = new Button(ACTIVITY);
bclose.setPadding(1, 1, 1, 1);
bclose.setGravity(Gravity.CENTER|Gravity.CENTER);
bclose.setTextColor( Color.rgb( 0, 0, 0 ));
bclose.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bclose.setText(&quot;閉じる&quot;);
bclose.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     ACTIVITY.setContentView(present_view);
   }
});
bclose.setLayoutParams( new AbsoluteLayout.LayoutParams( 120,60,624,0 ) );
bbase.addView( bclose );

bxview = new HorizontalScrollView(ACTIVITY);
bxview.addView(bbase);
bxview.setLayoutParams( new AbsoluteLayout.LayoutParams( screen_width,60,0,0 ) );
base.addView(bxview);

edisp = new EditText(ACTIVITY);
edisp.setText(&quot;&quot;);
edisp.setTextColor( Color.rgb( 0, 0, 0 ));
edisp.setBackgroundColor( Color.rgb( 255, 255, 255 ));
edisp.setPadding(1, 1, 1, 1);
edisp.setGravity(Gravity.LEFT|Gravity.TOP);
edisp.setLayoutParams( new AbsoluteLayout.LayoutParams( screen_width,screen_height-64-bottom_margine,0,64 ) );
base.addView( edisp );

}


// 消去する
public void cls(){
  msg = &quot;&quot;;
  xhandler.post(new Runnable() {
  @Override
    public void run() {
      edisp.setText(msg);
    }
  });
}

// 文字列を表示する
public void print( String s ){
  msg = msg + s;
  xhandler.post(new Runnable() {
  @Override
    public void run() {
      edisp.setText(msg);
      edisp.setSelection(edisp.getText().length());
//    try{ Thread.sleep(10); } catch(Exception e){}
    }
  });
}


// 表示する
public void show(){
ACTIVITY.setContentView(base);

}

}
</codetext>
</codeclip>
<codeclip>
<ID>_C32</ID>
<x0>519</x0>
<y0>56</y0>
<width>206</width>
<height>45</height>
<codetext>// 状態図エディタコンポーネント
StateEditGUI sedit_gui;
class StateEditGUI{

AbsoluteLayout base;
AbsoluteLayout bbase;
AbsoluteLayout sbase;
ScrollView syview;
HorizontalScrollView bxview;
HorizontalScrollView sxview;
AbsoluteLayout spanel;

EditText sname;
ImageButton sbup;
ImageButton sbnew;
ImageButton sbfile;
ImageButton sbcompile;
ImageButton sbrun;
ImageButton sbstate;
ImageButton sbtrans;
ImageButton sbsignal;
ImageButton sbpin;
ImageButton sbcodeclip;
ImageButton sbguidsin;
ImageButton sbdelete;
ImageButton sbcopy;
ImageButton sbpaste;
ImageButton sbsetting;
ImageButton sbcamera;

// 状態図エディタコンポーネントを作成
StateEditGUI(){

dprint(&quot;state edit gui\n&quot;);

int name_wid=300;
int btn_wid=80;
int btn_hei=80;
int pos=0;

base = new AbsoluteLayout(ACTIVITY);
base.setBackgroundColor(Color.rgb( 255, 255, 255));
bbase = new AbsoluteLayout(ACTIVITY);
bbase.setBackgroundColor(Color.rgb( 255, 255, 255));
sbase =new AbsoluteLayout(ACTIVITY);
sbase.setBackgroundColor(Color.rgb( 255, 255, 255));

sname = new EditText(ACTIVITY);
sname.setPadding(1, 1, 1, 1);
sname.setTextSize( 24f );
sname.setTextColor( Color.rgb( 0, 0, 0 ));
sname.setBackgroundColor( Color.rgb( 230, 230, 230 ));
sname.setText( &quot;&quot; );
sname.setLayoutParams( new AbsoluteLayout.LayoutParams( name_wid,btn_hei,0,0 ) );
bbase.addView( sname );
pos = name_wid;

sbup = new ImageButton(ACTIVITY);
sbup.setPadding(1, 1, 1, 1);
sbup.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//sbup.setGravity(Gravity.CENTER|Gravity.CENTER);
sbup.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.upobj ));
sbup.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;sbup&quot;);}
});
sbup.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( sbup );
pos+=btn_wid;

sbnew = new ImageButton(ACTIVITY);
sbnew.setPadding(1, 1, 1, 1);
sbnew.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//sbnew.setGravity(Gravity.CENTER|Gravity.CENTER);
sbnew.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.clrall ));
sbnew.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;sbnew&quot;);}
});
sbnew.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( sbnew );
pos+=btn_wid;

sbfile = new ImageButton(ACTIVITY);
sbfile.setPadding(1, 1, 1, 1);
sbfile.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//sbfile.setGravity(Gravity.CENTER|Gravity.CENTER);
sbfile.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.filewin ));
sbfile.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;sbfile&quot;);}
});
sbfile.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( sbfile );
pos+=btn_wid;

sbcompile = new ImageButton(ACTIVITY);
sbcompile.setPadding(1, 1, 1, 1);
sbcompile.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//sbcompile.setGravity(Gravity.CENTER|Gravity.CENTER);
sbcompile.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.compile ));
sbcompile.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;sbcompile&quot;);}
});
sbcompile.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( sbcompile );
pos+=btn_wid;

sbrun = new ImageButton(ACTIVITY);
sbrun.setPadding(1, 1, 1, 1);
sbrun.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//sbrun.setGravity(Gravity.CENTER|Gravity.CENTER);
sbrun.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.run ));
sbrun.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;sbrun&quot;);}
});
sbrun.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( sbrun );
pos+=btn_wid;

sbstate = new ImageButton(ACTIVITY);
sbstate.setPadding(1, 1, 1, 1);
sbstate.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//sbstate.setGravity(Gravity.CENTER|Gravity.CENTER);
sbstate.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.paste ));
sbstate.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;sbstate&quot;);}
});
sbstate.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( sbstate );
pos+=btn_wid;

sbtrans = new ImageButton(ACTIVITY);
sbtrans.setPadding(1, 1, 1, 1);
sbtrans.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//sbtrans.setGravity(Gravity.CENTER|Gravity.CENTER);
sbtrans.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.trans ));
sbtrans.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;sbtrans&quot;);}
});
sbtrans.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( sbtrans );
pos+=btn_wid;

sbsignal = new ImageButton(ACTIVITY);
sbsignal.setPadding(1, 1, 1, 1);
sbsignal.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//sbsignal.setGravity(Gravity.CENTER|Gravity.CENTER);
sbsignal.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.signal ));
sbsignal.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;sbsignal&quot;);}
});
sbsignal.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( sbsignal );
pos+=btn_wid;

sbpin = new ImageButton(ACTIVITY);
sbpin.setPadding(1, 1, 1, 1);
sbpin.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//sbpin.setGravity(Gravity.CENTER|Gravity.CENTER);
sbpin.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.pin ));
sbpin.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;sbpin&quot;);}
});
sbpin.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( sbpin );
pos+=btn_wid;

sbcodeclip = new ImageButton(ACTIVITY);
sbcodeclip.setPadding(1, 1, 1, 1);
sbcodeclip.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//sbcodeclip.setGravity(Gravity.CENTER|Gravity.CENTER);
sbcodeclip.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.codeclip ));
sbcodeclip.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;sbcodeclip&quot;);}
});
sbcodeclip.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( sbcodeclip );
pos+=btn_wid;

sbguidsin = new ImageButton(ACTIVITY);
sbguidsin.setPadding(1, 1, 1, 1);
sbguidsin.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//sbguidsin.setGravity(Gravity.CENTER|Gravity.CENTER);
sbguidsin.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.guidsin ));
sbguidsin.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;sbguidsin&quot;);}
});
sbguidsin.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( sbguidsin );
pos+=btn_wid;

sbdelete = new ImageButton(ACTIVITY);
sbdelete.setPadding(1, 1, 1, 1);
sbdelete.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//sbdelete.setGravity(Gravity.CENTER|Gravity.CENTER);
sbdelete.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.delete ));
sbdelete.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;sbdelete&quot;);}
});
sbdelete.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( sbdelete );
pos+=btn_wid;

sbcopy = new ImageButton(ACTIVITY);
sbcopy.setPadding(1, 1, 1, 1);
sbcopy.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//sbcopy.setGravity(Gravity.CENTER|Gravity.CENTER);
sbcopy.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.copy ));
sbcopy.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;sbcopy&quot;);}
});
sbcopy.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( sbcopy );
pos+=btn_wid;

sbpaste = new ImageButton(ACTIVITY);
sbpaste.setPadding(1, 1, 1, 1);
sbpaste.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//sbpaste.setGravity(Gravity.CENTER|Gravity.CENTER);
sbpaste.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.paste ));
sbpaste.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;sbpaste&quot;);}
});
sbpaste.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( sbpaste );
pos+=btn_wid;

sbsetting = new ImageButton(ACTIVITY);
sbsetting.setPadding(1, 1, 1, 1);
sbsetting.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//sbsetting.setGravity(Gravity.CENTER|Gravity.CENTER);
sbsetting.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.setting ));
sbsetting.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;sbsetting&quot;);}
});
sbsetting.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( sbsetting );
pos+=btn_wid;

sbcamera = new ImageButton(ACTIVITY);
sbcamera.setPadding(1, 1, 1, 1);
sbcamera.setBackgroundColor( Color.rgb( 200, 200, 200 ));
//sbcamera.setGravity(Gravity.CENTER|Gravity.CENTER);
sbcamera.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.camera ));
sbcamera.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ handler(v,&quot;sbcamera&quot;);}
});
sbcamera.setLayoutParams( new AbsoluteLayout.LayoutParams( btn_wid,btn_hei,pos,0 ) );
bbase.addView( sbcamera );
pos+=btn_wid;

bxview = new HorizontalScrollView(ACTIVITY);
bxview.addView(bbase);

spanel = new AbsoluteLayout(ACTIVITY);
spanel.setBackgroundColor(Color.rgb( 255, 255, 255));
spanel.setOnTouchListener( new View.OnTouchListener(){
  @Override    
  public boolean onTouch(View v, MotionEvent event) {
    if (event.getAction() == MotionEvent.ACTION_UP) {
      touch_x = (int) event.getRawX();    
      touch_y = (int) event.getRawY();
      handler(spanel,&quot;spanel&quot;);
    }
    return true;
  }
});
spanel.setLayoutParams( new AbsoluteLayout.LayoutParams( 3200,2400,0,0 ) );
sbase.addView( spanel );

syview = new ScrollView(ACTIVITY);
syview.addView(sbase);
sxview = new HorizontalScrollView(ACTIVITY);
sxview.addView(syview);

bxview.setLayoutParams( new AbsoluteLayout.LayoutParams( screen_width,btn_hei,0,0 ) );
sxview.setLayoutParams( new AbsoluteLayout.LayoutParams( screen_width,screen_height-btn_hei,0,btn_hei ) );
base.addView(bxview);
base.addView(sxview);

}


public void set_objectname( String s ){
  sname.setText(s);
}
 
public String get_objectname(){
  return get_text(sname);
}
 
 
// コンポーネントの数を返す
public int get_component_count(){
  return spanel.getChildCount();
}

// コンポーネントを返す
public View get_component( int ix ){
  return spanel.getChildAt(ix);
}

// コンポーネントを追加する
public void add(View v){

dprint(&quot;sedit_gui_add &quot;+ v+&quot;\n&quot; );
dprint(&quot;spanel=&quot;+spanel+&quot;\n&quot;);

  spanel.addView(v);
}

// コンポーネントを背面に追加する
public void addBack(View v){
  spanel.addView(v,0);
}

// コンポーネントを削除する
public void remove(View v){
  spanel.removeView(v);
}

// コンポーネントを全て消去する
public void clear(){
  spanel.removeAllViews();
}

// 再描画する
public void invalidate(){
  sxview.invalidate();
}

// 表示する
public void show( String title){
ACTIVITY.setContentView(present_view=base);
ACTIVITY.setTitle(title);
sedit_is_active = true;
}

// イメージをファイルに出力する
public void print_image(){


try{

Thread.sleep(100); 

// ファイル名表示部にフォーカスを移動(カーソルが画像に表示されないようにする)
sname.requestFocus();

//保存用Bitmap準備
Bitmap image = Bitmap.createBitmap(max_width+4, max_height+4, Bitmap.Config.ARGB_8888);

//新しいcanvasに保存用Bitmapをセット
Canvas canvas = new Canvas(image);

//canvasに対して描画
spanel.draw(canvas);                      // canvas に view を描画する

//出力ファイルを準備
FileOutputStream fos = new FileOutputStream(new File(CurrentDir,&quot;ScreenShot.jpg&quot;));

//JPG形式で出力
image.compress(CompressFormat.JPEG, 100, fos);
fos.close();

image_gui.show( image );

}catch (Throwable e) {}

}

}
</codetext>
</codeclip>
<codeclip>
<ID>_C44</ID>
<x0>524</x0>
<y0>273</y0>
<width>247</width>
<height>49</height>
<codetext>// 編集コンポーネント
EditorGUI editor_gui;
class EditorGUI{
    String  id;
    String  text;
    int bottom_margine = 80; // 下部の余白

    AbsoluteLayout base;
    Button         bclose;
    EditText       edisp;

//編集コンポーネントを作成
EditorGUI(){

dprint(&quot;edit gui\n&quot;);

int bwid=screen_width-16;
int bhei=62;
int mergine = 3;

base = new AbsoluteLayout(ACTIVITY);
base.setBackgroundColor(Color.rgb( 255, 255, 255));

bclose = new Button(ACTIVITY);
bclose.setPadding(1, 1, 1, 1);
bclose.setGravity(Gravity.CENTER|Gravity.CENTER);
bclose.setTextColor( Color.rgb( 0, 0, 0 ));
bclose.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bclose.setText(&quot;閉じる&quot;);
bclose.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     ACTIVITY.setContentView(present_view);
     text = get_text(edisp);
     handler(null, id);
   }
});
bclose.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bhei,0,0 ) );
base.addView( bclose );

edisp = new EditText(ACTIVITY);
edisp.setPadding(1, 1, 1, 1);
edisp.setGravity(Gravity.LEFT|Gravity.TOP);
edisp.setTextColor( Color.rgb( 0, 0, 0 ));
edisp.setBackgroundColor( Color.rgb( 255, 255, 255 ));
edisp.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,screen_height-bhei-mergine-bottom_margine,0,bhei+mergine ) );
base.addView( edisp );

}

// テキストをセットして表示する
public void show( String i, String txt){
id = i;
ACTIVITY.setContentView(base);
edisp.setText(txt);
edisp.setSelection(0);
edisp.requestFocus();
}


}
</codetext>
</codeclip>
<codeclip>
<ID>_C45</ID>
<x0>524</x0>
<y0>324</y0>
<width>246</width>
<height>49</height>
<codetext>// 初期化コンポーネント
InitGUI init_gui;
class InitGUI{
    String id=&quot;&quot;;
    int bottom_margine = 180; // 下部の余白

    AbsoluteLayout base;
    AbsoluteLayout bbase;
    ScrollView     byview;
    Button         bjava;
    Button         bapplet;
    Button         bcppwindow;
    Button         bcppconsole;
    Button         bandroid;
    Button         bbasic;
    Button         bclang;
    Button         bcancel;
    TextView       Lmargine;

// ファイルコンポーネントを作成
InitGUI(){

dprint(&quot;init gui\n&quot;);

int bwid=screen_width-64;
int bhei=48;
int p = 1;

base = new AbsoluteLayout(ACTIVITY);
base.setBackgroundColor(Color.rgb( 255, 255, 255));
bbase = new AbsoluteLayout(ACTIVITY);
bbase.setBackgroundColor(Color.rgb( 255, 255, 255));

bjava = new Button(ACTIVITY);
bjava.setPadding(1, 1, 1, 1);
bjava.setGravity(Gravity.CENTER|Gravity.CENTER);
bjava.setTextColor( Color.rgb( 0, 0, 0 ));
bjava.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bjava.setText(&quot;Javaアプリケーションを作成する&quot;);
bjava.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     ACTIVITY.setContentView(present_view);
     handler(null,id+&quot;_init_java&quot;);
   }
});
bjava.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bhei,3,p ) );
bbase.addView( bjava );
p+=bhei+3;

bapplet = new Button(ACTIVITY);
bapplet.setPadding(1, 1, 1, 1);
bapplet.setGravity(Gravity.CENTER|Gravity.CENTER);
bapplet.setTextColor( Color.rgb( 0, 0, 0 ));
bapplet.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bapplet.setText(&quot;appletアプリケーションを作成する&quot;);
bapplet.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     ACTIVITY.setContentView(present_view);
     handler(null,id+&quot;_init_applet&quot;);
   }
});
bapplet.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bhei,3,p ) );
bbase.addView( bapplet );
p+=bhei+3;

bcppwindow = new Button(ACTIVITY);
bcppwindow.setPadding(1, 1, 1, 1);
bcppwindow.setGravity(Gravity.CENTER|Gravity.CENTER);
bcppwindow.setTextColor( Color.rgb( 0, 0, 0 ));
bcppwindow.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bcppwindow.setText(&quot;C++ウィンドウアプリケーションを作成する&quot;);
bcppwindow.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     ACTIVITY.setContentView(present_view);
     handler(null,id+&quot;_init_cpp_window&quot;);
   }
});
bcppwindow.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bhei,3,p ) );
bbase.addView( bcppwindow );
p+=bhei+3;

bcppconsole = new Button(ACTIVITY);
bcppconsole.setPadding(1, 1, 1, 1);
bcppconsole.setGravity(Gravity.CENTER|Gravity.CENTER);
bcppconsole.setTextColor( Color.rgb( 0, 0, 0 ));
bcppconsole.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bcppconsole.setText(&quot;C++コンソールアプリケーションを作成する&quot;);
bcppconsole.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     ACTIVITY.setContentView(present_view);
     handler(null,id+&quot;_init_cpp_console&quot;);
   }
});
bcppconsole.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bhei,3,p ) );
bbase.addView( bcppconsole );
p+=bhei+3;

bandroid = new Button(ACTIVITY);
bandroid.setPadding(1, 1, 1, 1);
bandroid.setGravity(Gravity.CENTER|Gravity.CENTER);
bandroid.setTextColor( Color.rgb( 0, 0, 0 ));
bandroid.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bandroid.setText(&quot;androidアプリケーションを作成する&quot;);
bandroid.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     ACTIVITY.setContentView(present_view);
     handler(null,id+&quot;_init_android&quot;);
   }
});
bandroid.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bhei,3,p ) );
bbase.addView( bandroid );
p+=bhei+3;

bbasic = new Button(ACTIVITY);
bbasic.setPadding(1, 1, 1, 1);
bbasic.setGravity(Gravity.CENTER|Gravity.CENTER);
bbasic.setTextColor( Color.rgb( 0, 0, 0 ));
bbasic.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bbasic.setText(&quot;basicアプリケーションを作成する&quot;);
bbasic.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     ACTIVITY.setContentView(present_view);
     handler(null,id+&quot;_init_basic&quot;);
   }
});
bbasic.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bhei,3,p ) );
bbase.addView( bbasic );
p+=bhei+3;

bclang = new Button(ACTIVITY);
bclang.setPadding(1, 1, 1, 1);
bclang.setGravity(Gravity.CENTER|Gravity.CENTER);
bclang.setTextColor( Color.rgb( 0, 0, 0 ));
bclang.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bclang.setText(&quot;C言語アプリケーションを作成する&quot;);
bclang.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     ACTIVITY.setContentView(present_view);
     handler(null,id+&quot;_init_c&quot;);
   }
});
bclang.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bhei,3,p ) );
bbase.addView( bclang );
p+=bhei+3;

bcancel = new Button(ACTIVITY);
bcancel.setPadding(1, 1, 1, 1);
bcancel.setGravity(Gravity.CENTER|Gravity.CENTER);
bcancel.setTextColor( Color.rgb( 0, 0, 0 ));
bcancel.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bcancel.setText(&quot;キャンセル&quot;);
bcancel.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     ACTIVITY.setContentView(present_view);
     handler(null,id+&quot;_cancel&quot;);
   }
});
bcancel.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bhei,3,p ) );
bbase.addView( bcancel );
p+=bhei+3;

Lmargine = new TextView(ACTIVITY);
Lmargine.setPadding(1, 1, 1, 1);
Lmargine.setGravity(Gravity.LEFT|Gravity.CENTER);
Lmargine.setTextSize( 16f );
Lmargine.setTextColor( Color.rgb( 0, 0, 0 ));
Lmargine.setText(&quot;     &quot;);
Lmargine.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bottom_margine,0,p ) );
bbase.addView( Lmargine );

byview = new ScrollView(ACTIVITY);
byview.addView(bbase);
byview.setLayoutParams( new AbsoluteLayout.LayoutParams( screen_width,screen_height,0,0 ) );
base.addView(byview);

}

// 表示する
public void show(String i){
id=i;
ACTIVITY.setContentView(base);
}

}

</codetext>
</codeclip>
<codeclip>
<ID>_C46</ID>
<x0>526</x0>
<y0>377</y0>
<width>246</width>
<height>49</height>
<codetext>// 2ボタンダイアログ
Dialog2 dialog2;
class Dialog2{
    String         id=&quot;&quot;;

    AbsoluteLayout base;
    TextView       tmessage;
    Button         byes;
    Button         bno;

// ファイルコンポーネントを作成
Dialog2(){

dprint(&quot;dialog2\n&quot;);

int bwid = screen_width-32;
int bhei = 62;
int p = 3;

base = new AbsoluteLayout(ACTIVITY);
base.setBackgroundColor(Color.rgb( 255, 255, 255));

tmessage = new TextView(ACTIVITY);
tmessage.setPadding(1, 1, 1, 1);
tmessage.setGravity(Gravity.CENTER|Gravity.CENTER);
tmessage.setTextColor( Color.rgb( 0, 0, 0 ));
tmessage.setBackgroundColor( Color.rgb( 255, 255, 255 ));
tmessage.setText(&quot;&quot;);
tmessage.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bhei,3,p ) );
base.addView( tmessage );
p+=bhei+3;

byes = new Button(ACTIVITY);
byes.setPadding(1, 1, 1, 1);
byes.setGravity(Gravity.CENTER|Gravity.CENTER);
byes.setTextColor( Color.rgb( 0, 0, 0 ));
byes.setBackgroundColor( Color.rgb( 200, 200, 200 ));
byes.setText(&quot;&quot;);
byes.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     ACTIVITY.setContentView(present_view);
     handler(null,id+&quot;_yes&quot;);
   }
});
byes.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bhei,3,p ) );
base.addView( byes );
p+=bhei+3;

bno = new Button(ACTIVITY);
bno.setPadding(1, 1, 1, 1);
bno.setGravity(Gravity.CENTER|Gravity.CENTER);
bno.setTextColor( Color.rgb( 0, 0, 0 ));
bno.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bno.setText(&quot;&quot;);
bno.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     ACTIVITY.setContentView(present_view);
     handler(null,id+&quot;_no&quot;);
   }
});
bno.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bhei,3,p ) );
base.addView( bno );
p+=bhei+3;

}

// 表示する
public void show(  String i, String m, String y, String n ){
id=i;
tmessage.setText(m);
byes.setText(y);
bno.setText(n);
ACTIVITY.setContentView(base);
}

}

</codetext>
</codeclip>
<codeclip>
<ID>_C49</ID>
<x0>22</x0>
<y0>64</y0>
<width>123</width>
<height>48</height>
<codetext>// XML パーサ
Nxml xml;
class Nxml
{
  NxmlElement root;

  // コンストラクタ(ルート要素を生成)
  Nxml(){
    root = new NxmlElement( null, &quot;ROOT&quot; );
    new NxmlAttribute( root, &quot;ID&quot;, &quot;ROOT&quot; );
  }

  // ルート要素を返す
  public Object   root_element(){
                    return( root );
                  }

  //親要素を返す
  public Object   parent_element( Object elem ){
                    if( elem instanceof NxmlElement ) return( ( (NxmlElement)elem ).parent );
                    return( null );
                  }

  // 新しい要素を作って返す
  public Object   new_element( Object parent, Object obj, String ID ){
                    NxmlElement e;
                    if( obj == null ) return( null );
                    if( parent instanceof NxmlElement ){
                      if( child( parent, ID ) != null ) return( null );
                      if( obj instanceof NxmlElement ) e = new NxmlElement( (NxmlElement)parent, (NxmlElement)obj );
                      else if( obj instanceof String ) e = new NxmlElement( (NxmlElement)parent, (String)obj );
                      else if( ( obj instanceof File ) &amp;&amp; ( (File)obj ).isFile() ){
                        e = new NxmlElement( (NxmlElement)parent, (File)obj );
                      }
                      else return( null );
                      if( get_attribute( e, &quot;ID&quot; ) == null ) new NxmlAttribute( e, &quot;ID&quot;, ID );
                      else XsetAttributeValue( e, &quot;ID&quot;, ID );
                      return( e );
                    }
                    return( null );
                  }

  // 子要素のリストを返す
  public Vector   child_list( Object parent ){
                    if( parent instanceof NxmlElement ){
                      Vector v = new Vector();
                      for( int i = 0; i &lt; ( (NxmlElement)parent ).child.size(); i++ ){
                        Object n = ( (NxmlElement)parent ).child.get(i);
                        if( n instanceof NxmlElement ) v.add( n );
                      }
                      return( v );
                    }
                    return( null );
                  }

  // 特定の名前を持つ子要素のリストを返す
  public Vector   child_list( Object parent, String name ){
                    if( parent instanceof NxmlElement ){
                      Vector v = new Vector();
                      for( int i = 0; i &lt; ( (NxmlElement)parent ).child.size(); i++ ){
                        Object n = ( (NxmlElement)parent ).child.get(i);
                        if( ( n instanceof NxmlElement ) &amp;&amp; element_name( n ).equals( name ) ) v.add( n );
                      }
                      return( v );
                    }
                    return( null );
                  }

  // 特定のIDを持つ子要素を返す
  public Object   child( Object parent, String ID ){
                    if( parent instanceof NxmlElement ){
                      for( int i = 0; i &lt; ( (NxmlElement)parent ).child.size(); i++ ){
                        Object n = ( (NxmlElement)parent ).child.get(i);
                        if( ( n instanceof NxmlElement ) &amp;&amp; elementID( n ).equals( ID ) ) return( n );
                      }
                    }
                    return( null );
                  }

  // 要素の名前を返す
  public String   element_name( Object elem ){
                    if( elem instanceof NxmlElement ) return( ( (NxmlElement)elem ).name );
                    return( null );
                  }

  // 要素のＩＤを返す
  public String   elementID( Object elem ){
                    if( elem instanceof NxmlElement ) return( get_attribute( elem, &quot;ID&quot; ) );
                    else return( null );
                  }

  // 要素をXML形式でファイルに保存する
  public boolean  save_element( Object elem, File file ){
//IGUI.IXGUI.IPath.append( &quot;\nsave: &quot;+ elem + &quot;\n&quot; );

                    if( elem instanceof NxmlElement ){

//IGUI.IXGUI.IPath.append( &quot;\nstart\n&quot; );
                      ( (NxmlElement)elem ).save( file );
                      return( true );
                    }
                    return( false );
                  }

  // 要素を削除する
  public boolean  del_element( Object elem ){
                    if( ( elem instanceof NxmlElement) &amp;&amp; !elem.equals(root) ){
                      ( (NxmlElement)elem ).suicide();
                      return( true );
                    }
                    return( false );
                  }

  // 属性の名前のリストを返す
  public Vector   attribute_name_list( Object elem ){
                    if( elem instanceof NxmlElement ){
                      Vector v = new Vector();
                      Vector c = ( (NxmlElement)elem ).child;
                      for( int i = 0; i &lt; c.size(); i++ ){
                        if( c.get(i) instanceof NxmlAttribute ) v.add( ( (NxmlAttribute)( c.get(i) ) ).name );
                      }
                      return ( v );
                    }
                    return( null );
                  }

  // 属性の値を返す
  public String   get_attribute( Object elem, String name ){
                    if( elem instanceof NxmlElement ){
                      Vector c = ( (NxmlElement)elem ).child;
                      for( int i = 0; i &lt; c.size(); i++ ){
                        if( ( c.get(i) instanceof NxmlAttribute ) &amp;&amp; ( (NxmlAttribute)( c.get(i) ) ).name.equals( name ) ){
                          return( ( (NxmlAttribute)( c.get(i) ) ).value );
                        }
                      }
                      return ( null );
                    }
                    return( null );
                  }


  // 属性の値をセットする
  public boolean  set_attribute( Object elem, String name, String value ){
                    if( name.equals(&quot;ID&quot;) || !( elem instanceof NxmlElement ) ) return( false );
                    if( get_attribute( elem, name ) == null ) {
                      new NxmlAttribute( (NxmlElement)elem, name, value );
                      return( true );
                    }
                    else return( XsetAttributeValue( (NxmlElement)elem, name, value ) );
                  }


  // 属性を削除する
  public boolean  del_attribute( Object elem, String name ){
                    if( ( elem instanceof NxmlElement )  &amp;&amp; !name.equals(&quot;ID&quot;) ){
                      Vector c = ( (NxmlElement)elem ).child;
                      for( int i = 0; i &lt; c.size(); i++ ){
                        if( ( c.get(i) instanceof NxmlAttribute ) &amp;&amp; ( (NxmlAttribute)( c.get(i) ) ).name.equals( name ) ){
                          ( (NxmlAttribute)( c.get(i) ) ).suicide();
                          return( true );
                        }
                      }
                      return ( false );
                    }
                    return( false );
                  }



  // 属性の値をセットする(外部での使用不可)
  private boolean XsetAttributeValue( NxmlElement element, String name, String val ){
                    if( element instanceof NxmlElement ){
                      Vector c = ( (NxmlElement)element ).child;
                      for( int i = 0; i &lt; c.size(); i++ ){
                        if( ( c.get(i) instanceof NxmlAttribute ) &amp;&amp; ( (NxmlAttribute)( c.get(i) ) ).name.equals( name ) ){
                          ( (NxmlAttribute)( c.get(i) ) ).value = val;
                          return( true );
                        }
                      }
                      return ( false );
                    }
                    return( false );
                  }


  // NxmlDocumentのデータの基本単位クラス
  class NxmlNode{
    NxmlElement parent;                   // 親ノード
    String name;                                // 名前
    String value;                               // 値
    public void save( BufferedWriter dout ){}    // ストリームにXML文書を出力

//public void save( ){}    // ストリームにXML文書を出力

    public void suicide(){}                      // データを消去してメモリを開放する
  }//~NxmlNode

  // NxmlNodeの実装クラス
  class NxmlElement extends NxmlNode{
    Vector      child;

    //コンストラクタ ( 既存の要素をコピー )
    NxmlElement( NxmlElement pnt,  NxmlElement e ){
      parent = pnt;
      child = new Vector();
      name = e.name;
      value = null;
      for( int i = 0; i &lt; e.child.size(); i++ ){
        Object o = e.child.get(i);
        if( o instanceof NxmlAttribute ) new NxmlAttribute( this, ((NxmlAttribute)o).name, ((NxmlAttribute)o).value );
        else if( o instanceof NxmlElement ) new NxmlElement( this, (NxmlElement)o );
      }
      if( parent != null) parent.child.add( this );
    }

    //コンストラクタ ( 名前から新しく作る )
    NxmlElement( NxmlElement pnt,  String nam ){
      parent = pnt;
      child = new Vector();
      name = nam;
      value = null;
      if( parent != null) parent.child.add( this );
    }

    //コンストラクタ ( ファイルからXML文書を読み込んでデータを構成する )
    NxmlElement( NxmlElement pnt,  File fil ){
      char c;
      parent = pnt;

//IGUI.IXGUI.IPath.append(&quot;\nxml element on file\n&quot;);

      child = new Vector();
      try{
      BufferedReader din = new BufferedReader( new FileReader( fil ) );
      if( din.markSupported() ){
        din.readLine();
        din.readLine();
        while( ( ( c = getchar( din ) ) != &apos;\0&apos; ) &amp;&amp; ( c != &apos;&lt;&apos; ) ) { }
        if(  c != &apos;\0&apos; ) Parse( din );
      }
      if( parent != null) parent.child.add( this );
      din.close();
      } catch( IOException ie ){

dprint(&quot;i/o exception new xml element on file\n&quot;+ie+&quot;\n&quot;);

      }

//IGUI.IXGUI.IPath.append(&quot;\nxml element on file end\n&quot;);

    }

    //コンストラクタ ( 入力ストリームからXML文書を読み込んでデータを構成する )
    NxmlElement( NxmlElement pnt, BufferedReader din ){

//IGUI.IXGUI.IPath.append(&quot;\nxml element on stream\n&quot;);

      parent = pnt;
      child = new Vector();
      Parse( din );
      if( parent != null) parent.child.add( this );

//IGUI.IXGUI.IPath.append(&quot;\nxml element on stream end\n&quot;);

    }

    //ファイルにXML文書を出力
    public void save( File fil ){
      try{
      BufferedWriter dout = new BufferedWriter( new FileWriter( fil ) );
      dout.write(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot; ?&gt;\n&quot;);

//IGUI.IXGUI.IPath.append(&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;Shift_JIS\&quot; ?&gt;\n&quot;);

      dout.write(&quot;&lt;!-- Nanchatte XML version 1.0 for ObjectEditor --&gt;\n&quot; );

//IGUI.IXGUI.IPath.append(&quot;&lt;!-- Nanchatte XML version 1.0 for ObjectEditor --&gt;\n&quot; );

      save( dout );

//save();

      dout.close();
      } catch( IOException ie ){ return; }
    }

    //ストリームにXML文書を出力
    public void save( BufferedWriter dout ){

//public void save(){

      int i;
      char c;

      try{
      dout.write( &quot;&lt;&quot; + name + &quot;&gt;\n&quot; );

//IGUI.IXGUI.IPath.append( &quot;&lt;&quot; + name + &quot;&gt;\n&quot; );

      for( i = 0; i &lt; child.size(); i++ ){

        ( (NxmlNode)child.get(i) ).save( dout );

//( (NxmlNode)child.get(i) ).save( );

      }
      dout.write( &quot;&lt;/&quot; + name + &quot;&gt;\n&quot; );

//IGUI.IXGUI.IPath.append( &quot;&lt;/&quot; + name + &quot;&gt;\n&quot; );

      } catch( IOException ie ){ return; }
    }

    // データを消去してメモリを開放する
    public void suicide(){
      name = null;
      for( int i = 0; i &lt; child.size(); i++ ){
        ((NxmlNode)child .get(i)).suicide();
      }
      child.clear();
      child = null;
      if( parent != null ) parent.child.remove( this );
      parent = null;
    }

    //子を持っていなければ要素を縮退させて属性にする
    public NxmlNode validate(){
      if( child.size() == 0 ) return( new NxmlAttribute( this ) );
      else{
        value = null;
        return( this );
      }
    }

    // ストリームからXML文書を読み込む
    private void Parse( BufferedReader din ){
      char c;
      String s;

//IGUI.IXGUI.IPath.append(&quot;Parse:&quot;);

      try{
      if( ( ( c = getchar( din ) ) == &apos;\0&apos; ) || ( c == &apos;/&apos; ) ) return;
      name = String.valueOf( c );
      while( ( c = getchar( din ) ) != &apos;\0&apos; &amp;&amp; ( c != &apos;&gt;&apos; ) ) name = name + String.valueOf( c );
      if( c == &apos;\0&apos; ) return;
      value = &quot;&quot;;
      while( true ){
        while( ( ( c = getchar( din ) ) != &apos;\0&apos; ) &amp;&amp; ( c != &apos;&lt;&apos; ) ){
          if( c == &apos;&amp;&apos; ){
            char b;
            String enty = &quot;&quot;;
            while( ( ( b = getchar( din ) ) != &apos;\0&apos; ) &amp;&amp; ( b != &apos;;&apos; ) ){
              enty = enty + String.valueOf( b );
            }
            if( b == &apos;\0&apos; ) return;
            if( enty.equals( &quot;amp&quot; ) )       c = &apos;&amp;&apos;;
            else if( enty.equals( &quot;lt&quot; ) )   c = &apos;&lt;&apos;;
            else if( enty.equals( &quot;gt&quot; ) )   c = &apos;&gt;&apos;;
            else if( enty.equals( &quot;quot&quot; ) ) c = &apos;\&quot;&apos;;
            else if( enty.equals( &quot;apos&quot; ) ) c = &apos;\&apos;&apos;;
          }
          value = value + String.valueOf( c );
        }
        if( c == &apos;\0&apos; ) return;
        din.mark(4);
        if( ( c = getchar( din ) ) == &apos;\0&apos; ) return;
        else if( c == &apos;/&apos; ){
          while( ( ( c = getchar( din ) ) != &apos;\0&apos; ) &amp;&amp; ( c != &apos;&gt;&apos; ) ) {}

//IGUI.IXGUI.IPath.append(&quot;name=&quot;+name+&quot;, value=&quot;+value+&quot;\n&quot;);

          return;
        }
        else{
          din.reset();
          ( new NxmlElement( this, din ) ).validate();
        }
      }
      } catch( IOException ie ){

//IGUI.IXGUI.IPath.append(&quot;i/o exception in parse\n&quot;);

      }
    }

    // ストリームから１文字読み込む
    private char getchar( BufferedReader din ){
      int c;
      try{
      if( ( c = din.read() ) != -1 ) return( (char)c ); else return( &apos;\0&apos; );
      } catch( IOException ie ){  return(&apos;\0&apos;); }
    }

  } //~NxmlElement

// NxmElementの属性クラス
  class NxmlAttribute extends NxmlNode{

    //コンストラクタ ( データを新規作成する )
    NxmlAttribute( NxmlElement prnt, String nam, String val ){
      parent = prnt;
      name = nam;
      value = val;
      if( parent != null ) parent.child.add( this );
    }

    //コンストラクタ ( 要素のデータをコピーして縮退させる )
    NxmlAttribute( NxmlElement alas ){
      parent = alas.parent;
      name = alas.name;
      value = alas.value;
      alas.suicide();
      if( parent != null ) parent.child.add( this );
    }

    //ストリームにXML文書を出力
    public void save( BufferedWriter dout ){

//public void save(){

      int i;
      char c;

      try{
      dout.write( &quot;&lt;&quot; + name + &quot;&gt;&quot; );

//IGUI.IXGUI.IPath.append( &quot;&lt;&quot; + name + &quot;&gt;&quot; );

      for( i = 0; i &lt; value.length(); i++ ){
        c = value.charAt( i );
        if( c ==&apos;&lt;&apos; )        dout.write( &quot;&amp;lt;&quot; );

//if( c ==&apos;&lt;&apos; )        IGUI.IXGUI.IPath.append( &quot;&amp;lt;&quot; );

        else if( c == &apos;&gt;&apos; )  dout.write( &quot;&amp;gt;&quot; );

//else if( c == &apos;&gt;&apos; )  IGUI.IXGUI.IPath.append( &quot;&amp;gt;&quot; );

        else if( c == &apos;\&quot;&apos; ) dout.write( &quot;&amp;quot;&quot; );

//else if( c == &apos;\&quot;&apos; ) IGUI.IXGUI.IPath.append( &quot;&amp;quot;&quot; );

        else if( c == &apos;\&apos;&apos; ) dout.write( &quot;&amp;apos;&quot; );

//else if( c == &apos;\&apos;&apos; ) IGUI.IXGUI.IPath.append( &quot;&amp;apos;&quot; );

        else if( c == &apos;&amp;&apos; ) dout.write( &quot;&amp;amp;&quot; );

//else if( c == &apos;&amp;&apos; ) IGUI.IXGUI.IPath.append( &quot;&amp;amp;&quot; );

       else dout.write( c );

//else IGUI.IXGUI.IPath.append( &quot;&quot;+c );

      } 
      dout.write( &quot;&lt;/&quot; + name + &quot;&gt;\n&quot; );

//IGUI.IXGUI.IPath.append( &quot;&lt;/&quot; + name + &quot;&gt;\n&quot; );

      } catch( IOException ie ){}
    }

    // データを消去してメモリを開放する
    public void suicide(){
      if( parent != null ) parent.child.remove( this );
      parent = null;
      name = null;
      value = null;
    }

  }//~NxmlAttribute

}// ~Nxml

</codetext>
</codeclip>
<codeclip>
<ID>_C52</ID>
<x0>265</x0>
<y0>21</y0>
<width>221</width>
<height>64</height>
<codetext>// 主要変数
  Object         project;
  Object         properties;
  Object         clipboad;

// 方向キーコード
  static final int UP_KEY    = 19;
  static final int DOWN_KEY  = 20;
  static final int LEFT_KEY  = 21;
  static final int RIGHT_KEY = 22;

// 現在表示中のビュー
  boolean sedit_is_active = false;
  View present_view;
  
// 座標変換係数
   int screen_width  = 1000, screen_height = 1000;
   int max_width = 100, max_height = 100;
   int scale = 3;
  
//アプリケーションのプロパティ

  // 固定プロパティ(仕様に関係する部分で実行中の変更は不可)
  Integer Xinteger;
  XFile   SetupFile;
  XFile   ProjectFile;
                                                            // 設定ファイル
  XFile[] ObjectLib;                                        // ライブラリのパス  
  XFile[] SourceFile;                                       // ソースファイル
  XFile   TempFile;                                         // 一時ファイル
  XFile   GUIDesignerWork;
  XFile   LayoutData;

  XFile   CurrentDir;
  XFile   ProjectDir;
  XFile   ResourceDir;

// コンポーネントのコーナーを求めるときに使用する変数
  int Margin = 20;

// アプリケーション名の置換マクロ
String AppName = &quot;%&quot; + &quot;AppName&quot; + &quot;%&quot;;

// ここより下はアプリケーションの種類ごとに存在する
//アプリケーションの種類( 0:Javaアプリケーション / 1:アプレット/2: C++コンソール/3:C++ Windows /4:android/5:Basic/6:C言語
  int ApplicationType;

  String[] Application        = {
    &quot;Javaアプリケーション&quot;,
    &quot;Javaアプレット&quot;,
    &quot;C++コンソールアプリケーション&quot;,
    &quot;C++ウィンドウアプリケーション&quot;,
    &quot;androidアプリケーション&quot;,
    &quot;Basicアプリケーション&quot;,
    &quot;C言語アプリケーション&quot;
  };

  String[] CompileCommand     = { &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot; };
  String[] RunCommand         = { &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot; };
  String[] GUIDesignerCommand = { &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot; };
  String[] ImportFiles        = { &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot; };
  String[] ProgramStartupCode = { &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot; };
  String[] NativeHelpCommand  = { &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot; , &quot;&quot;, &quot;&quot;};

  
</codetext>
</codeclip>
<codeclip>
<ID>_C53</ID>
<x0>389</x0>
<y0>575</y0>
<width>122</width>
<height>20</height>
<codetext>//　その他の関数

  public int max( int a, int b ){ return ( a&gt;b? a : b ); }
  public int min( int a, int b ){ return ( a&lt;b? a : b ); }
  
// 新しいプロジェクトを作成する
  public void newProject(){

dprint(&quot;new project\n&quot;);

    Object p;

    if( ( p = xml.child( xml.root_element(), &quot;project&quot; ) ) != null ) xml.del_element( p );
    project = xml.new_element( xml.root_element(), &quot;xobject&quot;, &quot;project&quot; );
    xml.set_attribute( project, &quot;x0&quot;, &quot;0&quot; );
    xml.set_attribute( project, &quot;y0&quot;, &quot;0&quot; );
    xml.set_attribute( project, &quot;width&quot;, &quot;200&quot; );
    xml.set_attribute( project, &quot;height&quot;,&quot;100&quot; );
    xml.set_attribute( project, &quot;ID_maker&quot;, &quot;0&quot; );
    xml.set_attribute( project, &quot;objectname&quot;, &quot;NewApplication&quot; );
    xml.set_attribute( project, &quot;description&quot;, &quot;新規のアプリケーション&quot; );

    if( ApplicationType &lt; 2 || ApplicationType == 4 ){
      Object clip = xml.new_element( project, &quot;codeclip&quot;, &quot;_CSTART&quot; );
      xml.set_attribute( clip, &quot;x0&quot;, &quot;10&quot; );
      xml.set_attribute( clip, &quot;y0&quot;, &quot;10&quot; );
      xml.set_attribute( clip, &quot;width&quot;, &quot;80&quot; );
      xml.set_attribute( clip, &quot;height&quot;,&quot;24&quot; );
      xml.set_attribute( clip, &quot;codetext&quot;, ProgramStartupCode[ ApplicationType ] );
    }

    Object pin = xml.new_element( project, &quot;pin&quot;, &quot;_PSTART&quot; );
    xml.set_attribute( pin, &quot;x0&quot;, &quot;10&quot; );
    xml.set_attribute( pin, &quot;y0&quot;, &quot;40&quot; );
    xml.set_attribute( pin, &quot;width&quot;, &quot;55&quot; );
    xml.set_attribute( pin, &quot;height&quot;,&quot;24&quot; );
    xml.set_attribute( pin, &quot;text&quot;, &quot;Start()&quot; );
    xml.set_attribute( pin, &quot;px&quot;, &quot;50&quot; );
    xml.set_attribute( pin, &quot;py&quot;, &quot;50&quot; );

    loadProperty();

  }//newProject()

// ファイルからプロジェクトをロードする
  public void loadProject(){

dprint(&quot;load project\n&quot;);

    Object p;
    if( ( ProjectFile != null ) &amp;&amp; ProjectFile.isFile() ){
      if( ( p = xml.child( xml.root_element(), &quot;project&quot; ) ) != null ) xml.del_element( p );
      project = xml.new_element( xml.root_element(), ProjectFile, &quot;project&quot; );
      properties = xml.child( project, &quot;properties&quot; );
      if( properties == null ) loadProperty();
      syncProperty();
    }
    else newProject(); 

  }//~loadProject()

//プロジェクトをセーブする   
  public void saveProject(){

dprint(&quot;save project\n&quot;);

    restoreProperty();

dprint(&quot;save project element:&quot; + project +&quot;\n&quot;);

    xml.save_element( project, ProjectFile );

dprint(&quot;save project element done\n&quot;);

  }//~saveProject()


// プロパティオブジェクトをロードする
  public void loadProperty(){

dprint(&quot;load property\n&quot;);

    Object prj = xml.child( xml.root_element(), &quot;project&quot; );
    if( prj != null &amp;&amp; SetupFile.isFile() ){
      Object pro = xml.child( prj, &quot;properties&quot; );
      if( pro != null ) xml.del_element( pro );
      properties = xml.new_element( prj, SetupFile, &quot;properties&quot; );
      syncProperty();
    }
  }//~loadProperty()


//プロパティオブジェクトをセーブする   
  public void saveProperty(){

dprint(&quot;save property\n&quot;);

    restoreProperty();
    xml.save_element( properties, SetupFile );
  }//~saveProperty()

// プロパティオブジェクトの値を変数にセットする
  public void syncProperty(){

dprint(&quot;sync property\n&quot;);

    String t;
    if( properties == null ) return;

    CompileCommand[0] = ((t=xml.get_attribute( properties, &quot;CompileCommand0&quot; ))==null?&quot;&quot;:t);
    RunCommand[0] = ((t=xml.get_attribute( properties, &quot;RunCommand0&quot; ))==null?&quot;&quot;:t);
    GUIDesignerCommand[0] = ((t=xml.get_attribute( properties, &quot;GUIDesignerCommand0&quot; ))==null?&quot;&quot;:t);
    ImportFiles[0] = ((t=xml.get_attribute( properties, &quot;ImportFiles0&quot; ))==null?&quot;&quot;:t);
    ProgramStartupCode[0] = ((t=xml.get_attribute( properties, &quot;ProgramStartupCode0&quot; ))==null?&quot;&quot;:t);
    NativeHelpCommand[0] = ((t=xml.get_attribute( properties, &quot;NativeHelpCommand0&quot; ))==null?&quot;&quot;:t);

    CompileCommand[1] = ((t=xml.get_attribute( properties, &quot;CompileCommand1&quot; ))==null?&quot;&quot;:t);
    RunCommand[1] = ((t=xml.get_attribute( properties, &quot;RunCommand1&quot; ))==null?&quot;&quot;:t);
    GUIDesignerCommand[1] = ((t=xml.get_attribute( properties, &quot;GUIDesignerCommand1&quot; ))==null?&quot;&quot;:t);
    ImportFiles[1] = ((t=xml.get_attribute( properties, &quot;ImportFiles1&quot; ))==null?&quot;&quot;:t);
    ProgramStartupCode[1] = ((t=xml.get_attribute( properties, &quot;ProgramStartupCode1&quot; ))==null?&quot;&quot;:t);
    NativeHelpCommand[1] = ((t=xml.get_attribute( properties, &quot;NativeHelpCommand1&quot; ))==null?&quot;&quot;:t);

    CompileCommand[2] = ((t=xml.get_attribute( properties, &quot;CompileCommand2&quot; ))==null?&quot;&quot;:t);
    RunCommand[2] = ((t=xml.get_attribute( properties, &quot;RunCommand2&quot; ))==null?&quot;&quot;:t);
    GUIDesignerCommand[2] = ((t=xml.get_attribute( properties, &quot;GUIDesignerCommand2&quot; ))==null?&quot;&quot;:t);
    ImportFiles[2] = ((t=xml.get_attribute( properties, &quot;ImportFiles2&quot; ))==null?&quot;&quot;:t);
    ProgramStartupCode[2] = ((t=xml.get_attribute( properties, &quot;ProgramStartupCode2&quot; ))==null?&quot;&quot;:t);
    NativeHelpCommand[2] = ((t=xml.get_attribute( properties, &quot;NativeHelpCommand2&quot; ))==null?&quot;&quot;:t);

    CompileCommand[3] = ((t=xml.get_attribute( properties, &quot;CompileCommand3&quot; ))==null?&quot;&quot;:t);
    RunCommand[3] = ((t=xml.get_attribute( properties, &quot;RunCommand3&quot; ))==null?&quot;&quot;:t);
    GUIDesignerCommand[3] = ((t=xml.get_attribute( properties, &quot;GUIDesignerCommand3&quot; ))==null?&quot;&quot;:t);
    ImportFiles[3] = ((t=xml.get_attribute( properties, &quot;ImportFiles3&quot; ))==null?&quot;&quot;:t);
    ProgramStartupCode[3] = ((t=xml.get_attribute( properties, &quot;ProgramStartupCode3&quot; ))==null?&quot;&quot;:t);
    NativeHelpCommand[3] = ((t=xml.get_attribute( properties, &quot;NativeHelpCommand3&quot; ))==null?&quot;&quot;:t);

    CompileCommand[4] = ((t=xml.get_attribute( properties, &quot;CompileCommand4&quot; ))==null?&quot;&quot;:t);
    RunCommand[4] = ((t=xml.get_attribute( properties, &quot;RunCommand4&quot; ))==null?&quot;&quot;:t);
    GUIDesignerCommand[4] = ((t=xml.get_attribute( properties, &quot;GUIDesignerCommand4&quot; ))==null?&quot;&quot;:t);
    ImportFiles[4] = ((t=xml.get_attribute( properties, &quot;ImportFiles4&quot; ))==null?&quot;&quot;:t);
    ProgramStartupCode[4] = ((t=xml.get_attribute( properties, &quot;ProgramStartupCode4&quot; ))==null?&quot;&quot;:t);
    NativeHelpCommand[4] = ((t=xml.get_attribute( properties, &quot;NativeHelpCommand4&quot; ))==null?&quot;&quot;:t);

    CompileCommand[5] = ((t=xml.get_attribute( properties, &quot;CompileCommand5&quot; ))==null?&quot;&quot;:t);
    RunCommand[5] = ((t=xml.get_attribute( properties, &quot;RunCommand5&quot; ))==null?&quot;&quot;:t);
    GUIDesignerCommand[5] = ((t=xml.get_attribute( properties, &quot;GUIDesignerCommand5&quot; ))==null?&quot;&quot;:t);
    ImportFiles[5] = ((t=xml.get_attribute( properties, &quot;ImportFiles5&quot; ))==null?&quot;&quot;:t);
    ProgramStartupCode[5] = ((t=xml.get_attribute( properties, &quot;ProgramStartupCode5&quot; ))==null?&quot;&quot;:t);
    NativeHelpCommand[5] = ((t=xml.get_attribute( properties, &quot;NativeHelpCommand5&quot; ))==null?&quot;&quot;:t);

    CompileCommand[6] = ((t=xml.get_attribute( properties, &quot;CompileCommand6&quot; ))==null?&quot;&quot;:t);
    RunCommand[6] = ((t=xml.get_attribute( properties, &quot;RunCommand6&quot; ))==null?&quot;&quot;:t);
    GUIDesignerCommand[6] = ((t=xml.get_attribute( properties, &quot;GUIDesignerCommand6&quot; ))==null?&quot;&quot;:t);
    ImportFiles[6] = ((t=xml.get_attribute( properties, &quot;ImportFiles6&quot; ))==null?&quot;&quot;:t);
    ProgramStartupCode[6] = ((t=xml.get_attribute( properties, &quot;ProgramStartupCode6&quot; ))==null?&quot;&quot;:t);
    NativeHelpCommand[6] = ((t=xml.get_attribute( properties, &quot;NativeHelpCommand6&quot; ))==null?&quot;&quot;:t);

  }//~syncProperty()

// 変数の値をプロパティオブジェクトにセットする
  public void restoreProperty(){

dprint(&quot;restore property\n&quot;);

    if( properties == null ) return;
    xml.set_attribute( properties, &quot;ApplicationType&quot;, &quot;&quot; + ApplicationType );
    xml.set_attribute( properties, &quot;scale&quot;, &quot;&quot; + scale );

    xml.set_attribute( properties, &quot;CompileCommand0&quot;, CompileCommand[0] );
    xml.set_attribute( properties, &quot;RunCommand0&quot;, RunCommand[0] );
    xml.set_attribute( properties, &quot;GUIDesignerCommand0&quot;, GUIDesignerCommand[0] );
    xml.set_attribute( properties, &quot;ImportFiles0&quot;, ImportFiles[0] );
    xml.set_attribute( properties, &quot;ProgramStartupCode0&quot;, ProgramStartupCode[0] );
    xml.set_attribute( properties, &quot;NativeHelpCommand0&quot;, NativeHelpCommand[0] );

    xml.set_attribute( properties, &quot;CompileCommand1&quot;, CompileCommand[1] );
    xml.set_attribute( properties, &quot;RunCommand1&quot;, RunCommand[1] );
    xml.set_attribute( properties, &quot;GUIDesignerCommand1&quot;, GUIDesignerCommand[1] );
    xml.set_attribute( properties, &quot;ImportFiles1&quot;, ImportFiles[1] );
    xml.set_attribute( properties, &quot;ProgramStartupCode1&quot;, ProgramStartupCode[1] );
    xml.set_attribute( properties, &quot;NativeHelpCommand1&quot;, NativeHelpCommand[1] );

    xml.set_attribute( properties, &quot;CompileCommand2&quot;, CompileCommand[2] );
    xml.set_attribute( properties, &quot;RunCommand2&quot;, RunCommand[2] );
    xml.set_attribute( properties, &quot;GUIDesignerCommand2&quot;, GUIDesignerCommand[2] );
    xml.set_attribute( properties, &quot;ImportFiles2&quot;, ImportFiles[2] );
    xml.set_attribute( properties, &quot;ProgramStartupCode2&quot;, ProgramStartupCode[2] );
    xml.set_attribute( properties, &quot;NativeHelpCommand2&quot;, NativeHelpCommand[2] );

    xml.set_attribute( properties, &quot;CompileCommand3&quot;, CompileCommand[3] );
    xml.set_attribute( properties, &quot;RunCommand3&quot;, RunCommand[3] );
    xml.set_attribute( properties, &quot;GUIDesignerCommand3&quot;, GUIDesignerCommand[3] );
    xml.set_attribute( properties, &quot;ImportFiles3&quot;, ImportFiles[3] );
    xml.set_attribute( properties, &quot;ProgramStartupCode3&quot;, ProgramStartupCode[3] );
    xml.set_attribute( properties, &quot;NativeHelpCommand3&quot;, NativeHelpCommand[3] );

    xml.set_attribute( properties, &quot;CompileCommand4&quot;, CompileCommand[4] );
    xml.set_attribute( properties, &quot;RunCommand4&quot;, RunCommand[4] );
    xml.set_attribute( properties, &quot;GUIDesignerCommand4&quot;, GUIDesignerCommand[4] );
    xml.set_attribute( properties, &quot;ImportFiles4&quot;, ImportFiles[4] );
    xml.set_attribute( properties, &quot;ProgramStartupCode4&quot;, ProgramStartupCode[4] );
    xml.set_attribute( properties, &quot;NativeHelpCommand4&quot;, NativeHelpCommand[4] );

    xml.set_attribute( properties, &quot;CompileCommand5&quot;, CompileCommand[5] );
    xml.set_attribute( properties, &quot;RunCommand5&quot;, RunCommand[5] );
    xml.set_attribute( properties, &quot;GUIDesignerCommand5&quot;, GUIDesignerCommand[5] );
    xml.set_attribute( properties, &quot;ImportFiles5&quot;, ImportFiles[5] );
    xml.set_attribute( properties, &quot;ProgramStartupCode5&quot;, ProgramStartupCode[5] );
    xml.set_attribute( properties, &quot;NativeHelpCommand5&quot;, NativeHelpCommand[5] );

    xml.set_attribute( properties, &quot;CompileCommand6&quot;, CompileCommand[6] );
    xml.set_attribute( properties, &quot;RunCommand6&quot;, RunCommand[6] );
    xml.set_attribute( properties, &quot;GUIDesignerCommand6&quot;, GUIDesignerCommand[6] );
    xml.set_attribute( properties, &quot;ImportFiles6&quot;, ImportFiles[6] );
    xml.set_attribute( properties, &quot;ProgramStartupCode6&quot;, ProgramStartupCode[6] );
    xml.set_attribute( properties, &quot;NativeHelpCommand6&quot;, NativeHelpCommand[6] );

  }//~restoreProperty()

  // プログラムを終了する
  public void exitProgram(){
//    TempFile.Xdelete();
    System.exit(0);
  }
  
  // boolean を intに変換する    
  public int boolean2int( boolean b ){ if(b) return(1); else return(0); }
  
  // int を booleanに変換する
  public boolean int2boolean( int i){  return( i!= 0 ); }
  
  //エラーを報告する
  public void reportError( Object o ){
    System.out.println( o );
  }

  // 与えられたコマンドをＯＳに発行し実行させる(mode が trueなら終了までまつ falseならばすぐに次の処理にうつる)
  public void execute( String s, boolean mode ){

dprint(&quot;execute\n&quot;);

        Process p=null;
        int ExitCode;
        
        try{
          p = java.lang.Runtime.getRuntime().exec(s);
        } catch( Exception ie ){ reportError(s+&quot;は実行できません\n&quot; ); }
        if( ( p!= null ) &amp;&amp; mode ){
          try{
            ExitCode = p.waitFor();
          } catch( InterruptedException ie ){ }
        }
  }
  
  //文字列を整数に変換する
  public int parseInt( String s ){
    if( s == null  || s.length() == 0 ) return 0;
    char c = s.charAt(0);
    if ( c &lt; &apos;0&apos; || c &gt; &apos;9&apos; ) return 0;
    return( Xinteger.parseInt( s ) );
  }
      
  // 文字列の1行目を取り出す
  public String getFirstLine( String buf ){
    int p = buf.indexOf( &apos;\n&apos; );
    if( p &lt; 0 ) return( buf );
    else if( p == 0 ) return( &quot;&quot; );
    else return( buf.substring( 0, p ) ); 
  }

  // 文字列の2行目以降を取り出す
  public String getNextLines( String buf ){
    int p = buf.indexOf( &apos;\n&apos; );
    if( ( p &lt; 0 ) || ( p &gt; buf.length() - 2 ) ) return( &quot;&quot; );
    else return( buf.substring( p + 1 ) ); 
  }

  //文字列の部分文字列str1をstr2に置き換えた文字列を返す
  public String Xreplace( String base, String str1, String str2 ){
     int p = base.indexOf( str1 );
     if( p &lt; 0 ) return( base );
     else if( p == 0 ) return( str2 + Xreplace( base.substring( str1.length() ), str1, str2 ) );
     else return( base.substring( 0, p ) + str2 + Xreplace( base.substring( p + str1.length() ), str1, str2 ) );
  }

  //文字列からファイル名に含まれてはならない文字を取り除く
  public String compack( String buf ){
    String r;
    char c;
    int i;

    r=&quot;&quot;;
    for( i = 0; i &lt; buf.length(); i++ ){
      c = buf.charAt(i);
      if( (c!=&apos;\n&apos;) &amp;&amp; (c!=&apos;\t&apos;) &amp;&amp; (c!=&apos;\r&apos;) &amp;&amp; (c!=&apos;\\&apos;) &amp;&amp; (c!=&apos;\&quot;&apos;) &amp;&amp; (c!=&apos;\&apos;&apos;) &amp;&amp; 
          (c!=&apos;/&apos; ) &amp;&amp; (c!=&apos;:&apos; ) &amp;&amp; (c!=&apos;;&apos; ) &amp;&amp; (c!=&apos;.&apos; ) &amp;&amp; (c!=&apos;*&apos; ) &amp;&amp; (c!=&apos;?&apos; ) &amp;&amp;
          (c!=&apos;+&apos; ) &amp;&amp; (c!=&apos;&lt;&apos; ) &amp;&amp; (c!=&apos;&gt;&apos; ) &amp;&amp; (c!=&apos; &apos; ) &amp;&amp; (c!=&apos;=&apos; ) &amp;&amp; (c!=&apos;-&apos; ) &amp;&amp;
          (c!=&apos;|&apos; ) &amp;&amp; (c!=&apos;^&apos; ) &amp;&amp; (c!=&apos;&amp;&apos; ) &amp;&amp; (c!=&apos;(&apos; ) &amp;&amp; (c!=&apos;)&apos; ) &amp;&amp; (c!=&apos;[&apos; ) &amp;&amp;
          (c!=&apos;]&apos; ) &amp;&amp; (c!=&apos;{&apos; ) &amp;&amp; (c!=&apos;}&apos; ) &amp;&amp; (c!=&apos;!&apos; ) &amp;&amp; (c!=&apos;#&apos; ) &amp;&amp; (c!=&apos;$&apos; ) &amp;&amp;
          (c!=&apos;%&apos; ) &amp;&amp; (c!=&apos;~&apos; )
      )
      r = r + c; else r = r + &apos;_&apos;;
    }
    return( r );
  }

  // 与えられた座標がコンポーネントのコーナーであるかどうか求める
  public boolean is_corner(View v, int x, int y ){
    int[] loc = new int[2];
    v.getLocationOnScreen( loc );
    int x1 = loc[0] + v.getWidth();
    int y1 = loc[1] + v.getHeight();
    return ( x &gt; x1 - scale*Margin &amp;&amp; x &lt; x1 &amp;&amp;  y &gt; y1 - scale*Margin &amp;&amp; y &lt; y1  );
  }

  // ２つのコンポーネントを接続する線の端点を求める
  public Point getBorderPoint( int x1, int y1, int width1, int height1, int x2, int y2, int width2, int height2 ){
    int   xo, yo, rx, ry;
    float g1, g2;
        
    xo = x1 + width1  / 2;
    yo = y1 + height1 / 2;
    rx = x2 + width2  / 2 - xo;
    ry = y2 + height2 / 2 - yo;
    if( width1 == 0 || height1 == 0 || ( rx == 0 &amp;&amp; ry == 0 ) ) return( new Point( -1, -1 ) );
    if( rx == 0 ){
      if(ry &gt; 0) return( new Point( xo, y1 + height1 ) );
      else       return( new Point( xo, y1 ) );
    }
    g1 = (float)height1 / width1;
    g2 = (float)ry / rx;
    if( -g1 &lt;=  g2 &amp;&amp;  g2 &lt;= g1 ){
      if( rx &gt; 0 ) return( new Point( x1 + width1,   yo + (int)( g2 * width1 / 2.0F ) ) );
      else         return( new Point( x1,  yo - (int)( g2 * width1 / 2.0F ) ) );
    }
    else{
      if( ry &gt; 0 ) return( new Point( xo + (int)( height1 / g2 / 2.0F ), y1 + height1 ) );
      else         return( new Point( xo - (int)( height1 / g2 / 2.0F ), y1 ) );
    }
  }

  // EditTextから文字列を得る
  public String get_text( EditText e ){
    return ((SpannableStringBuilder)e.getText()).toString(); 
  }

  //メソッド文字列からメソッド名を取り出す
  public String getbase( String method ){
    return( method.substring( 0, method.indexOf( &apos;(&apos; ) ) );
  }

  // メソッド文字列から添字を取り出す
  public String getsubscript( String method ){
    return( method.substring( method.indexOf( &apos;(&apos; ) + 1, method.indexOf( &apos;)&apos; ) ) );
  }

  //メソッド文字列からシグニチャを取り出す。このとき型宣言部(int,doubleなど)は除去される
  public String getsignature( String method ){
    int i, j;
    StringBuffer buf1, buf2;
       
    buf1 = new StringBuffer( method );
    for( i = 0;( i &lt; buf1.length() ) &amp;&amp; ( buf1.charAt(i) != &apos;(&apos; ); i++ ) ;
    if( ( i == 0 ) || ( i &gt;= buf1.length()-1 ) ) return( &quot;&lt;&lt;&lt;ERROR=&quot;+method+&quot;&gt;&gt;&gt;&quot; );
    buf1 = buf1.delete( 0, i + 1 );
    for( i = 0;( i &lt; buf1.length() ) &amp;&amp; ( buf1.charAt(i) != &apos;)&apos; ); i++ ) ;
    if( i == 0 ) return( &quot;&quot; );
    if( i &gt;= buf1.length() ) return( &quot;&lt;&lt;&lt;ERROR=&quot;+method+&quot;&gt;&gt;&gt;&quot; );
    buf1 = buf1.delete( i, buf1.length() ).reverse();
    buf2 = new StringBuffer(&quot;&quot;);
    i = 0;
    while( true ){
      while( ( i &lt; buf1.length() ) &amp;&amp; ( buf1.charAt(i) == &apos; &apos; ) ) i++;
      if( i &gt;= buf1.length() ) return( buf2.reverse().toString() );
      j = i;
      while( ( j &lt; buf1.length() ) &amp;&amp; ( buf1.charAt(j) != &apos; &apos; ) &amp;&amp; ( buf1.charAt(j) != &apos;,&apos; ) ) j++;
      buf2.append( buf1.substring( i, j) );
      if( j &gt;= buf1.length() ) return( buf2.reverse().toString() );
      while( ( j &lt; buf1.length() ) &amp;&amp; ( buf1.charAt(j) != &apos;,&apos; ) ) j++;
      if( j == buf1.length() ) return( buf2.reverse().toString() );
      buf2.append( &quot;,&quot; );
      i = j + 1;
    }
  }
     
  // メソッド文字列からシグニチャを取り出して宣言文に変換する
  public String getdeclare( String method ){
    int i, j;
    StringBuffer buf1, buf2;
      
    buf1 = new StringBuffer( method );
    for( i = 0;( i &lt; buf1.length() ) &amp;&amp; ( buf1.charAt(i) != &apos;(&apos; ); i++ ) ;
    if( ( i == 0 ) || ( i &gt;= buf1.length()-1 ) ) return( &quot;&lt;&lt;&lt;ERROR=&quot;+method+&quot;&gt;&gt;&gt;\n&quot; );
    buf1 = buf1.delete( 0, i + 1 );
    for( i = 0;( i &lt; buf1.length() ) &amp;&amp; ( buf1.charAt(i) != &apos;)&apos; ); i++ ) ;
    if( i == 0 ) return( &quot;\n&quot; );
    if( i &gt;= buf1.length() ) return( &quot;&lt;&lt;&lt;ERROR=&quot;+method+&quot;&gt;&gt;&gt;\n&quot; );
    buf1 = buf1.delete( i, buf1.length() );
    buf2 = new StringBuffer(&quot;&quot;);
    while( true ){
      int l = buf1.length();
      for( i = 0; ( i &lt; l ) &amp;&amp; ( buf1.charAt(i) != &apos;,&apos; ); i++ ) ;
      buf2.append( buf1.substring( 0, i ) + &quot;;\n&quot; );
      buf1 = buf1.delete( 0, i + 1 );
      if( i &gt;= l - 1 ) return( buf2.toString() );
    }
  }
      
// オブジェクトやピンのフルパス名を返す (C++)
  public String getAbsoluteName( Object elem ){
    if( elem == null ) return(&quot;&quot;);
    String ptyp = xml.element_name( xml.parent_element( elem ) );
    String typ = xml.element_name( elem );
    if( typ.equals(&quot;xobject&quot; ) ){
      if( ptyp.equals(&quot;xobject&quot;) ) return( getAbsoluteName( xml.parent_element( elem ) ) + &quot;::&quot; + xml.get_attribute( elem, &quot;objectname&quot; ) );
      else return( xml.get_attribute( elem, &quot;objectname&quot; ) );
    }
    else if( typ.equals(&quot;aobject&quot; ) ){
      if( ptyp.equals(&quot;xobject&quot;) ) return( getAbsoluteName( xml.parent_element( elem ) ) + &quot;::&quot; + xml.get_attribute( elem, &quot;objectname&quot; ) );
      else return( xml.get_attribute( elem, &quot;objectname&quot; ) );
    }
    else if( typ.equals(&quot;pin&quot; ) ){
      if( ptyp.equals(&quot;xobject&quot;) || ptyp.equals(&quot;aobject&quot;) ) return( getAbsoluteName( xml.parent_element( elem ) ) + &quot;::&quot; + xml.get_attribute( elem, &quot;text&quot; ) );
      else return( &quot;&quot; );
    }
    else if( typ.equals(&quot;operation&quot; ) ){
      if( ptyp.equals(&quot;xobject&quot;) || ptyp.equals(&quot;aobject&quot;) ) return( getAbsoluteName( xml.parent_element( elem ) ) + &quot;::&quot; + xml.elementID( elem ) + &quot;_&quot; + xml.get_attribute( elem, &quot;inpintext&quot; ) );
      else return( &quot;&quot; );
    }
    else if( typ.equals(&quot;state&quot; ) ){
      if( ptyp.equals(&quot;aobject&quot;) ) return( getAbsoluteName( xml.parent_element( elem ) ) + &quot;::&quot; + xml.elementID( elem ) );
      else return( &quot;&quot; );
    }
    else return(&quot;&quot;);
  }

// オブジェクトやピンのフルパス名を返す(Basic, C言語) 
  public String getAbsoluteName2( Object elem ){
    String typ = xml.element_name( elem );
    String buf =  &quot;_&quot;+elem.hashCode();
    if( typ.equals(&quot;state&quot; ) ) buf = xml.elementID( elem );
    else if( typ.equals(&quot;pin&quot; ) ) {
      if( xml.elementID( elem ).equals(&quot;_PSTART&quot;) ) buf = &quot;_PSTART()&quot;;
	  else buf = buf + &quot;_&quot; + xml.get_attribute( elem, &quot;text&quot; );
    }
    else if( typ.equals(&quot;operation&quot; ) ) buf = buf +  &quot;_&quot; + xml.get_attribute( elem, &quot;inpintext&quot; ) ;
    return buf;
  }


// 全画面を再描画する
public void repaintAll(){
  View v = ACTIVITY.getWindow().getDecorView();
  v.invalidate();
}


// コンポーネントの画面パネル上における位置・大きさを求める
public void getBounds( View v, int[] bounds ){
  bounds[0]=bounds[1]=bounds[2]=bounds[3]=0;

  if( v instanceof xobject ){
    xobject x = (xobject)v;
    bounds[0]=x.x0*scale;
    bounds[1]=x.y0*scale;
    bounds[2]=x.width*scale;
    bounds[3]=x.height*scale;
  }
  else if( v instanceof aobject ){
    aobject x = (aobject)v;
    bounds[0]=x.x0*scale;
    bounds[1]=x.y0*scale;
    bounds[2]=x.width*scale;
    bounds[3]=x.height*scale;
  }
  else if( v instanceof uobject ){
    uobject x = (uobject)v;
    bounds[0]=x.x0*scale;
    bounds[1]=x.y0*scale;
    bounds[2]=x.width*scale;
    bounds[3]=x.height*scale;
  }
  else if( v instanceof pin ){
    pin x = (pin)v;
    bounds[0]=x.x0*scale;
    bounds[1]=x.y0*scale;
    bounds[2]=x.width*scale;
    bounds[3]=x.height*scale;
  }
  else if( v instanceof codeclip ){
    codeclip x = (codeclip)v;
    bounds[0]=x.x0*scale;
    bounds[1]=x.y0*scale;
    bounds[2]=x.width*scale;
    bounds[3]=x.height*scale;
  }
  else if( v instanceof KJgroup ){
    KJgroup x = (KJgroup)v;
    bounds[0]=x.x0*scale;
    bounds[1]=x.y0*scale;
    bounds[2]=x.width*scale;
    bounds[3]=x.height*scale;
  }
  else if( v instanceof pinlabel ){
    int[] pb = new int[4];
    getBounds( (View)(v.getParent()), pb );
    pinlabel x = (pinlabel)v;
    bounds[0]=x.px*scale+pb[0];
    bounds[1]=x.py*scale+pb[1];
    bounds[2]=x.width;
    bounds[3]=x.height*scale;
  }
  else if( v instanceof state ){
    state x = (state)v;
    bounds[0]=x.x0*scale;
    bounds[1]=x.y0*scale;
    bounds[2]=x.width*scale;
    bounds[3]=x.height*scale;
  }
  else if( v instanceof operation ){
    operation x = (operation)v;
    bounds[0]=x.x0*scale;
    bounds[1]=x.y0*scale;
    bounds[2]=x.width*scale;
    bounds[3]=x.height*scale;
  }
  else if( v instanceof innerpin ){
    int[] pb = new int[4];
    getBounds( (View)(v.getParent()), pb );
    innerpin x = (innerpin)v;
    bounds[0]=x.x0*scale+pb[0];
    bounds[1]=x.y0*scale+pb[1];
    bounds[2]=x.width*scale;
    bounds[3]=x.height*scale;
  }
  else if( v instanceof connector ){
    int[] pb = new int[4];
    getBounds( (View)(v.getParent()), pb );
    connector x = (connector)v;
    bounds[0]=x.x0*scale+pb[0];
    bounds[1]=x.y0*scale+pb[1];
    bounds[2]=x.width*scale;
    bounds[3]=x.height*scale;
  }
  else if( v instanceof relation ){
    relation x = (relation)v;
    bounds[0]=x.x0*scale;
    bounds[1]=x.y0*scale;
    bounds[2]=x.width*scale;
    bounds[3]=x.height*scale;
  }
  else if( v instanceof action ){
    action x = (action)v;
    bounds[0]=x.x0*scale;
    bounds[1]=x.y0*scale;
    bounds[2]=x.width*scale;
    bounds[3]=x.height*scale;
  }
  else if( v instanceof xflow ){
    xflow x = (xflow)v;
    bounds[0]=x.x0*scale;
    bounds[1]=x.y0*scale;
    bounds[2]=x.width*scale;
    bounds[3]=x.height*scale;
  }

}

// ZIPファイルからファイルを復元する
public void unzip( File zip_file, File out_dir ){
  ZipInputStream in;
  BufferedOutputStream out;
  // zipファイルの読込
  try{
    in = new ZipInputStream( new FileInputStream(zip_file) );
    // エントリーを1つずつファイル・フォルダに復元
    ZipEntry entry = null;
    while( ( entry = in.getNextEntry() ) != null ){
      // ファイルを作成
      File file = new File( out_dir + &quot;/&quot; + entry.getName() );
      // フォルダ・エントリの場合はフォルダを作成して次へ
      if( entry.isDirectory() ){
        file.mkdirs();
        execute(&quot;chmod 777 &quot;+file.getPath(), true );
        continue;
      }
      // ファイル出力する場合、
      // フォルダが存在しない場合は事前にフォルダ作成
      if( !file.getParentFile().exists() ){
        File parent = file.getParentFile(); 
        parent.mkdirs();
        execute(&quot;chmod 777 &quot;+parent.getPath(), true );
      }

      // ファイル出力
      try{
        out = new BufferedOutputStream( new FileOutputStream( file ) );
        // エントリーの中身を出力
        int size = 0;
        byte[] buf = new byte[1024];
        while( ( size = in.read( buf ) ) &gt; 0 ){
          out.write( buf, 0, size );
        }
        out.close();
      } catch(IOException e){}
      execute(&quot;chmod 777 &quot;+file.getPath(), true );
    }
    in.close();
  } catch(IOException e){}
}


// リソース上のZIPファイルからファイルを復元する
public void unzipFromResource( int res_id, File out_dir ){
  ZipInputStream in;
  BufferedOutputStream out;
  // zipファイルの読込
  try{
    in = new ZipInputStream( ACTIVITY.getResources().openRawResource(res_id) );
    // エントリーを1つずつファイル・フォルダに復元
    ZipEntry entry = null;
    while( ( entry = in.getNextEntry() ) != null ){
      // ファイルを作成
      File file = new File( out_dir + &quot;/&quot; + entry.getName() );
      // フォルダ・エントリの場合はフォルダを作成して次へ
      if( entry.isDirectory() ){
        file.mkdirs();
        execute(&quot;chmod 777 &quot;+file.getPath(), true );
        continue;
      }
      // ファイル出力する場合、
      // フォルダが存在しない場合は事前にフォルダ作成
      if( !file.getParentFile().exists() ){
        File parent = file.getParentFile(); 
        parent.mkdirs();
        execute(&quot;chmod 777 &quot;+parent.getPath(), true );
      }

      // ファイル出力
      try{
        out = new BufferedOutputStream( new FileOutputStream( file ) );
        // エントリーの中身を出力
        int size = 0;
        byte[] buf = new byte[1024];
        while( ( size = in.read( buf ) ) &gt; 0 ){
          out.write( buf, 0, size );
        }
        out.close();
      } catch(IOException e){}
      execute(&quot;chmod 777 &quot;+file.getPath(), true );
    }
    in.close();
  } catch(IOException e){}
}

</codetext>
</codeclip>
<codeclip>
<ID>_C54</ID>
<x0>265</x0>
<y0>89</y0>
<width>188</width>
<height>20</height>
<codetext>  // C++プログラムを作成する
  public void compile_CPP( Object element, StringBuffer clsbuf, StringBuffer funcbuf, StringBuffer initbuf, Vector signal ){

dprint(&quot;compile cpp\n&quot;);

    int i, j;
    Vector list;

    String element_name = xml.element_name( element );
    String comp_name = xml.elementID( element );

    if( element_name.equals(&quot;codeclip&quot;) ){
      clsbuf.append( xml.get_attribute( element, &quot;codetext&quot; ) + &quot;\n&quot; );
    }

    else if( element_name.equals(&quot;xobject&quot;) ){
      StringBuffer codebuf = new StringBuffer(&quot;&quot;); 
      String cls = xml.get_attribute( element, &quot;objectname&quot; );
      clsbuf.append( &quot;namespace &quot; + cls + &quot; {\n&quot; );

      list = xml.child_list( element, &quot;codeclip&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        compile_CPP( list.get(i), clsbuf, funcbuf, initbuf, null );// codebuf-&gt;clsbuf
      }

      Vector signal2 = new Vector();
      list = xml.child_list( element, &quot;relation&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        Object pin1, pin2;
        String pin1name = xml.get_attribute( list.get(i), &quot;pin1name&quot; );
        String pin2name = xml.get_attribute( list.get(i), &quot;pin2name&quot; );
        if( pin2name.charAt( pin2name.length()-1 ) == &apos;)&apos; ){  // pin2 is pinlabel
          Object base = xml.child( element, getbase( pin2name ) );
          pin2 = xml.child( base, getsignature( pin2name ) );
        }
        else{
          pin2 = xml.child( element, pin2name );             // pin2 is pin or operation
        }
        signal2.add( new StringCouple( pin1name, getAbsoluteName( pin2 ) ) );
      }
        
      list = xml.child_list( element, &quot;pin&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        String name = xml.elementID( list.get(i) );
        Vector method= new Vector();

        for( j = signal2.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal2.get(j) );
          if( name.equals( k.String1 ) ){
            method.add( k.String2 );
            signal2.remove( k );
          }
        }
        for( j = signal.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal.get(j) );
          if( name.equals( k.String1 ) ){
            method.add( k.String2 );
            signal.remove( k );
          }
        }
        compile_CPP( list.get(i), clsbuf, funcbuf, initbuf, method );
      }
       
      list = xml.child_list( element, &quot;operation&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        String name = xml.elementID( list.get(i) );
        Vector method= new Vector();

        for( j = signal2.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal2.get(j) );
          if( name.equals( k.String1 ) ){
            method.add( k.String2 );
            signal2.remove( k );
          }
        }
        compile_CPP( list.get(i), clsbuf, funcbuf, initbuf, method );
      }

      list = xml.child_list( element, &quot;aobject&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        String name = xml.elementID( list.get(i) );
        Vector method= new Vector();
        for( j = signal2.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal2.get(j) );
          if( ( k.String1.charAt( k.String1.length()-1 ) == &apos;)&apos; ) &amp;&amp; name.equals( getbase( k.String1 ) ) ){
            method.add( new StringCouple( getsignature( k.String1 ), k.String2 ) );
            signal2.remove( k );
          }
        }
        compile_CPP( list.get(i), clsbuf, funcbuf, initbuf, method );
      }

      list = xml.child_list( element, &quot;xobject&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        String name = xml.elementID( list.get(i) );
        Vector method= new Vector();
        for( j = signal2.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal2.get(j) );
          if( ( k.String1.charAt( k.String1.length()-1 ) == &apos;)&apos; ) &amp;&amp; name.equals( getbase( k.String1 ) ) ){
            method.add( new StringCouple( getsignature( k.String1 ), k.String2 ) );
            signal2.remove( k );
          }
        }
        compile_CPP( list.get(i), clsbuf, funcbuf, initbuf, method );
      }
         
      clsbuf.append( codebuf.toString() + &quot;\n}\n&quot; );
    }


    else if( element_name.equals(&quot;aobject&quot;) ){
      StringBuffer codebuf = new StringBuffer(&quot;&quot;); 
      String cls = xml.get_attribute( element, &quot;objectname&quot; );
      clsbuf.append( &quot;namespace &quot; + cls + &quot;{\nint STATE, STATE2;\n&quot; );

      list = xml.child_list( element, &quot;codeclip&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        compile_CPP( list.get(i), codebuf, funcbuf, initbuf, null );
      }

      Vector signal2 = new Vector();
      list = xml.child_list( element, &quot;action&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        Object comp1, comp2;
        String comp1name = xml.get_attribute( list.get(i), &quot;comp1name&quot; );
        String comp2name = xml.get_attribute( list.get(i), &quot;comp2name&quot; );
        comp2 = xml.child( element, comp2name );
        signal2.add( new StringCouple( comp1name, getAbsoluteName(comp2) ) );
      }
        
      list = xml.child_list( element, &quot;pin&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        String name = xml.elementID( list.get(i) );
        Vector method = new Vector();

        for( j = signal2.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal2.get(j) );
          if( name.equals( k.String1 ) ){
            method.add( k.String2 );
            signal2.remove( k );
          }
        }
        for( j = signal.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal.get(j) );
          if( name.equals( k.String1 ) ){
            method.add( k.String2 );
            signal.remove( k );
          }
        }
        compile_CPP( list.get(i), clsbuf, funcbuf, initbuf, method );
      }
         
      Vector statemethod = new Vector();
      list = xml.child_list( element, &quot;operation&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        Vector method= new Vector();
        Object op = list.get(i);
        String name = xml.elementID( op );

        if( parseInt( xml.get_attribute( op, &quot;inpinlinkcount&quot; ) ) == 0 ){
          statemethod.add( new StringCouple( xml.get_attribute( op, &quot;state1&quot; ), name + &quot;_&quot; + xml.get_attribute( op, &quot;inpintext&quot; ) ) );
        }

        for( j = signal2.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal2.get(j) );
          if( name.equals( k.String1 ) ){
            method.add( k.String2 );
            signal2.remove( k );
          }
        }
        compile_CPP( op, clsbuf, funcbuf, initbuf, method );
      }

      list = xml.child_list( element, &quot;state&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        compile_CPP( list.get(i), clsbuf, funcbuf, initbuf, statemethod );
      }

      clsbuf.append( codebuf.toString() + &quot;\n}\n&quot; );
      initbuf.append( getAbsoluteName( element ) + &quot;::_SINIT();\n&quot; );
    }

    else if( element_name.equals(&quot;pin&quot;) ){
      boolean transition = xml.element_name( xml.parent_element( element ) ).equals(&quot;aobject&quot;);
      String method = xml.get_attribute( element, &quot;text&quot; );
      String signature = getsignature( method );
      clsbuf.append( &quot;void &quot; + method + &quot;;\n&quot; );
      funcbuf.append( &quot;void &quot; + getAbsoluteName( element ) + &quot;{\n&quot; );
      if(transition) funcbuf.append(&quot;STATE2 = STATE;\n&quot;);
      for( j = 0; j &lt; signal.size(); j++ ){
        funcbuf.append( getbase( (String)( signal.get(j) ) ) + &quot;(&quot; + signature + &quot;);\n&quot; );
      }
      funcbuf.append( &quot;}\n&quot; );
    }

    else if( element_name.equals(&quot;operation&quot; ) ){
      boolean transition = xml.element_name( xml.parent_element( element ) ).equals(&quot;aobject&quot;);
      int inpinlinkcount = parseInt( xml.get_attribute( element, &quot;inpinlinkcount&quot; ) );
      String outpin = xml.get_attribute( element, &quot;outpintext&quot; );
      String signature = getsignature( outpin );
      String description = xml.get_attribute( element, &quot;description&quot; );
      clsbuf.append( &quot;void &quot; + comp_name + &quot;_&quot; + xml.get_attribute( element, &quot;inpintext&quot; ) + &quot;;\n&quot; );
//      funcbuf.append( &quot;\n/*\n&quot; + description + &quot;\n*/\n&quot; );
      funcbuf.append( &quot;void &quot; + getAbsoluteName( element ) + &quot;{\n&quot; );
      if( signal.size() &gt; 0 ){
        funcbuf.append( getdeclare( outpin ) );
      }
      if( transition &amp;&amp; ( inpinlinkcount != 0 ) ){
         funcbuf.append( &quot;if( STATE2 != &quot; +
         xml.child( xml.parent_element( element ), xml.get_attribute( element, &quot;state1&quot; ) ).hashCode()
         + &quot; ) return;\n&quot; );
      }

      String code = xml.get_attribute( element, &quot;codetext&quot; );
      funcbuf.append( code + &quot;\n&quot; );

      for( j = 0; j &lt; signal.size(); j++ ){
        funcbuf.append( getbase( (String)( signal.get(j) ) ) + &quot;(&quot; + signature + &quot;);\n&quot; );
      }
      if(transition) {
        funcbuf.append(
          &quot;\n// &quot;
        + xml.get_attribute( xml.child( xml.parent_element( element ), xml.get_attribute( element, &quot;state2&quot; ) ), &quot;text&quot; )
        + &quot; に遷移する\n&quot;
        + getAbsoluteName( xml.parent_element( element ) ) + &quot;::&quot; + xml.get_attribute( element, &quot;state2&quot; ) + &quot;();\n&quot;
        );
      }
      funcbuf.append( &quot;}\n&quot; );
    }

    else if( element_name.equals(&quot;state&quot;) ){
      clsbuf.append( &quot;void &quot; + xml.elementID( element ) + &quot;();\n&quot; );
      funcbuf.append(
        &quot;\n// &quot; + xml.get_attribute( element, &quot;text&quot; ) + &quot;\n&quot;
      + &quot;void &quot; + getAbsoluteName( element ) + &quot;(){\nSTATE = &quot; + element.hashCode() + &quot;;\n&quot;
      );
      for( j = signal.size()-1; j &gt;= 0; j-- ){
        StringCouple k = (StringCouple)( signal.get(j) );
        if( k.String1.equals( comp_name ) ){
          funcbuf.append( k.String2 + &quot;;\n&quot; );
          signal.remove( k );
        }
      }
      funcbuf.append( &quot;}\n&quot; );
    }

    else{
      reportError( &quot;can\&apos;t compile for &quot; + element_name + &quot;\n&quot; );
    }

  }

</codetext>
</codeclip>
<codeclip>
<ID>_C55</ID>
<x0>262</x0>
<y0>112</y0>
<width>189</width>
<height>19</height>
<codetext>  // javaプログラムを作成する
  public String compile_JAVA( Object element, boolean isRoot, Vector signal ){

dprint(&quot;compile java\n&quot;);

    int i, j;
    Vector list;

    StringBuffer javatext = new StringBuffer(&quot;&quot;); 
    String element_name = xml.element_name( element );
    String comp_name = xml.elementID( element );

    if( element_name.equals(&quot;xobject&quot;) ){
      StringBuffer javaconst = new StringBuffer(&quot;&quot;);
      String cls = xml.get_attribute( element, &quot;objectname&quot; );
      javatext.append( &quot;class &quot; + cls + &quot;{\n&quot; );
      if( isRoot ){
        javaconst.append( cls + &quot;( ){\n&quot; );
      }
      else{
        String percls =  xml.get_attribute( xml.parent_element( element ), &quot;objectname&quot; );
        javatext.append( percls + &quot; parent;\n&quot; );
        javaconst.append( cls + &quot;( &quot; + percls + &quot; pnt ){\n parent = pnt;\n&quot;);
      }

      list = xml.child_list( element, &quot;codeclip&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        javatext.append( compile_JAVA( list.get(i), false, null ) );
      }

      Vector signal2 = new Vector();
      list = xml.child_list( element, &quot;relation&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        Object pin1, pin2;
        String pin1name = xml.get_attribute( list.get(i), &quot;pin1name&quot; );
        String pin2name = xml.get_attribute( list.get(i), &quot;pin2name&quot; );
        String s1 = &quot;&quot;;
        if( pin1name.charAt( pin1name.length()-1 ) == &apos;)&apos; ){ // pin1 is pinlabel
          pin1 = xml.child( xml.child( element, getbase( pin1name ) ), getsignature( pin1name ) );
          s1 = &quot;parent.&quot;;
        }
        else{
          pin1 = xml.child( element, pin1name );
        }
        String s2 = &quot;&quot;;
        if( pin2name.charAt( pin2name.length()-1 ) == &apos;)&apos; ){  // pin2 is pinlabel
          Object base = xml.child( element, getbase( pin2name ) );
          pin2 = xml.child( base, getsignature( pin2name ) );
          s2 = &quot;I&quot; + xml.get_attribute( base, &quot;objectname&quot; ) + &quot;.&quot;;
        }
        else{
          pin2 = xml.child( element, pin2name );             // pin2 is pin or operation
          if( xml.element_name( pin2 ).equals(&quot;operation&quot;) ) s2 = pin2name + &quot;_&quot;; 
        }
        String method2 = &quot;&quot;;
        if( xml.element_name( pin2 ).equals( &quot;pin&quot;) )            method2 = xml.get_attribute( pin2, &quot;text&quot; );
        else if( xml.element_name( pin2 ).equals( &quot;operation&quot;) ) method2 = xml.get_attribute( pin2, &quot;inpintext&quot; );
        signal2.add( new StringCouple( pin1name, s1 + s2 + method2 ) );
      }
        
      list = xml.child_list( element, &quot;pin&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        String name = xml.elementID( list.get(i) );
        Vector method= new Vector();

        for( j = signal2.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal2.get(j) );
          if( name.equals( k.String1 ) ){
            method.add( k.String2 );
            signal2.remove( k );
          }
        }
        for( j = signal.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal.get(j) );
          if( name.equals( k.String1 ) ){
            method.add( k.String2 );
            signal.remove( k );
          }
        }
        javatext.append( compile_JAVA( list.get(i), false, method ) );
      }
       
      list = xml.child_list( element, &quot;operation&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        String name = xml.elementID( list.get(i) );
        Vector method= new Vector();

        for( j = signal2.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal2.get(j) );
          if( name.equals( k.String1 ) ){
            method.add( k.String2 );
            signal2.remove( k );
          }
        }
        javatext.append( compile_JAVA( list.get(i), false, method ) );
      }

      list = xml.child_list( element, &quot;aobject&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        String name = xml.elementID( list.get(i) );
        Vector method= new Vector();
        for( j = signal2.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal2.get(j) );
          if( ( k.String1.charAt( k.String1.length()-1 ) == &apos;)&apos; ) &amp;&amp; name.equals( getbase( k.String1 ) ) ){
            method.add( new StringCouple( getsignature( k.String1 ), k.String2 ) );
            signal2.remove( k );
          }
        }
        String xcls = xml.get_attribute( list.get(i), &quot;objectname&quot; );
        javaconst.append( &quot;I&quot; + xcls + &quot; = new &quot; + xcls + &quot;( this );\n&quot; );
        javatext.append( xcls + &quot; I&quot; + xcls + &quot;;\n&quot; + compile_JAVA( list.get(i), false, method ) );
      }

      list = xml.child_list( element, &quot;xobject&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        String name = xml.elementID( list.get(i) );
        Vector method= new Vector();
        for( j = signal2.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal2.get(j) );
          if( ( k.String1.charAt( k.String1.length()-1 ) == &apos;)&apos; ) &amp;&amp; name.equals( getbase( k.String1 ) ) ){
            method.add( new StringCouple( getsignature( k.String1 ), k.String2 ) );
            signal2.remove( k );
          }
        }
        String xcls = xml.get_attribute( list.get(i), &quot;objectname&quot; );
        javaconst.append( &quot;I&quot; + xcls + &quot; = new &quot; + xcls + &quot;( this );\n&quot; );
        javatext.append( xcls + &quot; I&quot; + xcls + &quot;;\n&quot; + compile_JAVA( list.get(i), false, method ) );
      }
         
      javatext.append( javaconst.toString() );
      javatext.append( &quot;\n}\n}\n&quot; );
      return( javatext.toString() );
    }


    else if( element_name.equals(&quot;aobject&quot;) ){
      StringBuffer javaconst = new StringBuffer(&quot;&quot;);
      String cls = xml.get_attribute( element, &quot;objectname&quot; );
      javatext.append( &quot;class &quot; + cls + &quot;{\nint STATE, STATE2;\n&quot; );
      if( isRoot ){
        javaconst.append( cls + &quot;( ){\n&quot; );
      }
      else{
        String percls =  xml.get_attribute( xml.parent_element( element ), &quot;objectname&quot; );
        javatext.append( percls + &quot; parent;\n&quot; );
        javaconst.append( cls + &quot;( &quot; + percls + &quot; pnt ){\n parent = pnt;\n&quot;);
      }

      list = xml.child_list( element, &quot;codeclip&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        javatext.append( compile_JAVA( list.get(i), false, null ) );
      }

      Vector signal2 = new Vector();
      list = xml.child_list( element, &quot;action&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        Object comp1, comp2;
        String comp1name = xml.get_attribute( list.get(i), &quot;comp1name&quot; );
        String comp2name = xml.get_attribute( list.get(i), &quot;comp2name&quot; );
        comp1 = xml.child( element, comp1name );
        comp2 = xml.child( element, comp2name );
        String method2 = &quot;&quot;;
        if( xml.element_name( comp2 ).equals(&quot;pin&quot;) )            method2 = xml.get_attribute( comp2, &quot;text&quot; );
        else if( xml.element_name( comp2 ).equals(&quot;operation&quot;) ) method2 = comp2name + &quot;_&quot; + xml.get_attribute( comp2, &quot;inpintext&quot; );
        signal2.add( new StringCouple( comp1name, method2 ) );
      }
        
      list = xml.child_list( element, &quot;pin&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        String name = xml.elementID( list.get(i) );
        Vector method = new Vector();

        for( j = signal2.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal2.get(j) );
          if( name.equals( k.String1 ) ){
            method.add( k.String2 );
            signal2.remove( k );
          }
        }
        for( j = signal.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal.get(j) );
          if( name.equals( k.String1 ) ){
            method.add( k.String2 );
            signal.remove( k );
          }
        }
        javatext.append( compile_JAVA( list.get(i), false, method ) );
      }
         
      Vector statemethod = new Vector();
      list = xml.child_list( element, &quot;operation&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        Vector method= new Vector();
        Object op = list.get(i);
        String name = xml.elementID( op );

        if( parseInt( xml.get_attribute( op, &quot;inpinlinkcount&quot; ) ) == 0 ){
          xml.set_attribute( op, &quot;inpintext&quot;, &quot;in()&quot; );
          statemethod.add( new StringCouple( xml.get_attribute( op, &quot;state1&quot; ), name + &quot;_in()&quot;  ) );
        }

        for( j = signal2.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal2.get(j) );
          if( name.equals( k.String1 ) ){
            method.add( k.String2 );
            signal2.remove( k );
          }
        }

        javatext.append( compile_JAVA( op, false, method ) );
      }

      list = xml.child_list( element, &quot;state&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        javatext.append( compile_JAVA( list.get(i), false, statemethod ) );
      }

      javatext.append( javaconst.toString() );
      javatext.append( &quot;_SINIT();\n}\n}\n&quot; );
      return( javatext.toString() );
    }

    else if( element_name.equals(&quot;codeclip&quot;) ){
      return( xml.get_attribute( element, &quot;codetext&quot; ) + &quot;\n&quot; );
    }

    else if( element_name.equals(&quot;pin&quot;) ){
      boolean transition = xml.element_name( xml.parent_element( element ) ).equals(&quot;aobject&quot;);
      String method = xml.get_attribute( element, &quot;text&quot; );
      String signature = getsignature( method );
      javatext.append( &quot;public void &quot; + method + &quot;{\n&quot; );
      if(transition) javatext.append(&quot;STATE2 = STATE;\n&quot;);
      for( j = 0; j &lt; signal.size(); j++ ){
        javatext.append( getbase( (String)( signal.get(j) ) ) + &quot;(&quot; + signature + &quot;);\n&quot; );
      }
      javatext.append( &quot;}\n&quot; );
      return( javatext.toString() );
    }

    else if( element_name.equals(&quot;operation&quot; ) ){
      boolean transition = xml.element_name( xml.parent_element( element ) ).equals(&quot;aobject&quot;);
      int inpinlinkcount = parseInt( xml.get_attribute( element, &quot;inpinlinkcount&quot; ) );
      String outpin = xml.get_attribute( element, &quot;outpintext&quot; );
      String signature = getsignature( outpin );
      String description = xml.get_attribute( element, &quot;description&quot; );
//      javatext.append( &quot;\n/*\n&quot; + description + &quot;\n*/\n&quot; );
      javatext.append( &quot;private void &quot; + comp_name + &quot;_&quot; + xml.get_attribute( element, &quot;inpintext&quot; ) + &quot;{\n&quot; );
      if( signal.size() &gt; 0 ){
        javatext.append( getdeclare( outpin ) );
      }
      if( transition &amp;&amp; ( inpinlinkcount != 0 ) ){
         javatext.append( &quot;if( STATE2 != &quot; +
         xml.child( xml.parent_element( element ), xml.get_attribute( element, &quot;state1&quot; ) ).hashCode()
         + &quot; ) return;\n&quot; );
      }

      String code = xml.get_attribute( element, &quot;codetext&quot; );
      
      javatext.append( code + &quot;\n&quot; );
      for( j = 0; j &lt; signal.size(); j++ ){
        javatext.append( getbase( (String)( signal.get(j) ) ) + &quot;(&quot; + signature + &quot;);\n&quot; );
      }
      if(transition){
        javatext.append(
          &quot;\n// &quot;
        + xml.get_attribute( xml.child( xml.parent_element( element ), xml.get_attribute( element, &quot;state2&quot; ) ), &quot;text&quot; )
        + &quot; に遷移する\n&quot; 
        +  xml.get_attribute( element, &quot;state2&quot; ) + &quot;();\n&quot;
        );
      }
      javatext.append( &quot;}\n&quot; );
      return( javatext.toString() );
    }

    else if( element_name.equals(&quot;state&quot;) ){
      javatext.append(
        &quot;\n// &quot; + xml.get_attribute( element, &quot;text&quot; ) + &quot;\n&quot;
      + &quot;private void &quot; + comp_name + &quot;(){\nSTATE = &quot; + element.hashCode() + &quot;;\n&quot;
      );
      for( j = signal.size()-1; j &gt;= 0; j-- ){
        StringCouple k = (StringCouple)( signal.get(j) );
        if( k.String1.equals( comp_name ) ){
          javatext.append( k.String2 + &quot;;\n&quot; );
          signal.remove( k );
        }
      }
      javatext.append( &quot;}\n&quot; );
      return( javatext.toString() );
    }

    else{
      reportError( &quot;can\&apos;t compile for &quot; + element_name + &quot;\n&quot; );
      return( &quot;&quot; );
    }

  }

</codetext>
</codeclip>
<codeclip>
<ID>_C56</ID>
<x0>261</x0>
<y0>137</y0>
<width>198</width>
<height>19</height>
<codetext>  // Basicプログラムを作成する
  public void compile_BASIC( Object element, StringBuffer clsbuf, StringBuffer funcbuf, StringBuffer initbuf, Vector signal ){

dprint(&quot;compile basic\n&quot;);

    int i, j;
    Vector list;

    String element_name = xml.element_name( element );
    String comp_name = xml.elementID( element );

    if( element_name.equals(&quot;codeclip&quot;) ){
      String parent = getAbsoluteName2( xml.parent_element( element ) );
      String buf = xml.get_attribute( element, &quot;codetext&quot; ) + &quot;\n&quot;;
      buf = Xreplace( buf, &quot;%&quot;, parent );
      clsbuf.append( buf );
    }

    else if( element_name.equals(&quot;xobject&quot;) ){
      StringBuffer codebuf = new StringBuffer(&quot;&quot;); 
      String cls = xml.get_attribute( element, &quot;objectname&quot; );
//      clsbuf.append( &quot;&apos; xobject &quot; + cls + &quot; {\n&quot; );

      list = xml.child_list( element, &quot;codeclip&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        compile_BASIC( list.get(i), clsbuf, funcbuf, initbuf, null );// codebuf-&gt;clsbuf
      }

      Vector signal2 = new Vector();
      list = xml.child_list( element, &quot;relation&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        Object pin1, pin2;
        String pin1name = xml.get_attribute( list.get(i), &quot;pin1name&quot; );
        String pin2name = xml.get_attribute( list.get(i), &quot;pin2name&quot; );

        if( pin2name.charAt( pin2name.length()-1 ) == &apos;)&apos; ){  // pin2 is pinlabel
          Object base = xml.child( element, getbase( pin2name ) );
          pin2 = xml.child( base, getsignature( pin2name ) );
        }
        else{
          pin2 = xml.child( element, pin2name );             // pin2 is pin or operation
        }

        signal2.add( new StringCouple( pin1name, getAbsoluteName2( pin2 ) ) );
      }
        
      list = xml.child_list( element, &quot;pin&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        String name = xml.elementID( list.get(i) );
        Vector method= new Vector();

        for( j = signal2.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal2.get(j) );
          if( name.equals( k.String1 ) ){
            method.add( k.String2 );
            signal2.remove( k );
          }
        }
        for( j = signal.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal.get(j) );
          if( name.equals( k.String1 ) ){
            method.add( k.String2 );
            signal.remove( k );
          }
        }
        compile_BASIC( list.get(i), clsbuf, funcbuf, initbuf, method );
      }
       
      list = xml.child_list( element, &quot;operation&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        String name = xml.elementID( list.get(i) );
        Vector method= new Vector();

        for( j = signal2.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal2.get(j) );
          if( name.equals( k.String1 ) ){
            method.add( k.String2 );
            signal2.remove( k );
          }
        }
        compile_BASIC( list.get(i), clsbuf, funcbuf, initbuf, method );
      }

      list = xml.child_list( element, &quot;aobject&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        String name = xml.elementID( list.get(i) );
        Vector method= new Vector();
        for( j = signal2.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal2.get(j) );
          if( ( k.String1.charAt( k.String1.length()-1 ) == &apos;)&apos; ) &amp;&amp; name.equals( getbase( k.String1 ) ) ){
            method.add( new StringCouple( getsignature( k.String1 ), k.String2 ) );
            signal2.remove( k );
          }
        }
        compile_BASIC( list.get(i), clsbuf, funcbuf, initbuf, method );
      }

      list = xml.child_list( element, &quot;xobject&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        String name = xml.elementID( list.get(i) );
        Vector method= new Vector();
        for( j = signal2.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal2.get(j) );
          if( ( k.String1.charAt( k.String1.length()-1 ) == &apos;)&apos; ) &amp;&amp; name.equals( getbase( k.String1 ) ) ){
            method.add( new StringCouple( getsignature( k.String1 ), k.String2 ) );
            signal2.remove( k );
          }
        }
        compile_BASIC( list.get(i), clsbuf, funcbuf, initbuf, method );
      }
         
    }

    else if( element_name.equals(&quot;aobject&quot;) ){
      StringBuffer codebuf = new StringBuffer(&quot;&quot;); 
      String cls = xml.get_attribute( element, &quot;objectname&quot; );

      list = xml.child_list( element, &quot;codeclip&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        compile_BASIC( list.get(i), codebuf, funcbuf, initbuf, null );
      }

      Vector signal2 = new Vector();
      list = xml.child_list( element, &quot;action&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        Object comp1, comp2;
        String comp1name = xml.get_attribute( list.get(i), &quot;comp1name&quot; );
        String comp2name = xml.get_attribute( list.get(i), &quot;comp2name&quot; );
        comp2 = xml.child( element, comp2name );
        signal2.add( new StringCouple( comp1name, getAbsoluteName2(comp2) ) );
      }
        
      list = xml.child_list( element, &quot;pin&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        String name = xml.elementID( list.get(i) );
        Vector method = new Vector();

        for( j = signal2.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal2.get(j) );
          if( name.equals( k.String1 ) ){
            method.add( k.String2 );
            signal2.remove( k );
          }
        }
        for( j = signal.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal.get(j) );
          if( name.equals( k.String1 ) ){
            method.add( k.String2 );
            signal.remove( k );
          }
        }
        compile_BASIC( list.get(i), clsbuf, funcbuf, initbuf, method );
      }
         
      Vector statemethod = new Vector();
      list = xml.child_list( element, &quot;operation&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        Vector method= new Vector();
        Object op = list.get(i);

        if( parseInt( xml.get_attribute( op, &quot;inpinlinkcount&quot; ) ) == 0 ){
          statemethod.add( new StringCouple( xml.get_attribute( op, &quot;state1&quot; ), getAbsoluteName2( op ) ) );
        }

        String name = xml.elementID( op );
        for( j = signal2.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal2.get(j) );
          if( name.equals( k.String1 ) ){
            method.add( k.String2 );
            signal2.remove( k );
          }
        }
        compile_BASIC( op, clsbuf, funcbuf, initbuf, method );
      }

      list = xml.child_list( element, &quot;state&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        compile_BASIC( list.get(i), clsbuf, funcbuf, initbuf, statemethod );
      }

      initbuf.append( &quot;gosub @_SINIT&quot;+getAbsoluteName2( element ) +&quot;\n&quot; );
    }

    else if( element_name.equals(&quot;pin&quot;) ){
      String parent = getAbsoluteName2( xml.parent_element( element ) );
      String path = getAbsoluteName2( element );
      String base = getbase( path );
      String signature = getsignature( path );
      boolean transition = xml.element_name( xml.parent_element( element ) ).equals(&quot;aobject&quot;);
      String buf = &quot;@&quot;+base +&quot;:\n&quot;;
      if(transition) buf =buf + &quot;STATE2&quot; + parent + &quot;=STATE&quot; + parent +&quot;\n&quot;;
      for( j = 0; j &lt; signal.size(); j++ ){
        StringTokenizer tk1 = new StringTokenizer( signature, &quot;,&quot;  );
        StringTokenizer tk2 = new StringTokenizer( getsignature( (String)( signal.get(j) ) ), &quot;,&quot;  );
        String base2 = getbase( (String)( signal.get(j) ) );
        while( tk1.hasMoreTokens() &amp;&amp;  tk2.hasMoreTokens() ){
          buf = buf + Xreplace( tk2.nextToken(), &quot;%&quot;, base2 ) +&quot;=&quot;+ Xreplace( tk1.nextToken(), &quot;%&quot;, base ) +&quot;\n&quot;;
	    }
        buf = buf + &quot;gosub @&quot;+ base2+&quot;\n&quot;;
      }
      buf = buf + &quot;return\n&quot;;
      funcbuf.append( buf );
    }

    else if( element_name.equals(&quot;operation&quot; ) ){
      String parent = getAbsoluteName2( xml.parent_element( element ) );
      String path = getAbsoluteName2( element );
      String base = getbase( path );
      String outpin = xml.get_attribute( element, &quot;outpintext&quot; );
      String signature = getsignature( outpin );
      String code = xml.get_attribute( element, &quot;codetext&quot; );

      boolean transition = xml.element_name( xml.parent_element( element ) ).equals(&quot;aobject&quot;);
      int inpinlinkcount = parseInt( xml.get_attribute( element, &quot;inpinlinkcount&quot; ) );
      String buf = &quot;@&quot;+base +&quot;:\n&quot;;
      if( transition &amp;&amp; ( inpinlinkcount != 0 ) ){
         buf = buf +  &quot;if  STATE2&quot; + parent + &quot;&lt;&gt;&quot; +
         xml.child( xml.parent_element( element ), xml.get_attribute( element, &quot;state1&quot; ) ).hashCode()
         + &quot; then  return\n&quot;;
      }
      buf = buf + code;
      for( j = 0; j &lt; signal.size(); j++ ){
        StringTokenizer tk1 = new StringTokenizer( signature, &quot;,&quot;  );
        StringTokenizer tk2 = new StringTokenizer( getsignature( (String)( signal.get(j) ) ), &quot;,&quot;  );
        String base2 = getbase( (String)( signal.get(j) ) );
        while( tk1.hasMoreTokens() ){
          buf = buf + Xreplace( tk2.nextToken(), &quot;%&quot;, base2 ) +&quot;=&quot;+ Xreplace( tk1.nextToken(), &quot;%&quot;, base ) +&quot;\n&quot;;
	    }
        buf = buf + &quot;gosub @&quot;+ base2+&quot;\n&quot;;
      }
      if(transition)  buf = buf + &quot;gosub @&quot;+ xml.get_attribute( element, &quot;state2&quot; ) + parent + &quot;\n&quot;;
      buf = buf + &quot;return\n&quot;;
      buf = Xreplace( buf, &quot;%&quot;, base );

      funcbuf.append( buf );
    }

    else if( element_name.equals(&quot;state&quot;) ){
      String parent = getAbsoluteName2( xml.parent_element( element ) );
      String base = getAbsoluteName2( element );
      String buf = &quot;@&quot;+base + parent +&quot;:\n&quot;;
      buf= buf + &quot;STATE&quot; + parent + &quot;=&quot; + element.hashCode() + &quot;\n&quot;;
      for( j = signal.size()-1; j &gt;= 0; j-- ){
        StringCouple k = (StringCouple)( signal.get(j) );
        if( k.String1.equals( comp_name ) ){
          buf = buf + &quot;gosub @&quot;+ getbase( k.String2 ) +&quot;\n&quot;;
          signal.remove( k );
        }
      }
      buf = buf + &quot;return\n&quot;;
      funcbuf.append( buf );
    }

    else{
      reportError( &quot;can\&apos;t compile for &quot; + element_name + &quot;\n&quot; );
    }

  }

</codetext>
</codeclip>
<codeclip>
<ID>_C57</ID>
<x0>261</x0>
<y0>161</y0>
<width>199</width>
<height>18</height>
<codetext>  // C言語プログラムを作成する
  public void compile_C( Object element, StringBuffer clsbuf, StringBuffer funcbuf, StringBuffer initbuf, Vector signal ){

dprint(&quot;compile c\n&quot;);

    int i, j;
    Vector list;

    String element_name = xml.element_name( element );
    String comp_name = xml.elementID( element );

    if( element_name.equals(&quot;codeclip&quot;) ){
      String buf = xml.get_attribute( element, &quot;codetext&quot; ) + &quot;\n&quot;;
      clsbuf.append( buf );
    }

    else if( element_name.equals(&quot;xobject&quot;) ){
      StringBuffer codebuf = new StringBuffer(&quot;&quot;); 
      String cls = xml.get_attribute( element, &quot;objectname&quot; );
//      clsbuf.append( &quot;&apos; xobject &quot; + cls + &quot; {\n&quot; );

      list = xml.child_list( element, &quot;codeclip&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        compile_C( list.get(i), clsbuf, funcbuf, initbuf, null );// codebuf-&gt;clsbuf
      }

      Vector signal2 = new Vector();
      list = xml.child_list( element, &quot;relation&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        Object pin1, pin2;
        String pin1name = xml.get_attribute( list.get(i), &quot;pin1name&quot; );
        String pin2name = xml.get_attribute( list.get(i), &quot;pin2name&quot; );

        if( pin2name.charAt( pin2name.length()-1 ) == &apos;)&apos; ){  // pin2 is pinlabel
          Object base = xml.child( element, getbase( pin2name ) );
          pin2 = xml.child( base, getsignature( pin2name ) );
        }
        else{
          pin2 = xml.child( element, pin2name );             // pin2 is pin or operation
        }

        signal2.add( new StringCouple( pin1name, getAbsoluteName2( pin2 ) ) );
      }
        
      list = xml.child_list( element, &quot;pin&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        String name = xml.elementID( list.get(i) );
        Vector method= new Vector();

        for( j = signal2.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal2.get(j) );
          if( name.equals( k.String1 ) ){
            method.add( k.String2 );
            signal2.remove( k );
          }
        }
        for( j = signal.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal.get(j) );
          if( name.equals( k.String1 ) ){
            method.add( k.String2 );
            signal.remove( k );
          }
        }
        compile_C( list.get(i), clsbuf, funcbuf, initbuf, method );
      }
       
      list = xml.child_list( element, &quot;operation&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        String name = xml.elementID( list.get(i) );
        Vector method= new Vector();

        for( j = signal2.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal2.get(j) );
          if( name.equals( k.String1 ) ){
            method.add( k.String2 );
            signal2.remove( k );
          }
        }
        compile_C( list.get(i), clsbuf, funcbuf, initbuf, method );
      }

      list = xml.child_list( element, &quot;aobject&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        String name = xml.elementID( list.get(i) );
        Vector method= new Vector();
        for( j = signal2.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal2.get(j) );
          if( ( k.String1.charAt( k.String1.length()-1 ) == &apos;)&apos; ) &amp;&amp; name.equals( getbase( k.String1 ) ) ){
            method.add( new StringCouple( getsignature( k.String1 ), k.String2 ) );
            signal2.remove( k );
          }
        }
        compile_C( list.get(i), clsbuf, funcbuf, initbuf, method );
      }

      list = xml.child_list( element, &quot;xobject&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        String name = xml.elementID( list.get(i) );
        Vector method= new Vector();
        for( j = signal2.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal2.get(j) );
          if( ( k.String1.charAt( k.String1.length()-1 ) == &apos;)&apos; ) &amp;&amp; name.equals( getbase( k.String1 ) ) ){
            method.add( new StringCouple( getsignature( k.String1 ), k.String2 ) );
            signal2.remove( k );
          }
        }
        compile_C( list.get(i), clsbuf, funcbuf, initbuf, method );
      }
         
    }

    else if( element_name.equals(&quot;aobject&quot;) ){
      StringBuffer codebuf = new StringBuffer(&quot;&quot;); 
      String cls = xml.get_attribute( element, &quot;objectname&quot; );
      String id = getAbsoluteName2( element );
      clsbuf.append( &quot;int STATE&quot; + id + &quot;, STATE2&quot; + id + &quot;;\n&quot; );

      list = xml.child_list( element, &quot;codeclip&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        compile_C( list.get(i), codebuf, funcbuf, initbuf, null );
      }

      Vector signal2 = new Vector();
      list = xml.child_list( element, &quot;action&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        Object comp1, comp2;
        String comp1name = xml.get_attribute( list.get(i), &quot;comp1name&quot; );
        String comp2name = xml.get_attribute( list.get(i), &quot;comp2name&quot; );
        comp2 = xml.child( element, comp2name );
        signal2.add( new StringCouple( comp1name, getAbsoluteName2(comp2) ) );
      }
        
      list = xml.child_list( element, &quot;pin&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        String name = xml.elementID( list.get(i) );
        Vector method = new Vector();

        for( j = signal2.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal2.get(j) );
          if( name.equals( k.String1 ) ){
            method.add( k.String2 );
            signal2.remove( k );
          }
        }
        for( j = signal.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal.get(j) );
          if( name.equals( k.String1 ) ){
            method.add( k.String2 );
            signal.remove( k );
          }
        }
        compile_C( list.get(i), clsbuf, funcbuf, initbuf, method );
      }
         
      Vector statemethod = new Vector();
      list = xml.child_list( element, &quot;operation&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        Vector method= new Vector();
        Object op = list.get(i);

        if( parseInt( xml.get_attribute( op, &quot;inpinlinkcount&quot; ) ) == 0 ){
          statemethod.add( new StringCouple( xml.get_attribute( op, &quot;state1&quot; ), getAbsoluteName2( op ) ) );
        }

        String name = xml.elementID( op );
        for( j = signal2.size()-1; j &gt;= 0; j-- ){
          StringCouple k = (StringCouple)( signal2.get(j) );
          if( name.equals( k.String1 ) ){
            method.add( k.String2 );
            signal2.remove( k );
          }
        }
        compile_C( op, clsbuf, funcbuf, initbuf, method );
      }

      list = xml.child_list( element, &quot;state&quot; );
      for( i = 0; i &lt; list.size(); i++ ){
        compile_C( list.get(i), clsbuf, funcbuf, initbuf, statemethod );
      }

      initbuf.append( &quot;_SINIT&quot; + id +&quot;();\n&quot; );
    }

    else if( element_name.equals(&quot;pin&quot;) ){
      String parent = getAbsoluteName2( xml.parent_element( element ) );
      String path = getAbsoluteName2( element );
      String signature = getsignature( path );
      boolean transition = xml.element_name( xml.parent_element( element ) ).equals(&quot;aobject&quot;);
      String buf = &quot;void &quot; + path + &quot;{\n&quot;;

      if(transition) buf = buf + &quot;STATE2&quot; + parent + &quot; = STATE&quot; + parent +&quot;;\n&quot;;
      for( j = 0; j &lt; signal.size(); j++ ){
        buf = buf + getbase( (String)( signal.get(j) ) ) + &quot;(&quot; + signature + &quot;);\n&quot;;
      }
      buf = buf + &quot;}\n&quot;;
      funcbuf.append( buf );
      clsbuf.append( &quot;void &quot; + path + &quot;;\n&quot; );
    }

    else if( element_name.equals(&quot;operation&quot; ) ){
      String parent = getAbsoluteName2( xml.parent_element( element ) );
      String path = getAbsoluteName2( element );
      String base = getbase( path );
      String outpin = xml.get_attribute( element, &quot;outpintext&quot; );
      String signature = getsignature( outpin );
      String code = xml.get_attribute( element, &quot;codetext&quot; );

      boolean transition = xml.element_name( xml.parent_element( element ) ).equals(&quot;aobject&quot;);
      int inpinlinkcount = parseInt( xml.get_attribute( element, &quot;inpinlinkcount&quot; ) );
      String buf = &quot;void &quot; + path + &quot;{\n&quot;;
      if( signal.size() &gt; 0 ){
        buf = buf + getdeclare( outpin );
      }
      if( transition &amp;&amp; ( inpinlinkcount != 0 ) ){
         buf = buf +  &quot;if( STATE2&quot; + parent + &quot; != &quot; +
         xml.child( xml.parent_element( element ), xml.get_attribute( element, &quot;state1&quot; ) ).hashCode()
         + &quot; )  return;\n&quot;;
      }
      buf = buf + code;
      for( j = 0; j &lt; signal.size(); j++ ){
        buf = buf + getbase( (String)( signal.get(j) ) ) + &quot;(&quot; + signature + &quot;);\n&quot;;
      }
      if(transition){
        buf = buf + &quot;\n/* &quot;
        + xml.get_attribute( xml.child( xml.parent_element( element ), xml.get_attribute( element, &quot;state2&quot; ) ), &quot;text&quot; )
        + &quot; に遷移する */\n&quot;
		+ &quot; &quot;+ xml.get_attribute( element, &quot;state2&quot; ) + parent + &quot;();\n&quot;;
      }
      buf = buf + &quot;}\n&quot;;
      funcbuf.append( buf );
      clsbuf.append( &quot;void &quot;+ path +&quot;;\n&quot; );
    }

    else if( element_name.equals(&quot;state&quot;) ){
      String parent = getAbsoluteName2( xml.parent_element( element ) );
      String base = getAbsoluteName2( element );
      String buf = &quot;\n/* &quot; + xml.get_attribute( element, &quot;text&quot; ) + &quot;*/\nvoid &quot; + base + parent +&quot;(){\n&quot;;
      buf= buf + &quot;STATE&quot; + parent + &quot;=&quot; + element.hashCode() + &quot;;\n&quot;;
      for( j = signal.size()-1; j &gt;= 0; j-- ){
        StringCouple k = (StringCouple)( signal.get(j) );
        if( k.String1.equals( comp_name ) ){
          buf = buf + k.String2 +&quot;;\n&quot;;
          signal.remove( k );
        }
      }
      buf = buf + &quot;}\n&quot;;
      funcbuf.append( buf );
      clsbuf.append( &quot;void &quot; + base + parent +&quot;();\n&quot; );
    }

    else{
      reportError( &quot;can\&apos;t compile for &quot; + element_name + &quot;\n&quot; );
    }

  }

</codetext>
</codeclip>
<codeclip>
<ID>_C58</ID>
<x0>268</x0>
<y0>222</y0>
<width>210</width>
<height>33</height>
<codetext>  //１対の文字列(コンパイルで検索のときに使う)
  class StringCouple{
    String String1;
    String String2;

    StringCouple( String s1, String s2 ){
      String1 = s1;
      String2 = s2;
    }//StringCouple()

  }//~StringCouple


</codetext>
</codeclip>
<codeclip>
<ID>_C60</ID>
<x0>589</x0>
<y0>488</y0>
<width>183</width>
<height>48</height>
<codetext>//オブジェクト図エディタ
  ObjectEditor oedit;
  class ObjectEditor{
    Object element = null;
    int ID_maker= 0;
    XFile loadfile;

//  コンストラクタ
    ObjectEditor(){
      element = null;
      ID_maker =0;
      initialise(0);
    }

//  プログラム初期化
    public void initialise( int typ ){

dprint(&quot;oedit initialise\n&quot;);

      Logout();
      ApplicationType = typ;
      newProject();
      menu_gui = new MenuGUI();
      Login( project );
    }

//  プロジェクトを開く
    public void open( File f ){
      if( f != null ){
        Logout();
        ProjectFile = new XFile(f);
        loadProject();
        menu_gui = new MenuGUI();
        ApplicationType = parseInt( xml.get_attribute( properties, &quot;ApplicationType&quot; ) );
        String s = xml.get_attribute( properties, &quot;scale&quot; );
        scale = ( s == null? 3 : parseInt(s) );
        Login( project );
      }
    }

// プロジェクトを保存する
    public void save(){
      Object celement  = element;
      Logout();
      Login( celement );
      ProjectFile = new XFile( ProjectDir, xml.get_attribute( project, &quot;objectname&quot; ) + &quot;.prj&quot; );
      saveProject();
    }

    // オブジェクトを開く
    public void Login( Object elem ){
      element = elem;       

dprint(&quot;oedit login\n&quot;);

      //内容をロードする
      ID_maker = parseInt( xml.get_attribute( element, &quot;ID_maker&quot; ) );
      oedit_gui.set_objectname( xml.get_attribute( element, &quot;objectname&quot; ) );
       
      //Loginモードでコンポーネントを生成する
      Vector v;
      int i, nn;
       
      // xobject
      v = xml.child_list( element, &quot;xobject&quot; );
      for( i = 0; i &lt; v.size(); i++ ) oedit_gui.add( new xobject( v.get(i) ) );

      // aobject
      v = xml.child_list( element, &quot;aobject&quot; );
      for( i = 0; i &lt; v.size(); i++ ) oedit_gui.add( new aobject( v.get(i) ) );

      // uobject
      v = xml.child_list( element, &quot;operation&quot; );
      for( i = 0; i &lt; v.size(); i++ ) oedit_gui.add( new uobject( v.get(i) ) );

      // pin
      v = xml.child_list( element, &quot;pin&quot; );
      for( i = 0; i &lt; v.size(); i++ ) oedit_gui.add( new pin( v.get(i) ) );

      // codeclip
      v = xml.child_list( element, &quot;codeclip&quot; );
      for( i = 0; i &lt; v.size(); i++ ) oedit_gui.add( new codeclip( v.get(i) ) );
       
      // kjgroup
      v = xml.child_list( element, &quot;KJgroup&quot; );
      for( i = 0; i &lt; v.size(); i++ ) oedit_gui.add( new KJgroup( v.get(i) ) );

      // relation
      v = xml.child_list( element, &quot;relation&quot; );
      for( i = 0; i &lt; v.size(); i++ ){
        Object e = v.get(i);
        String pin1 = xml.get_attribute( e, &quot;pin1name&quot; );
        String pin2 = xml.get_attribute( e, &quot;pin2name&quot; );
        if( get_component( pin1 ) != null &amp;&amp; get_component( pin2 )!= null ){
          oedit_gui.addBack( new relation( e ) );
        }
        else xml.del_element( e );
      }
      oedit_gui.show(&quot;Object Editor &quot; + Application[ApplicationType]);
      sedit_is_active = false;
    }

    //内容をセーブして全てのコンポーネントを消去する
    public void Logout(){
      View v;
      int i;
      int nn;

dprint(&quot;oedit logout\n&quot;);

      if( element == null ) return;
      nn = oedit_gui.get_component_count();
      xml.set_attribute( element, &quot;ID_maker&quot;, &quot;&quot; + ID_maker );
      xml.set_attribute( element, &quot;objectname&quot;, oedit_gui.get_objectname() );
      oedit_gui.set_objectname(&quot;&quot;);

      // コンポーネントをすべてsaveする
      for( i=0; i &lt; nn; i++){
        v = oedit_gui.get_component(i);
        if( v instanceof xobject  )       ( (xobject)v ).save();
        else if( v instanceof aobject  )  ( (aobject)v ).save();
        else if( v instanceof uobject )   ( (uobject)v ).save();
        else if( v instanceof pin  )      ( (pin)v ).save();
        else if( v instanceof codeclip )  ( (codeclip)v ).save();
        else if( v instanceof KJgroup )   ( (KJgroup)v ).save();
        else if( v instanceof relation  ) ( (relation)v ).save();
      }
      oedit_gui.clear();
      element = null;
    }
     
    // クリップボードからxp, yp で指定された位置にオブジェクトを貼り付ける
    public void paste_clipboad( int xp, int yp ){
      Object celement = element;

dprint(&quot;oedit paste clipboad\n&quot;);

      if( xml.element_name( clipboad ).equals(&quot;xobject&quot;) ){
        Object xobj = xml.new_element( element, clipboad, &quot;_X&quot;+ID_maker++);
        xml.set_attribute( xobj, &quot;x0&quot;, &quot;&quot; + xp );
        xml.set_attribute( xobj, &quot;y0&quot;, &quot;&quot; + yp );
      }

      else if( xml.element_name( clipboad ).equals(&quot;aobject&quot;) ){
        Object aobj = xml.new_element( element, clipboad, &quot;_A&quot;+ID_maker++);
        xml.set_attribute( aobj, &quot;x0&quot;, &quot;&quot; + xp );
        xml.set_attribute( aobj, &quot;y0&quot;, &quot;&quot; + yp );
      }

      else if( xml.element_name( clipboad ).equals(&quot;uobject&quot;) ){
        Object op = xml.new_element( element, clipboad, &quot;_O&quot;+ID_maker++);
        xml.set_attribute( op, &quot;x0&quot;, &quot;&quot; + xp );
        xml.set_attribute( op, &quot;y0&quot;, &quot;&quot; + yp );
        xml.set_attribute( op, &quot;state1&quot;, &quot;_SINIT&quot; );
        xml.set_attribute( op, &quot;state2&quot;, &quot;_SINIT&quot; );
        xml.set_attribute( op, &quot;inconnectx0&quot;, &quot;0&quot; );
        xml.set_attribute( op, &quot;inconnecty0&quot;, &quot;30&quot; );
        xml.set_attribute( op, &quot;outconnectx0&quot;, &quot;0&quot; );
        xml.set_attribute( op, &quot;outconnecty0&quot;, &quot;30&quot; );
      }
      
      else if( xml.element_name( clipboad ).equals(&quot;pin&quot;) ){
        Object pi = xml.new_element( element, clipboad, &quot;_P&quot;+ID_maker++);
        xml.set_attribute( pi, &quot;x0&quot;, &quot;&quot; + xp );
        xml.set_attribute( pi, &quot;y0&quot;, &quot;&quot; + yp );
      }

      else if( xml.element_name( clipboad ).equals(&quot;codeclip&quot;) ){
        Object cod = xml.new_element( element, clipboad, &quot;_C&quot;+ID_maker++);
        xml.set_attribute( cod, &quot;x0&quot;, &quot;&quot; + xp );
        xml.set_attribute( cod, &quot;y0&quot;, &quot;&quot; + yp );
      }

      else if( xml.element_name( clipboad ).equals(&quot;KJgroup&quot;) ){
        Object gr = xml.new_element( element, clipboad, &quot;_G&quot;+ID_maker++);
        xml.set_attribute( gr, &quot;x0&quot;, &quot;&quot; + xp );
        xml.set_attribute( gr, &quot;y0&quot;, &quot;&quot; + yp );
      }

      Logout();
      Login( celement );
    }

    // ファイルからxp, yp で指定された位置にオブジェクトを貼り付ける
    public Object paste_file( XFile loadfile, int xp, int yp ){
      Object obj = null;
      Object celement = element;

dprint(&quot;oedit paste file&quot; + loadfile +&quot;\n&quot;);
 
      if( loadfile == null || (!loadfile.is_xml()) ) return( null );

      if( loadfile.is_xobject() ){
        obj = xml.new_element( element, loadfile, &quot;_X&quot;+ID_maker++);
        xml.set_attribute( obj, &quot;x0&quot;, &quot;&quot; + xp );
        xml.set_attribute( obj, &quot;y0&quot;, &quot;&quot; + yp );
      }

      else if( loadfile.is_aobject() ){
        obj = xml.new_element( element, loadfile, &quot;_A&quot;+ID_maker++);
        xml.set_attribute( obj, &quot;x0&quot;, &quot;&quot; + xp );
        xml.set_attribute( obj, &quot;y0&quot;, &quot;&quot; + yp );
      }

      else if( loadfile.is_uobject() ){
        obj = xml.new_element( element, loadfile, &quot;_O&quot;+ID_maker++);
        xml.set_attribute( obj, &quot;x0&quot;, &quot;&quot; + xp );
        xml.set_attribute( obj, &quot;y0&quot;, &quot;&quot; + yp );
        xml.set_attribute( obj, &quot;state1&quot;, &quot;_SINIT&quot; );
        xml.set_attribute( obj, &quot;state2&quot;, &quot;_SINIT&quot; );
        xml.set_attribute( obj, &quot;inconnectx0&quot;, &quot;0&quot; );
        xml.set_attribute( obj, &quot;inconnecty0&quot;, &quot;30&quot; );
        xml.set_attribute( obj, &quot;outconnectx0&quot;, &quot;0&quot; );
        xml.set_attribute( obj, &quot;outconnecty0&quot;, &quot;30&quot; );
      }
      
      else if( loadfile.is_pin() ){
        obj = xml.new_element( element, loadfile, &quot;_P&quot;+ID_maker++);
        xml.set_attribute( obj, &quot;x0&quot;, &quot;&quot; + xp );
        xml.set_attribute( obj, &quot;y0&quot;, &quot;&quot; + yp );
      }

      else if( loadfile.is_codeclip() ){
        obj = xml.new_element( element, loadfile, &quot;_C&quot;+ID_maker++);
        xml.set_attribute( obj, &quot;x0&quot;, &quot;&quot; + xp );
        xml.set_attribute( obj, &quot;y0&quot;, &quot;&quot; + yp );
      }


      else if( loadfile.is_KJgroup() ){
        obj = xml.new_element( element, loadfile, &quot;_G&quot;+ID_maker++);
        xml.set_attribute( obj, &quot;x0&quot;, &quot;&quot; + xp );
        xml.set_attribute( obj, &quot;y0&quot;, &quot;&quot; + yp );
      }

      Logout();
      Login( celement );
      return( obj );
    }

    // 接続を検証する
    public void check_connect(){
      Vector v1 = new Vector();
      View v;
      int i;
      int nn = oedit_gui.get_component_count();
      for( i = 0; i &lt; nn; i++ ){
        v = oedit_gui.get_component(i);
        if( v instanceof relation ) {
          relation r = (relation)v;
          if( get_component(r.pin1name) ==  null || get_component(r.pin2name) == null ) v1.add(r);
        }
      }
      for( i = 0; i &lt; v1.size(); i++ ) ((relation)(v1.get(i))).suicide();
    }

    // 位置・大きさを設定する
    public void resize(){
      int b[] = new int[4];
      int x, y;

dprint(&quot;oedit resize\n&quot;);

      max_width = max_height = 100;
      int nn = oedit_gui.get_component_count();
      for( int i = 0; i &lt; nn; i++){
        View v = oedit_gui.get_component(i);
        if( v instanceof xobject )       ((xobject)v).resize();
        else if( v instanceof aobject )  ((aobject)v).resize();
        else if( v instanceof uobject )  ((uobject)v).resize();
        else if( v instanceof pin )      ((pin)v).resize();
        else if( v instanceof codeclip ) ((codeclip)v).resize();
        else if( v instanceof KJgroup )  ((KJgroup)v).resize();
        getBounds( v, b );
        x = b[0] + b[2];
        y = b[1] + b[3];
        if( x &gt; max_width )  max_width  = x;
        if( y &gt; max_height ) max_height = y;
        
      }
      for( int i = 0; i &lt; nn; i++){
        View v = oedit_gui.get_component(i);
        if( v instanceof relation ) ((relation)v).resize();
      }
      repaintAll();
    }


    //与えられた名前のコンポーネントを返す
    public View get_component( String name ){
      View v;
      int i;

dprint(&quot;oedit get component:&quot;+name+&quot;\n&quot;);

      int nn = oedit_gui.get_component_count();
      if( name.charAt( name.length()-1 ) == &apos;)&apos; ){
        v = get_component( getbase( name ) );
        if( v instanceof xobject )  return( ((xobject)v).get_component(name) );
        if( v instanceof aobject )  return( ((aobject)v).get_component(name) );
        return( null );
      }
      for( i = 0; i &lt; nn; i++){
        v = oedit_gui.get_component(i);
        if( v instanceof xobject ){
          if( ((xobject)v).name.equals( name ) ) return(v);
        }
        else if( v instanceof aobject ){
          if( ((aobject)v).name.equals( name ) ) return(v);
        }
        else if( v instanceof uobject ){
          if( ((uobject)v).name.equals( name ) ) return(v);
        }
        else if( v instanceof pin ){
          if( ((pin)v).name.equals( name ) ) return(v);
        }
        else if( v instanceof codeclip ){
          if( ((codeclip)v).name.equals( name ) ) return(v);
        }
        else if( v instanceof KJgroup ){
          if( ((KJgroup)v).name.equals( name ) ) return(v);
        }
        else if( v instanceof relation ){
          if( ((relation)v).name.equals( name ) ) return(v);
        }
      }

dprint(&quot;not found\n&quot;);

      return( null );
    }

  }
</codetext>
</codeclip>
<codeclip>
<ID>_C61</ID>
<x0>24</x0>
<y0>163</y0>
<width>177</width>
<height>31</height>
<codetext>    // xobject クラス
    class xobject extends  AbsoluteLayout{
      Object element;
      String name;
      String objectname;
      int x0, y0;
      int width, height;
      int ID_maker;
      String description=&quot;&quot;;
      Paint paint;
      Button namebutton;
      View me;

      // 新規作成
      xobject( Object elem, String nam, String descript, int x, int y ){
        super(ACTIVITY);

dprint(&quot;new xobject\n&quot;);

        element = elem;
        name = xml.elementID( element );
        objectname = nam;
        paint = new Paint();
        paint.setStyle(Style.STROKE);
        paint.setStrokeWidth(2.0f);
        paint.setColor(Color.rgb(0,0,0));
        setBackgroundColor( Color.argb( 0,0,0,0 ));
        namebutton = new Button(ACTIVITY);
        namebutton.setPadding(1, 1, 1, 1);
        namebutton.setGravity(Gravity.CENTER|Gravity.CENTER);
        namebutton.setTextSize(20f);
        namebutton.setTextColor( Color.rgb( 0,0,0 ));
        namebutton.setBackgroundColor( Color.rgb( 200,200,200 ));
        x0 = x;
        y0 = y;
        width  = 107;
        height = 50;
        ID_maker = 0;
        description = descript;
        resize();
        namebutton.setText(objectname);
        paint.setTextSize(namebutton.getTextSize());
        int w = max( (int)paint.measureText( objectname )+7, 20*scale );
        namebutton.setLayoutParams( new AbsoluteLayout.LayoutParams( w,70,0,0 ) );
        addView(namebutton);
        me = this;
        this.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;xobject&quot;);
            }
            return true;
          }
        });
        namebutton.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ handler(me,&quot;xobject-login&quot;);}
        });
        save();
      }

      // Loginモードで生成(ファイルの情報をもとに生成)  
      xobject( Object elem ){
        super(ACTIVITY);

dprint(&quot;new xobject(e)\n&quot;);

        element = elem;
        name = xml.elementID( element );
        paint = new Paint();
        paint.setStyle(Style.STROKE);
        paint.setStrokeWidth(2.0f);
        paint.setColor(Color.rgb(0,0,0));
        setBackgroundColor( Color.argb( 0,0,0,0 ));
        namebutton = new Button(ACTIVITY);
        namebutton.setPadding(1, 1, 1, 1);
        namebutton.setGravity(Gravity.CENTER|Gravity.CENTER);
        namebutton.setTextSize(20f);
        namebutton.setTextColor( Color.rgb( 0,0,0 ));
        namebutton.setBackgroundColor( Color.rgb( 200,200,200 ));
        load();
        resize();
        namebutton.setText(objectname);
        paint.setTextSize(namebutton.getTextSize());
        int w = max( (int)paint.measureText( objectname )+7, 20*scale );
        namebutton.setLayoutParams( new AbsoluteLayout.LayoutParams( w,70,0,0 ) );
        addView(namebutton);
        me = this;
        this.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;xobject&quot;);
            }
            return true;
          }
        });
        namebutton.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ handler(me,&quot;xobject-login&quot;);}
        });

        //pinlabelを作成
        Vector pins = xml.child_list( element, &quot;pin&quot; );
        for(int i=0; i&lt;pins.size();i++) add( new pinlabel( pins.get(i) ) );
      }

      // 自分を消去する
      public void suicide(){

dprint(&quot;xobject suicide\n&quot;);

        xml.del_element(element);
        ViewGroup g = (ViewGroup)getParent();
        g.removeView(me);
      }

      // 内容をロード
      public void load(){

dprint(&quot;xobject load\n&quot;);

        x0 = parseInt( xml.get_attribute( element, &quot;x0&quot; ) );
        y0 = parseInt( xml.get_attribute( element, &quot;y0&quot; ) );
        width = parseInt( xml.get_attribute( element, &quot;width&quot; ) );
        height = parseInt( xml.get_attribute( element, &quot;height&quot; ) );
        ID_maker = parseInt( xml.get_attribute( element, &quot;ID_maker&quot; ) );
        objectname = xml.get_attribute( element, &quot;objectname&quot; );
        description = xml.get_attribute( element, &quot;description&quot; );

dprint(&quot;xobject load: description=&quot;+description+&quot;\n&quot;);

      }

      // 内容をセーブ
      public void save(){

dprint(&quot;xobject save\n&quot;);

        xml.set_attribute( element, &quot;x0&quot;, &quot;&quot; + x0 );
        xml.set_attribute( element, &quot;y0&quot;, &quot;&quot; + y0 );
        xml.set_attribute( element, &quot;width&quot;, &quot;&quot; + width );
        xml.set_attribute( element, &quot;height&quot;, &quot;&quot; + height );
        xml.set_attribute( element, &quot;ID_maker&quot;, &quot;&quot; + ID_maker );
        xml.set_attribute( element, &quot;objectname&quot;, objectname );
        xml.set_attribute( element, &quot;description&quot;, description );
        int nn = getChildCount();
        for( int i = 0; i &lt; nn; i++){
          View v = getChildAt(i);
          if( v instanceof pinlabel) ((pinlabel)v).save();
        }
      }

      //コンポーネントを追加する
      public void add( View cmp ){
        addView(cmp);
      }

      //コンポーネントを削除する
      public void remove( View cmp ){
        removeView(cmp);
      }

      //与えられた名前のコンポーネントを返す
      public View get_component( String name ){

dprint(&quot;xobject get component\n&quot;);

        int nn = getChildCount();
        for( int i = 0; i &lt; nn; i++){
          View v = getChildAt(i);
          if( v instanceof pinlabel){
            pinlabel p = (pinlabel)v;
            if( p.name.equals( name ) ) return( p );
          }
        }
        return( null );
      }

      // 位置・大きさを設定する
      public void resize(){
        setLayoutParams( new AbsoluteLayout.LayoutParams( scale*width,scale*height,scale*x0,scale*y0 ) );
        int nn = getChildCount();
        for( int i = 0; i &lt; nn; i++){
          View v = getChildAt(i);
          if( v instanceof pinlabel){
            pinlabel p = (pinlabel)v;
            p.resize();
          }
        }
      }

      //コンポーネント描画
      protected void onDraw( Canvas g ){
        super.onDraw( g );
        RectF r = new RectF( 0, 0,scale*width-1, scale*height-1);
        g.drawRect( r, paint );
      }
    }//~xobject
</codetext>
</codeclip>
<codeclip>
<ID>_C62</ID>
<x0>22</x0>
<y0>208</y0>
<width>178</width>
<height>30</height>
<codetext>    // aobject クラス
    class aobject extends  AbsoluteLayout{
      Object element;
      String name;
      String objectname;
      int x0, y0;
      int width, height;
      int ID_maker;
      String description=&quot;&quot;;
      Paint paint;
      Button namebutton;
      View me;

      // 新規作成
      aobject( Object elem, String nam, String descript, int x, int y ){
        super(ACTIVITY);

dprint(&quot;new aobject\n&quot;);

        element = elem;
        name = xml.elementID( element );
        objectname = nam;
        paint = new Paint();
        paint.setStyle(Style.STROKE);
        paint.setStrokeWidth(2.0f);
        paint.setColor(Color.rgb(0,0,255));
        paint.setTextSize(20);
        setBackgroundColor( Color.argb( 0,0,0,0 ));
        namebutton = new Button(ACTIVITY);
        namebutton.setPadding(1, 1, 1, 1);
        namebutton.setGravity(Gravity.CENTER|Gravity.CENTER);
        namebutton.setTextSize(20f);
        namebutton.setTextColor( Color.rgb( 0,0,0 ));
        namebutton.setBackgroundColor( Color.rgb( 200,200,200 ));
        x0 = x;
        y0 = y;
        width  = 107;
        height = 50;
        ID_maker = 0;
        description = descript;
        resize();
        namebutton.setText(objectname);
        paint.setTextSize(namebutton.getTextSize());
        int w = max( (int)paint.measureText( objectname )+7, 20*scale );
        namebutton.setLayoutParams( new AbsoluteLayout.LayoutParams( w,70,0,0 ) );
        addView(namebutton);
        me = this;
        this.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;aobject&quot;);
            }
            return true;
          }
        });
        namebutton.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ handler(me,&quot;aobject-login&quot;);}
        });
        new state( xml.new_element( element, &quot;state&quot;, &quot;_SINIT&quot; ), 1, &quot; 初期状態&quot;, 10, 10 );
        save();
      }

      // Loginモードで生成(ファイルの情報をもとに生成)  
      aobject( Object elem ){
        super(ACTIVITY);

dprint(&quot;new aobject(e)\n&quot;);

        element = elem;
        name = xml.elementID( element );
        paint = new Paint();
        paint.setStyle(Style.STROKE);
        paint.setStrokeWidth(2.0f);
        paint.setColor(Color.rgb(0,0,255));
        paint.setTextSize(20);
        setBackgroundColor( Color.argb( 0,0,0,0 ));
        namebutton = new Button(ACTIVITY);
        namebutton.setPadding(1, 1, 1, 1);
        namebutton.setGravity(Gravity.CENTER|Gravity.CENTER);
        namebutton.setTextSize(20f);
        namebutton.setTextColor( Color.rgb( 0,0,0 ));
        namebutton.setBackgroundColor( Color.rgb( 200,200,200 ));
        load();
        resize();
        namebutton.setText(objectname);
        paint.setTextSize(namebutton.getTextSize());
        int w = max( (int)paint.measureText( objectname )+7, 20*scale );
        namebutton.setLayoutParams( new AbsoluteLayout.LayoutParams( w,70,0,0 ) );
        addView(namebutton);
        me = this;
        this.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;aobject&quot;);
            }
            return true;
          }
        });
        namebutton.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ handler(me,&quot;aobject-login&quot;);}
        });

        //pinlabelを作成
        Vector pins = xml.child_list( element, &quot;pin&quot; );
        for(int i=0; i&lt;pins.size();i++) add( new pinlabel( pins.get(i) ) );
      }

      // 自分を消去する
      public void suicide(){

dprint(&quot;aobject suicide\n&quot;);

        xml.del_element(element);
        ViewGroup g = (ViewGroup)getParent();
        g.removeView(me);
      }

      // 内容をロード
      public void load(){

dprint(&quot;aobject load\n&quot;);

        x0 = parseInt( xml.get_attribute( element, &quot;x0&quot; ) );
        y0 = parseInt( xml.get_attribute( element, &quot;y0&quot; ) );
        width = parseInt( xml.get_attribute( element, &quot;width&quot; ) );
        height = parseInt( xml.get_attribute( element, &quot;height&quot; ) );
        ID_maker = parseInt( xml.get_attribute( element, &quot;ID_maker&quot; ) );
        objectname = xml.get_attribute( element, &quot;objectname&quot; );
        description = xml.get_attribute( element, &quot;description&quot; );
      }

      // 内容をセーブ
      public void save(){

dprint(&quot;aobject save\n&quot;);

        xml.set_attribute( element, &quot;x0&quot;, &quot;&quot; + x0 );
        xml.set_attribute( element, &quot;y0&quot;, &quot;&quot; + y0 );
        xml.set_attribute( element, &quot;width&quot;, &quot;&quot; + width );
        xml.set_attribute( element, &quot;height&quot;, &quot;&quot; + height );
        xml.set_attribute( element, &quot;ID_maker&quot;, &quot;&quot; + ID_maker );
        xml.set_attribute( element, &quot;objectname&quot;, objectname );
        xml.set_attribute( element, &quot;description&quot;, description );
        int nn = getChildCount();
        for( int i = 0; i &lt; nn; i++){
          View v = getChildAt(i);
          if( v instanceof pinlabel) ((pinlabel)v).save();
        }
      }

      //コンポーネントを追加する
      public void add( View cmp ){
        addView(cmp);
      }

      //コンポーネントを削除する
      public void remove( View cmp ){
        removeView(cmp);
      }

      //与えられた名前のコンポーネントを返す
      public View get_component( String name ){

dprint(&quot;aobject get component\n&quot;);

        int nn = getChildCount();
        for( int i = 0; i &lt; nn; i++){
          View v = getChildAt(i);
          if( v instanceof pinlabel){
            pinlabel p = (pinlabel)v;
            if( p.name.equals( name ) ) return( p );
          }
        }
        return( null );
      }

      // 位置・大きさを設定する
      public void resize(){
        setLayoutParams( new AbsoluteLayout.LayoutParams( scale*width,scale*height,scale*x0,scale*y0 ) );
        int nn = getChildCount();
        for( int i = 0; i &lt; nn; i++){
          View v = getChildAt(i);
          if( v instanceof pinlabel){
            pinlabel p = (pinlabel)v;
            p.resize();
          }
        }
      }

      //コンポーネント描画
      protected void onDraw( Canvas g ){
        super.onDraw( g );
        RectF r = new RectF( 0, 0,scale*width-1, scale*height-1);
        g.drawRect( r, paint );
      }
    }//~aobject
</codetext>
</codeclip>
<codeclip>
<ID>_C63</ID>
<x0>27</x0>
<y0>250</y0>
<width>180</width>
<height>34</height>
<codetext>    // uobjectクラス
    class uobject extends AbsoluteLayout{
      Object element;
      String name;
      int x0, y0;
      int width, height;
      Button openWindow;
      EditText codetext;
      innerpin inpin, outpin;
      Paint paint;
      View me;

      // 新規作成
      uobject( Object elem, int xp, int yp, String inname, int inx, int iny, int inw, int inh, String outname, int outx, int outy, int outw, int outh ){
        super(ACTIVITY);
 
dprint(&quot;new uobject\n&quot;);

       element = elem;
        name = xml.elementID( element );
        paint = new Paint();
        paint.setStyle(Style.STROKE);
        paint.setStrokeWidth(2.0f);
        paint.setColor(Color.rgb(0,0,0));
        setBackgroundColor( Color.argb( 0,0,0,0 ));
        openWindow = new Button(ACTIVITY);
        openWindow.setPadding(1, 1, 1, 1);
        openWindow.setGravity(Gravity.CENTER|Gravity.CENTER);
        openWindow.setText(&quot;&quot;);
        openWindow.setTextSize(20f);
        openWindow.setTextColor( Color.rgb( 0,0,0 ));
        openWindow.setBackgroundColor( Color.rgb( 0,0,255 ));
        addView(openWindow);
        codetext = new EditText(ACTIVITY);
        codetext.setPadding(1, 1, 1, 1);
        codetext.setGravity(Gravity.TOP|Gravity.LEFT);
        codetext.setTextSize(20f);
        codetext.setTextColor( Color.rgb( 0,0,0 ));
        codetext.setBackgroundColor( Color.argb( 0,0,0,0 ));
        addView(codetext);
        inpin = new innerpin( this, &quot;in&quot;, inname, 0,255, 255, inx, iny, inw, inh );
        outpin = new innerpin( this, &quot;out&quot;, outname, 255, 0, 255, outx, outy, outw, outh );
        addView(inpin);
        addView(outpin);
        x0 = xp;
        y0 = yp;
        width  = 130;
        height = 90;
        codetext.setText(&quot;&quot;);
        resize();
        me = this;
        this.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;uobject&quot;);
            }
            return true;
          }
        });
        codetext.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            codetext.requestFocus();
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;uobject&quot;);
            }
            return true;
          }
        });
        openWindow.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ handler(me,&quot;uobject_edit&quot;);}
        });
        save();
      }


      // Loginモードで生成(ファイルの情報をもとに生成)  
      uobject( Object elem ){
        super(ACTIVITY);

dprint(&quot;new uobject(e)\n&quot;);

        element = elem;
        name = xml.elementID( element );
        paint = new Paint();
        paint.setStyle(Style.STROKE);
        paint.setStrokeWidth(2.0f);
        paint.setColor(Color.rgb(0,0,0));
        setBackgroundColor( Color.argb( 0,0,0,0 ));
        openWindow = new Button(ACTIVITY);
        openWindow.setPadding(1, 1, 1, 1);
        openWindow.setGravity(Gravity.CENTER|Gravity.CENTER);
        openWindow.setText(&quot;&quot;);
        openWindow.setTextSize(20f);
        openWindow.setTextColor( Color.rgb( 0,0,0 ));
        openWindow.setBackgroundColor( Color.rgb( 0,0,255 ));
        addView(openWindow);
        codetext = new EditText(ACTIVITY);
        codetext.setPadding(1, 1, 1, 1);
        codetext.setGravity(Gravity.TOP|Gravity.LEFT);
        codetext.setTextSize(20f);
        codetext.setTextColor( Color.rgb( 0,0,0 ));
        codetext.setBackgroundColor( Color.argb( 0,0,0,0 ));
        addView(codetext);
        inpin = new innerpin( this, &quot;in&quot;, &quot;in()&quot;, 0,255, 255, 10, 10, 10, 10 );
        outpin = new innerpin( this, &quot;out&quot;, &quot;out()&quot;, 255, 0, 255, 10, 10, 10, 10 );
        addView(inpin);
        addView(outpin);
        load();
        resize();
        me = this;
        this.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;uobject&quot;);
            }
            return true;
          }
        });
        codetext.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            codetext.requestFocus();
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;uobject&quot;);
            }
            return true;
          }
        });
        openWindow.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ handler(me,&quot;uobject_edit&quot;);}
        });
      }

      // 自分を消去する
      public void suicide(){

dprint(&quot;uobject suicide\n&quot;);

        xml.del_element(element);
        ViewGroup g = (ViewGroup)getParent();
        g.removeView(me);
      }

      //   ロード
      public void load(){

dprint(&quot;uobject load\n&quot;);

        x0 = parseInt( xml.get_attribute( element, &quot;x0&quot; ) );
        y0 = parseInt( xml.get_attribute( element, &quot;y0&quot; ) );
        width = parseInt( xml.get_attribute( element, &quot;width&quot; ) );
        height = parseInt( xml.get_attribute( element, &quot;height&quot; ) );
        inpin.setText( xml.get_attribute( element, &quot;inpintext&quot; ) );
        inpin.x0 = parseInt( xml.get_attribute( element, &quot;inpinx0&quot; ) );
        inpin.y0 = parseInt( xml.get_attribute( element, &quot;inpiny0&quot; ) );
        inpin.width = parseInt( xml.get_attribute( element, &quot;inpinwidth&quot; ) );
        inpin.height = parseInt( xml.get_attribute( element, &quot;inpinheight&quot; ) );
        outpin.setText( xml.get_attribute( element, &quot;outpintext&quot; ) );
        outpin.x0 = parseInt( xml.get_attribute( element, &quot;outpinx0&quot; ) );
        outpin.y0 = parseInt( xml.get_attribute( element, &quot;outpiny0&quot; ) );
        outpin.width = parseInt( xml.get_attribute( element, &quot;outpinwidth&quot; ) );
        outpin.height = parseInt( xml.get_attribute( element, &quot;outpinheight&quot; ) );
        codetext.setText( xml.get_attribute( element, &quot;codetext&quot; ) );
      }

      //   セーブ
      public void save(){

dprint(&quot;uobject save\n&quot;);

        xml.set_attribute( element, &quot;state1&quot;, &quot;_SINIT&quot; );
        xml.set_attribute( element, &quot;state2&quot;, &quot;_SINIT&quot; );
        xml.set_attribute( element, &quot;x0&quot;, &quot;&quot; + x0 );
        xml.set_attribute( element, &quot;y0&quot;, &quot;&quot; + y0 );
        xml.set_attribute( element, &quot;width&quot;, &quot;&quot; + width );
        xml.set_attribute( element, &quot;height&quot;, &quot;&quot; + height );
        xml.set_attribute( element, &quot;inconnectx0&quot;, &quot;0&quot; );
        xml.set_attribute( element, &quot;inconnecty0&quot;, &quot;40&quot; );
        xml.set_attribute( element, &quot;outconnectx0&quot;, &quot;0&quot; );
        xml.set_attribute( element, &quot;outconnecty0&quot;, &quot;40&quot; );
        xml.set_attribute( element, &quot;inpintext&quot;, get_text(inpin) );
        xml.set_attribute( element, &quot;inpinx0&quot;, &quot;&quot; + inpin.x0 );
        xml.set_attribute( element, &quot;inpiny0&quot;, &quot;&quot; + inpin.y0 );
        xml.set_attribute( element, &quot;inpinwidth&quot;, &quot;&quot; + inpin.width );
        xml.set_attribute( element, &quot;inpinheight&quot;, &quot;&quot; + inpin.height );
        xml.set_attribute( element, &quot;outpintext&quot;, get_text(outpin) );
        xml.set_attribute( element, &quot;outpinx0&quot;, &quot;&quot; + outpin.x0 );
        xml.set_attribute( element, &quot;outpiny0&quot;, &quot;&quot; + outpin.y0 );
        xml.set_attribute( element, &quot;outpinwidth&quot;, &quot;&quot; + outpin.width );
        xml.set_attribute( element, &quot;outpinheight&quot;, &quot;&quot; + outpin.height );
        xml.set_attribute( element, &quot;inpinlinkcount&quot;, &quot;&quot; + inpin.linkcount );
        xml.set_attribute( element, &quot;codetext&quot;, get_text(codetext) );
      }

      // 位置・大きさを設定する
      public void resize(){
        setLayoutParams( new AbsoluteLayout.LayoutParams( scale*width,scale*height,scale*x0,scale*y0 ) );
        openWindow.setLayoutParams( new AbsoluteLayout.LayoutParams( scale*width,scale*20,0,0 ) );
        codetext.setLayoutParams( new AbsoluteLayout.LayoutParams( scale*(width-20)-4,scale*(height-20)-2,2,scale*20 ) );
        inpin.resize();
        outpin.resize();
      }

      //コンポーネント描画
      protected void onDraw( Canvas g ){
        super.onDraw( g );
        RectF r1 = new RectF( 1, 1,scale*width-1, scale*height-1);
        g.drawRect( r1, paint );
        RectF r2 = new RectF( 1, 1,scale*(width-20), scale*height-2);
        g.drawRect( r2, paint );
      }

    }//~uobject
</codetext>
</codeclip>
<codeclip>
<ID>_C64</ID>
<x0>29</x0>
<y0>474</y0>
<width>219</width>
<height>32</height>
<codetext>    // pinlabelクラス
    class pinlabel extends TextView{
      Object element;
      String name;
      int px, py;
      int width, height;
      Paint paint;
      View me;

      // 新規作成
      pinlabel( Object elem, String method, int x, int y ){
        super(ACTIVITY);

dprint(&quot;new pinlabel\n&quot;);

        element = elem;
        name = xml.elementID( xml.parent_element( element ) ) + &quot;(&quot;+ xml.elementID( element ) + &quot;)&quot;;
        setTextSize(20f);
        setTextColor( Color.rgb( 0,0,0 ));
        setBackgroundColor( Color.rgb( 255,255,240 ));
        setGravity(Gravity.CENTER|Gravity.CENTER);
        xml.set_attribute( element, &quot;x0&quot;, &quot;100&quot; );
        xml.set_attribute( element, &quot;y0&quot;, &quot;100&quot; );
        xml.set_attribute( element, &quot;width&quot;, &quot;60&quot; );
        xml.set_attribute( element, &quot;height&quot;, &quot;30&quot; );
        paint = new Paint();
        paint.setStyle(Style.STROKE);
        paint.setStrokeWidth(2.0f);
        paint.setColor(Color.rgb(0,0,0));
        paint.setTextSize(getTextSize());
        setText( method );
        px = x;
        py = y;
        width = max( (int)paint.measureText( method )+1, 20*scale );
        height = 12;
        resize();
        me = this;
        this.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;pinlabel&quot;);
            }
            return true;
          }
        });
        save();
      }

      // Loginモードで生成(ファイルの情報をもとに生成)
      pinlabel( Object elem ){
        super(ACTIVITY);

dprint(&quot;new pinlabel(e)\n&quot;);

        element = elem;
        name = xml.elementID( xml.parent_element( element ) ) + &quot;(&quot;+ xml.elementID( element ) + &quot;)&quot;;
        setTextSize(20f);
        setTextColor( Color.rgb( 0,0,0 ));
        setBackgroundColor( Color.rgb( 255,255,240));
        setGravity(Gravity.CENTER|Gravity.CENTER);
        paint = new Paint();
        paint.setStyle(Style.STROKE);
        paint.setStrokeWidth(2.0f);
        paint.setColor(Color.rgb(0,0,0));
        paint.setTextSize(getTextSize());
        load();
        resize();
        me = this;
        this.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;pinlabel&quot;);
            }
            return true;
          }
        });
      }

      // 自分を消去する
      public void suicide(){

dprint(&quot;pinlabel suicide\n&quot;);

        xml.del_element(element);
        ViewGroup g = (ViewGroup)getParent();
        g.removeView(me);
      }

      // 内容をロード
      public void load(){
       String method;
dprint(&quot;pinlabel load\n&quot;);

        setText( method = xml.get_attribute( element, &quot;text&quot; ) );
        px = parseInt( xml.get_attribute( element, &quot;px&quot; ) );
        py = parseInt( xml.get_attribute( element, &quot;py&quot; ) );
        width = max( (int)paint.measureText( method )+1, 20*scale );
        height = 12;
      }

      // 内容をセーブ
      public void save(){

dprint(&quot;pinlabel save\n&quot;);

        xml.set_attribute( element, &quot;text&quot;, getText().toString() );
        xml.set_attribute( element, &quot;px&quot;, &quot;&quot; + px );
        xml.set_attribute( element, &quot;py&quot;, &quot;&quot; + py );
      }

      // 位置・大きさを設定する
      public void resize(){
        setLayoutParams( new AbsoluteLayout.LayoutParams( width,scale*height,scale*px,scale*py ) );
      }

      //コンポーネント描画
      protected void onDraw( Canvas g ){
        super.onDraw( g );
      }

    }//~pinlabel
</codetext>
</codeclip>
<codeclip>
<ID>_C65</ID>
<x0>28</x0>
<y0>297</y0>
<width>215</width>
<height>32</height>
<codetext>    //pinクラス
    class pin extends EditText{
      Object element;
      String name;
      int x0, y0, width, height;
      int px, py;
      Paint paint;
      View me;

      // 新規作成
      pin( Object elem, String method, int x, int y ){
        super(ACTIVITY);

dprint(&quot;new pin\n&quot;);

        element = elem;
        name = xml.elementID( element );
        paint = new Paint();
        paint.setStyle(Style.STROKE);
        paint.setStrokeWidth(2.0f);
        paint.setColor(Color.rgb(0,0,0));
        setTextSize(20f);
        setTextColor( Color.rgb( 0,0,0 ));
        setBackgroundColor( Color.rgb( 255,255,255 ));
        setGravity(Gravity.CENTER|Gravity.CENTER);
        x0 = x;
        y0 = y;
        width  = 60;
        height = 30;
        px = 10;
        py = 40;
        setText(method);
        resize();
        me = this;
        this.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;pin&quot;);
            }
            return true;
          }
        });
        save();
      }


      // Loginモードで生成(ファイルの情報をもとに生成)
      pin( Object elem ){
        super(ACTIVITY);

dprint(&quot;new pin(e)\n&quot;);

        element = elem;
        name = xml.elementID( element );
        paint = new Paint();
        paint.setStyle(Style.STROKE);
        paint.setStrokeWidth(2.0f);
        paint.setColor(Color.rgb(0,0,0));
        setTextSize(20f);
        setTextColor( Color.rgb( 0,0,0 ));
        setBackgroundColor( Color.rgb( 255,255,255 ));
        setGravity(Gravity.CENTER|Gravity.CENTER);
        load();
        resize();
        me = this;
        this.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;pin&quot;);
            }
            return true;
          }
        });
      }

      // 自分を消去する
      public void suicide(){

dprint(&quot;pin suicide\n&quot;);

        xml.del_element(element);
        ViewGroup g = (ViewGroup)getParent();
        g.removeView(me);
      }

      // 内容をロード
      public void load(){

dprint(&quot;pin load\n&quot;);

        x0 = parseInt( xml.get_attribute( element, &quot;x0&quot; ) );
        y0 = parseInt( xml.get_attribute( element, &quot;y0&quot; ) );
        width = parseInt( xml.get_attribute( element, &quot;width&quot; ) );
        height = parseInt( xml.get_attribute( element, &quot;height&quot; ) );
        px = parseInt( xml.get_attribute( element, &quot;px&quot; ) );
        py = parseInt( xml.get_attribute( element, &quot;py&quot; ) );
        setText(xml.get_attribute( element, &quot;text&quot; ));
      }

      // 内容をセーブ
      public void save(){

dprint(&quot;pin save\n&quot;);

        xml.set_attribute( element, &quot;x0&quot;, &quot;&quot; + x0 );
        xml.set_attribute( element, &quot;y0&quot;, &quot;&quot; + y0 );
        xml.set_attribute( element, &quot;width&quot;, &quot;&quot; + width );
        xml.set_attribute( element, &quot;height&quot;, &quot;&quot; + height );
        xml.set_attribute( element, &quot;px&quot;, &quot;&quot; + px );
        xml.set_attribute( element, &quot;py&quot;, &quot;&quot; + py );
        xml.set_attribute( element, &quot;text&quot;, get_text(this) );
      }


      // 位置・大きさを設定する
      public void resize(){
        setLayoutParams( new AbsoluteLayout.LayoutParams( scale*width,scale*height,scale*x0,scale*y0 ) );
      }

      //コンポーネント描画
      protected void onDraw( Canvas g ){
        super.onDraw( g );
        RectF r = new RectF( 1, 1, scale*width-1, scale*height-1);
        g.drawRect( r, paint );
      }

    }//~pin
</codetext>
</codeclip>
<codeclip>
<ID>_C66</ID>
<x0>30</x0>
<y0>387</y0>
<width>180</width>
<height>33</height>
<codetext>    // codeclipクラス
    class codeclip extends AbsoluteLayout{
      Object element;
      String name;
      int x0, y0;
      int width, height;
      Paint paint;
      Button openWindow;
      EditText codetext;
      View me;


      // 新規作成
      codeclip( Object elem, String code, int x, int y ){
        super(ACTIVITY);

dprint(&quot;new codeclip\n&quot;);

        element = elem;
        name = xml.elementID( element );
        paint = new Paint();
        paint.setStyle(Style.STROKE);
        paint.setStrokeWidth(2.0f);
        paint.setColor(Color.rgb(0,0,0));
        setBackgroundColor( Color.rgb( 240,240,240 ));
        openWindow = new Button(ACTIVITY);
        openWindow.setPadding(1, 1, 1, 1);
        openWindow.setGravity(Gravity.CENTER|Gravity.CENTER);
        openWindow.setText(&quot;&quot;);
        openWindow.setTextSize(20f);
        openWindow.setTextColor( Color.rgb( 0,0,0 ));
        openWindow.setBackgroundColor( Color.rgb( 0,0,255 ));
        addView(openWindow);
        codetext = new EditText(ACTIVITY);
        codetext.setPadding(1, 1, 1, 1);
        codetext.setGravity(Gravity.TOP|Gravity.LEFT);
        codetext.setTextSize(20f);
        codetext.setTextColor( Color.rgb( 0,0,0 ));
        codetext.setBackgroundColor( Color.rgb( 255,255,255 ));
        addView(codetext);
        x0 = x;
        y0 = y;
        width = 100;
        height = 20;
        codetext.setText(code);
        resize();
        me = this;
        this.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;codeclip&quot;);
            }
            return true;
          }
        });
        codetext.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            codetext.requestFocus();
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;codeclip&quot;);
            }
            return true;
          }
        });
        openWindow.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ handler(me,&quot;codeclip_edit&quot;);}
        });
        save();
      }


      // Loginモードで生成(ファイルの情報をもとに生成)
      codeclip( Object elem ){
        super(ACTIVITY);

dprint(&quot;new codeclip(e)\n&quot;);

        element = elem;
        name = xml.elementID( element );
        paint = new Paint();
        paint.setStyle(Style.STROKE);
        paint.setStrokeWidth(2.0f);
        paint.setColor(Color.rgb(0,0,0));
        setBackgroundColor( Color.rgb( 240,240,240 ));
        openWindow = new Button(ACTIVITY);
        openWindow.setPadding(1, 1, 1, 1);
        openWindow.setGravity(Gravity.CENTER|Gravity.CENTER);
        openWindow.setText(&quot;&quot;);
        openWindow.setTextSize(20f);
        openWindow.setTextColor( Color.rgb( 0,0,0 ));
        openWindow.setBackgroundColor( Color.rgb( 0,0,255 ));
        addView(openWindow);
        codetext = new EditText(ACTIVITY);
        codetext.setPadding(1, 1, 1, 1);
        codetext.setGravity(Gravity.TOP|Gravity.LEFT);
        codetext.setTextSize(20f);
        codetext.setTextColor( Color.rgb( 0,0,0 ));
        codetext.setBackgroundColor( Color.rgb( 255,255,255 ));
        addView(codetext);
        load();
        resize();
        me = this;
        this.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;codeclip&quot;);
            }
            return true;
          }
        });
        codetext.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            codetext.requestFocus();
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;codeclip&quot;);
            }
            return true;
          }
        });
        openWindow.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ handler(me,&quot;codeclip_edit&quot;);}
        });
      }

      // 自分を消去する
      public void suicide(){

dprint(&quot;codeclip suicide\n&quot;);

        xml.del_element(element);
        ViewGroup g = (ViewGroup)getParent();
        g.removeView(me);
      }

      // 内容をロード
      public void load(){

dprint(&quot;codeclip load\n&quot;);

        x0 = parseInt( xml.get_attribute( element, &quot;x0&quot; ) );
        y0 = parseInt( xml.get_attribute( element, &quot;y0&quot; ) );
        width = parseInt( xml.get_attribute( element, &quot;width&quot; ) );
        height = parseInt( xml.get_attribute( element, &quot;height&quot; ) );
        codetext.setText( xml.get_attribute( element, &quot;codetext&quot; ) );
      }

      // 内容をセーブ
      public void save(){

dprint(&quot;codeclip save\n&quot;);

        xml.set_attribute( element, &quot;x0&quot;, &quot;&quot; + x0 );
        xml.set_attribute( element, &quot;y0&quot;, &quot;&quot; + y0 );
        xml.set_attribute( element, &quot;width&quot;, &quot;&quot; + width );
        xml.set_attribute( element, &quot;height&quot;, &quot;&quot; + height );
        xml.set_attribute( element, &quot;codetext&quot;, get_text(codetext) );
      }

      // 位置・大きさを設定する
      public void resize(){
        setLayoutParams( new AbsoluteLayout.LayoutParams( scale*width,scale*height,scale*x0,scale*y0 ) );
        openWindow.setLayoutParams( new AbsoluteLayout.LayoutParams( scale*20,scale*height,0,0 ) );
        codetext.setLayoutParams( new AbsoluteLayout.LayoutParams( scale*(width-40),scale*height-4,scale*20,2 ) );
      }

      //コンポーネント描画
      protected void onDraw( Canvas g ){
        super.onDraw( g );
        RectF r1 = new RectF( 1, 1, scale*width-1, scale*height-1);
        RectF r2 = new RectF( 1, 1, scale*(width-20)+1, scale*height-1);
        g.drawRect( r1, paint );
        g.drawRect( r2, paint );
      }

    }//~codeclip
</codetext>
</codeclip>
<codeclip>
<ID>_C67</ID>
<x0>29</x0>
<y0>344</y0>
<width>180</width>
<height>34</height>
<codetext>    // 信号(オブジェクト図)     
    class relation extends AbsoluteLayout{
      Object element;
      String name;
      String pin1name, pin2name;
      int x0, y0;
      int width, height;
      int startx, starty, endx, endy;
      Paint paint;
      View pin1, pin2;
      View me;

      // 新規作成
      relation( Object elem, View p1, View p2 ){
        super(ACTIVITY);

dprint(&quot;new relation\n&quot;);

        element = elem;
        name =  xml.elementID( element );
        paint = new Paint();
        paint.setStyle(Style.STROKE);
        paint.setStrokeWidth(2.0f);
        paint.setColor(Color.rgb(0,0,0));
        setBackgroundColor( Color.argb( 0,0,0,0 ));
        pin1 = p1;
        pin2 = p2;
        pin1name = get_name( pin1 );
        pin2name = get_name( pin2 );
        if( pin1 instanceof uobject ) ((uobject)pin1).outpin.inclinkcount();
        if( pin2 instanceof uobject ) ((uobject)pin2).inpin.inclinkcount();
        me = this;
        this.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;relation&quot;);
            }
            return true;
          }
        });
        save();
      }

      // Loginモードで生成  (ファイルの情報をもとに生成／注意：接続するコンポーネントが存在していること)
      relation( Object elem ){
        super(ACTIVITY);

dprint(&quot;new relation(e)\n&quot;);

        element = elem;
        name =  xml.elementID( element );
        paint = new Paint();
        paint.setStyle(Style.STROKE);
        paint.setStrokeWidth(2.0f);
        paint.setColor(Color.rgb(0,0,0));
        setBackgroundColor( Color.argb( 0,0,0,0 ));
        load();
        pin1 = oedit.get_component( pin1name );
        pin2 = oedit.get_component( pin2name );
        if( pin1 instanceof uobject ) ((uobject)pin1).outpin.inclinkcount();
        if( pin2 instanceof uobject ) ((uobject)pin2).inpin.inclinkcount();
        me = this;
        this.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;relation&quot;);
            }
            return true;
          }
        });
      }

      // 自分を消去する
      public void suicide(){

dprint(&quot;relation suicide\n&quot;);

        if( pin1 instanceof uobject ) ((uobject)pin1).outpin.declinkcount();
        if( pin2 instanceof uobject ) ((uobject)pin2).inpin.declinkcount();
        xml.del_element(element);
        ViewGroup g = (ViewGroup)getParent();
        g.removeView(me);
      }

      // 内容をロード
      public void load(){

dprint(&quot;relationload\n&quot;);

        pin1name = xml.get_attribute( element, &quot;pin1name&quot; );
        pin2name = xml.get_attribute( element, &quot;pin2name&quot; );
      }

      // 内容をセーブ
      public void save(){

dprint(&quot;relation save\n&quot;);

        xml.set_attribute( element, &quot;pin1name&quot;, pin1name );
        xml.set_attribute( element, &quot;pin2name&quot;, pin2name );
      }

      // 線を引き直す
      public void resize() {

dprint(&quot;relation resize\n&quot;);

        int[] b1 = new int[4];
        int[] b2 = new int[4];
        if( pin1 instanceof uobject ) getBounds( ((uobject) pin1).outpin, b1 );
        else                          getBounds( pin1, b1 );
        if( pin2 instanceof uobject ) getBounds( ((uobject) pin2).inpin,  b2 );
        else                          getBounds( pin2, b2 );
        Point p1 = getBorderPoint( b1[0], b1[1], b1[2], b1[3], b2[0], b2[1], b2[2], b2[3] );
        Point p2 = getBorderPoint( b2[0], b2[1], b2[2], b2[3], b1[0], b1[1], b1[2], b1[3] );
        startx = p1.x;
        starty = p1.y;
        endx   = p2.x;
        endy   = p2.y;
        if( startx &lt; endx ){
          x0 = startx - 5;
          width = endx - startx + 11;
          startx = 5;
          endx = width - 6;
        }
        else{
          x0 = endx - 5;
          width = startx - endx + 11;
          startx = width - 6;
          endx = 5;
        }
        if( starty &lt; endy ){
          y0 = starty - 5;
          height = endy - starty + 11;
          starty = 5;
          endy = height - 6;
        }
        else{
          y0 = endy - 5;
          height = starty - endy + 11;
          starty = height - 6;
          endy = 5;
        }
        setLayoutParams(new AbsoluteLayout.LayoutParams( width, height, x0, y0));

dprint(&quot;resize relation:&quot;+x0+&quot;,&quot;+y0+&quot;,&quot;+width+&quot;,&quot;+height+&quot;\n&quot;);

      }

      //コンポーネント描画
      protected void onDraw( Canvas g ){
        int   rx, ry;
        double len, co, si;

        super.onDraw( g );
        rx = startx - endx;
        ry = starty - endy;
        len = java.lang.Math.sqrt( (double)rx * rx + ry * ry );
        co = 9.659D / len*scale;
        si = 2.588D / len*scale;
        g.drawLine( startx, starty, endx, endy, paint );
        g.drawLine( (int)( co * rx + si * ry ) + endx, (int)(-si * rx + co * ry ) + endy, endx, endy, paint );
        g.drawLine( (int)( co * rx - si * ry ) + endx, (int)( si * rx + co * ry ) + endy, endx, endy, paint );
      }

    }//~relation
</codetext>
</codeclip>
<codeclip>
<ID>_C68</ID>
<x0>30</x0>
<y0>431</y0>
<width>122</width>
<height>34</height>
<codetext>//グループクラス
    class KJgroup extends AbsoluteLayout{
      Object element;
      String name;
      int x0, y0;
      int width, height;
      Paint paint;
      EditText comment;
      View me;

      // 新規作成
      KJgroup( Object elem, String cmt, int x, int y ){
        super(ACTIVITY);

dprint(&quot;new group\n&quot;);

        element = elem;
        name = xml.elementID( element );
        paint = new Paint();
        paint.setStyle(Style.STROKE);
        paint.setStrokeWidth(3.0f);
        paint.setColor(Color.rgb(0,180,0));
        paint.setTextSize(20);
        setBackgroundColor( Color.argb( 0,0,0,0 ));
        comment = new EditText(ACTIVITY);
        comment.setPadding(1, 1, 1, 1);
        comment.setGravity(Gravity.LEFT|Gravity.TOP);
        comment.setTextSize(20f);
        comment.setTextColor( Color.rgb( 0,180,0 ));
        comment.setBackgroundColor( Color.argb( 0,0,0,0 ));
        addView(comment);
        x0 = x;
        y0 = y;
        width  = 107;
        height = 50;
        comment.setText( cmt );
        resize();
        me = this;
        this.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;KJgroup&quot;);
            }
            return true;
          }
        });
        comment.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            comment.requestFocus();
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;KJgroup&quot;);
            }
            return true;
          }
        });
        save();
      }

      // Loginモードで生成(ファイルの情報をもとに生成)  
      KJgroup( Object elem ){
        super(ACTIVITY);

dprint(&quot;new group(e)\n&quot;);

        element = elem;
        name = xml.elementID( element );
        paint = new Paint();
        paint.setStyle(Style.STROKE);
        paint.setStrokeWidth(3.0f);
        paint.setColor(Color.rgb(0,180,0));
        paint.setTextSize(20);
        setBackgroundColor( Color.argb( 0,0,0,0 ));
        comment = new EditText(ACTIVITY);
        comment.setPadding(1, 1, 1, 1);
        comment.setGravity(Gravity.LEFT|Gravity.TOP);
        comment.setTextSize(20f);
        comment.setTextColor( Color.rgb( 0,180,0 ));
        comment.setBackgroundColor( Color.argb( 0,0,0,0 ));
        addView(comment);
        load();
        resize();
        me = this;
        this.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;KJgroup&quot;);
            }
            return true;
          }
        });
        comment.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            comment.requestFocus();
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;KJgroup&quot;);
            }
            return true;
          }
        });
      }

      // 自分を消去する
      public void suicide(){

dprint(&quot;group suicide\n&quot;);

        xml.del_element(element);
        ViewGroup g = (ViewGroup)getParent();
        g.removeView(me);
      }

      // 内容をロード
      public void load(){

dprint(&quot;group load\n&quot;);

        x0 = parseInt( xml.get_attribute( element, &quot;x0&quot; ) );
        y0 = parseInt( xml.get_attribute( element, &quot;y0&quot; ) );
        width = parseInt( xml.get_attribute( element, &quot;width&quot; ) );
        height = parseInt( xml.get_attribute( element, &quot;height&quot; ) );
        comment.setText( xml.get_attribute( element, &quot;comment&quot; ) );
      }

      // 内容をセーブ
      public void save(){

dprint(&quot;group save\n&quot;);

        xml.set_attribute( element, &quot;x0&quot;, &quot;&quot; + x0 );
        xml.set_attribute( element, &quot;y0&quot;, &quot;&quot; + y0 );
        xml.set_attribute( element, &quot;width&quot;, &quot;&quot; + width );
        xml.set_attribute( element, &quot;height&quot;, &quot;&quot; + height );
        xml.set_attribute( element, &quot;comment&quot;, get_text(comment) );
      }

      // 位置・大きさを設定する
      public void resize(){
        setLayoutParams( new AbsoluteLayout.LayoutParams( scale*width,scale*height,scale*x0,scale*y0 ) );
        comment.setLayoutParams( new AbsoluteLayout.LayoutParams( scale*width,scale*20,0,0 ) );
      }

      //コンポーネント描画
      protected void onDraw( Canvas g ){
        super.onDraw( g );
        RectF r1 = new RectF( 1, 1,scale*width-1, scale*height-1 );
        g.drawRect( r1, paint );
      }

    }//~KJgroup
</codetext>
</codeclip>
<codeclip>
<ID>_C69</ID>
<x0>590</x0>
<y0>539</y0>
<width>182</width>
<height>47</height>
<codetext>  // 状態図エディタ 
  StateEditor sedit;
  class StateEditor{
    Object element = null;
    int ID_maker;
    XFile loadfile;
      
//  コンストラクタ
    StateEditor(){
      element = null;
      ID_maker = 0;
    }
     
//  初期化
    public void initialise( int typ ){

dprint(&quot;sedit initialise\n&quot;);

      Logout();
      ApplicationType = typ;
      newProject();
      menu_gui = new MenuGUI();
      oedit.Login( project );
      oedit_gui.show(&quot;ObjectEditor&quot;);
    }

//  プロジェクトを開く
    public void open( File f ){

dprint(&quot;sedit open\n&quot;);

      if( f != null ){
        Logout();
        ProjectFile = new XFile(f);
        loadProject();
        menu_gui = new MenuGUI();
        ApplicationType = parseInt( xml.get_attribute( properties, &quot;ApplicationType&quot; ) );
        oedit.Login( project );
        oedit_gui.show(&quot;ObjectEditor&quot;);
      }
    }

// プロジェクトを保存する
    public void save(){

dprint(&quot;sedit save\n&quot;);

      Object celement  = element;
      Logout();
      Login( celement );
      ProjectFile = new XFile( ProjectDir, xml.get_attribute( project, &quot;objectname&quot; ) + &quot;.prj&quot; );
      saveProject();
    }

    // オブジェクトを開く
    public void Login( Object elem ){

dprint(&quot;sedit login\n&quot;);
dprint(&quot;elenent=&quot;+elem+&quot;\n&quot;);

      element = elem; 

      //内容をロードする
      ID_maker = parseInt( xml.get_attribute( element, &quot;ID_maker&quot; ) );
      sedit_gui.set_objectname( xml.get_attribute( element, &quot;objectname&quot; ) );
       
      //Loginモードでコンポーネントを生成する
      Vector v;
      int i;
       
      // state
dprint(&quot;states load\n&quot;);
      v = xml.child_list( element, &quot;state&quot; );
      for( i = 0; i &lt; v.size(); i++ ) sedit_gui.add( new state( v.get(i) ) );

      // pin
dprint(&quot;pins load\n&quot;);
      v = xml.child_list( element, &quot;pin&quot; );
      for( i = 0; i &lt; v.size(); i++ ) sedit_gui.add( new pin( v.get(i) ) );

      // codeclip
dprint(&quot;codeclips load\n&quot;);
      v = xml.child_list( element, &quot;codeclip&quot; );
      for( i = 0; i &lt; v.size(); i++ ) sedit_gui.add( new codeclip( v.get(i) ) );

      // operation
dprint(&quot;operations load\n&quot;);
      v = xml.child_list( element, &quot;operation&quot; );
      for( i = 0; i &lt; v.size(); i++ ){
        Object op = v.get(i);
        String state1 = xml.get_attribute( op, &quot;state1&quot; );
        String state2 = xml.get_attribute( op, &quot;state2&quot; );
        if( get_component( state1 ) != null &amp;&amp; get_component( state2 )!= null ){
          operation o = new operation( op );
          sedit_gui.add(o);
          sedit_gui.add(o.inflow);
          sedit_gui.add(o.outflow);
        }
        else xml.del_element( op );
      }

      // action
dprint(&quot;recover action\n&quot;);

      v = xml.child_list( element, &quot;action&quot; );
      for( i = 0; i &lt; v.size(); i++ ){
        Object a = v.get(i);
        String comp1 = xml.get_attribute( a, &quot;comp1name&quot; );
        String comp2 = xml.get_attribute( a, &quot;comp2name&quot; );

dprint(&quot;comp1=&quot;+comp1+&quot;,comp2=&quot;+comp2+&quot;\n&quot;);

        if( get_component( comp1 ) != null &amp;&amp; get_component( comp2 ) != null ){
          sedit_gui.addBack( new action(a) );
        }
        else xml.del_element( a );
      }
      sedit_gui.show(&quot;Object Editor &quot; + Application[ApplicationType]);
      sedit_is_active = true;

dprint(&quot;end login\n&quot;);
    }

    //内容をセーブして内容を消去する
    public void Logout(){

dprint(&quot;sedit logout\n&quot;);

      View v;
      int i;
      int nn;

      if( element == null ) return;
      nn = sedit_gui.get_component_count();
      xml.set_attribute( element, &quot;ID_maker&quot;, &quot;&quot; + ID_maker );
      xml.set_attribute( element, &quot;objectname&quot;, sedit_gui.get_objectname() );
      sedit_gui.set_objectname(&quot;&quot;);

      // コンポーネントをすべてsaveする
      for( i=0; i &lt; nn; i++){
        v = sedit_gui.get_component(i);
        if( v instanceof operation  )    ( (operation)v ).save();
        else if( v instanceof state  )   ( (state)v ).save();
        else if( v instanceof pin  )     ( (pin)v ).save();
        else if( v instanceof codeclip ) ( (codeclip)v ).save();
        else if( v instanceof action  )  ( (action)v ).save();
      }
      sedit_gui.clear();
      element = null;
    }

    // クリップボードからxp, yp で指定された位置にオブジェクトを貼り付ける
    public void paste_clipboad( int xp, int yp ){

dprint(&quot;sedit paste clipboad\n&quot;);

      Object celement = element;
 
      if( xml.element_name( clipboad ).equals(&quot;operation&quot;) ){
        Object op = xml.new_element( element, clipboad, &quot;_O&quot;+ID_maker++);
        xml.set_attribute( op, &quot;x0&quot;, &quot;&quot; + xp );
        xml.set_attribute( op, &quot;y0&quot;, &quot;&quot; + yp );
        xml.set_attribute( op, &quot;state1&quot;, &quot;_SINIT&quot; );
        xml.set_attribute( op, &quot;state2&quot;, &quot;_SINIT&quot; );
        xml.set_attribute( op, &quot;inconnectx0&quot;, &quot;0&quot; );
        xml.set_attribute( op, &quot;inconnecty0&quot;, &quot;30&quot; );
        xml.set_attribute( op, &quot;outconnectx0&quot;, &quot;0&quot; );
        xml.set_attribute( op, &quot;outconnecty0&quot;, &quot;30&quot; );
      }
      
      else if( xml.element_name( clipboad ).equals(&quot;state&quot;) ){
        Object st = xml.new_element( element, clipboad, &quot;_S&quot;+ID_maker++);
        xml.set_attribute( st, &quot;x0&quot;, &quot;&quot; + xp );
        xml.set_attribute( st, &quot;y0&quot;, &quot;&quot; + yp );
      }

      else if( xml.element_name( clipboad ).equals(&quot;pin&quot;) ){
        Object pi = xml.new_element( element, clipboad, &quot;_P&quot;+ID_maker++);
        xml.set_attribute( pi, &quot;x0&quot;, &quot;&quot; + xp );
        xml.set_attribute( pi, &quot;y0&quot;, &quot;&quot; + yp );
      }

      else if( xml.element_name( clipboad ).equals(&quot;codeclip&quot;) ){
        Object cod = xml.new_element( element, clipboad, &quot;_C&quot;+ID_maker++);
        xml.set_attribute( cod, &quot;x0&quot;, &quot;&quot; + xp );
        xml.set_attribute( cod, &quot;y0&quot;, &quot;&quot; + yp );
      }


      Logout();
      Login( celement );
    }

    // ファイルからxp, yp で指定された位置にオブジェクトを貼り付ける
    public Object paste_file( XFile loadfile, int xp, int yp ){

dprint(&quot;sedit paste file\n&quot;);

      Object obj = null;
      Object celement = element;
 
      if( loadfile == null || (!loadfile.is_xml()) ) return( null );

      if( loadfile.is_operation() ){
        obj = xml.new_element( element, loadfile, &quot;_O&quot;+ID_maker++);
        xml.set_attribute( obj, &quot;x0&quot;, &quot;&quot; + xp );
        xml.set_attribute( obj, &quot;y0&quot;, &quot;&quot; + yp );
        xml.set_attribute( obj, &quot;state1&quot;, &quot;_SINIT&quot; );
        xml.set_attribute( obj, &quot;state2&quot;, &quot;_SINIT&quot; );
        xml.set_attribute( obj, &quot;inconnectx0&quot;, &quot;0&quot; );
        xml.set_attribute( obj, &quot;inconnecty0&quot;, &quot;30&quot; );
        xml.set_attribute( obj, &quot;outconnectx0&quot;, &quot;0&quot; );
        xml.set_attribute( obj, &quot;outconnecty0&quot;, &quot;30&quot; );
      }
      
      else if( loadfile.is_state() ){
        obj = xml.new_element( element, loadfile, &quot;_S&quot;+ID_maker++);
        xml.set_attribute( obj, &quot;x0&quot;, &quot;&quot; + xp );
        xml.set_attribute( obj, &quot;y0&quot;, &quot;&quot; + yp );
      }

      else if( loadfile.is_pin() ){
        obj = xml.new_element( element, loadfile, &quot;_P&quot;+ID_maker++);
        xml.set_attribute( obj, &quot;x0&quot;, &quot;&quot; + xp );
        xml.set_attribute( obj, &quot;y0&quot;, &quot;&quot; + yp );
      }

      else if( loadfile.is_codeclip() ){
        obj = xml.new_element( element, loadfile, &quot;_C&quot;+ID_maker++);
        xml.set_attribute( obj, &quot;x0&quot;, &quot;&quot; + xp );
        xml.set_attribute( obj, &quot;y0&quot;, &quot;&quot; + yp );
      }

      Logout();
      Login( celement );
      return( obj );
    }

    // 接続を検証する
    public void check_connect(){

dprint(&quot;sedit check connect\n&quot;);

      View v;
      int i;
      Vector v1 = new Vector();
      int n1 = sedit_gui.get_component_count();
      for( i = 0; i &lt; n1; i++ ){
        v = sedit_gui.get_component(i);
        if( v instanceof operation ) {
          operation o = (operation)v;
          if( get_component(o.inflow.connectionname) ==  null || get_component(o.outflow.connectionname) == null ) v1.add(o);
        }
      }
      for( i=0; i&lt;v1.size(); i++ ) ((operation)v1.get(i)).suicide();

      Vector v2 = new Vector();
      int n2 = sedit_gui.get_component_count();
      for( i = 0; i &lt; n2; i++ ){
        v = sedit_gui.get_component(i);
        if( v instanceof action ) {
          action a = (action)v;
          if( get_component(a.comp1name) ==  null || get_component(a.comp2name) == null ) v2.add(a);
        }
      }
      for( i=0; i&lt;v2.size(); i++ ) ((action)v2.get(i)).suicide();
    }

    // 位置・大きさを設定する
    public void resize(){
      int b[] = new int[4];
      int x, y, xm = 0, ym = 0;
    
dprint(&quot;sedit resize\n&quot;);    
    
      int nn = sedit_gui.get_component_count();
      for( int i = 0; i &lt; nn; i++){
        View v = sedit_gui.get_component(i);
        if( v instanceof state )          ((state)v).resize();
        else if( v instanceof operation ) ((operation)v).resize();
        else if( v instanceof pin )       ((pin)v).resize();
        else if( v instanceof codeclip )  ((codeclip)v).resize();
        getBounds( v, b );
        x = b[0] + b[2];
        y = b[1] + b[3];
        if( x &gt; max_width )  max_width  = x;
        if( y &gt; max_height ) max_height = y;
      }
      for( int i = 0; i &lt; nn; i++){
        View v = sedit_gui.get_component(i);
        if( v instanceof action )     ((action)v).resize();
        else if( v instanceof xflow ) ((xflow)v).resize();
      }
      repaintAll();
    }

    //与えられた名前のコンポーネントを返す
    public View get_component( String name ){

dprint(&quot;sedit get component &quot;+ name + &quot;\n&quot;);

      View v;
      int i;
      int nn = sedit_gui.get_component_count();
      for( i = 0; i &lt; nn; i++){
        v = sedit_gui.get_component(i);
        if( v instanceof operation ){
          if( ((operation)v).name.equals( name ) ) return(v);
        }
        else if( v instanceof state ){
          if( ((state)v).name.equals( name ) ) return(v);
        }
        else if( v instanceof pin ){
          if( ((pin)v).name.equals( name ) ) return(v);
        }
        else if( v instanceof codeclip ){
          if( ((codeclip)v).name.equals( name ) ) return(v);
        }
        else if( v instanceof action ){
          if( ((action)v).name.equals( name ) ) return(v);
        }
      }
      return( null );
    }

}
</codetext>
</codeclip>
<codeclip>
<ID>_C70</ID>
<x0>270</x0>
<y0>306</y0>
<width>226</width>
<height>31</height>
<codetext>    // 遷移
    class operation extends AbsoluteLayout{
      Object element;
      String name;
      String statename1, statename2;  // ロード時のみ使用、実際の接続先はinflow,outflowのconnectionnameを参照する
      int x0, y0;
      int width, height;
      Button openWindow;
      EditText codetext;
      xflow inflow, outflow;
      connector inconnect, outconnect;
      innerpin inpin, outpin;
      Paint paint;
      View me;

      // 新規作成
      operation( Object elem, int xp, int yp, state state1, state state2, String inname, int inx, int iny, int inw, int inh, String outname, int outx, int outy, int outw, int outh ){
        super(ACTIVITY);

dprint(&quot;new operation\n&quot;);

        element = elem;
        name = xml.elementID( element );
        paint = new Paint();
        paint.setStyle(Style.STROKE);
        paint.setStrokeWidth(2.0f);
        paint.setColor(Color.rgb(0,0,0));
        setBackgroundColor( Color.argb( 0,0,0,0 ));
        openWindow = new Button(ACTIVITY);
        openWindow.setPadding(1, 1, 1, 1);
        openWindow.setGravity(Gravity.CENTER|Gravity.CENTER);
        openWindow.setText(&quot;&quot;);
        openWindow.setTextSize(20f);
        openWindow.setTextColor( Color.rgb( 0,0,0 ));
        openWindow.setBackgroundColor( Color.rgb( 0,0,255 ));
        addView(openWindow);
        codetext = new EditText(ACTIVITY);
        codetext.setPadding(1, 1, 1, 1);
        codetext.setGravity(Gravity.TOP|Gravity.LEFT);
        codetext.setTextSize(20f);
        codetext.setTextColor( Color.rgb( 0,0,0 ));
        codetext.setBackgroundColor( Color.argb( 0,0,0,0 ));
        addView(codetext);
        inconnect =  new connector( this, &quot;inconnect&quot;);  addView(inconnect);
        outconnect = new connector( this, &quot;outconnect&quot;); addView(outconnect);
        inpin = new innerpin( this, &quot;in&quot;, inname, 0,255, 255, inx, iny, inw, inh );
        addView(inpin);
        outpin = new innerpin( this, &quot;out&quot;, outname, 255, 0, 255, outx, outy, outw, outh );
        addView(outpin);
        inflow  = new xflow( &quot;inflow(&quot;+name+&quot;)&quot;,  state1,     inconnect );
        outflow = new xflow( &quot;outflow(&quot;+name+&quot;)&quot;, outconnect, state2 );
        statename1 = state1.name;
        statename2 = state2.name;
        x0 = xp;
        y0 = yp;
        width  = 130;
        height = 90;
        codetext.setText(&quot;&quot;);
        me = this;
        this.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;operation&quot;);
            }
            return true;
          }
        });
        codetext.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            codetext.requestFocus();
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;operation&quot;);
            }
            return true;
          }
        });
        openWindow.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ handler(me,&quot;operation_edit&quot;);}
        });
        save();
      }

      // Loginモードで生成(ファイルの情報をもとに生成)  
      operation( Object elem ){
        super(ACTIVITY);
        state state1, state2;

dprint(&quot;new operation(e)\n&quot;);

        element = elem;
        name = xml.elementID( element );
        paint = new Paint();
        paint.setStyle(Style.STROKE);
        paint.setStrokeWidth(2.0f);
        paint.setColor(Color.rgb(0,0,0));
        setBackgroundColor( Color.argb( 0,0,0,0 ));
        openWindow = new Button(ACTIVITY);
        openWindow.setPadding(1, 1, 1, 1);
        openWindow.setGravity(Gravity.CENTER|Gravity.CENTER);
        openWindow.setText(&quot;&quot;);
        openWindow.setTextSize(20f);
        openWindow.setTextColor( Color.rgb( 0,0,0 ));
        openWindow.setBackgroundColor( Color.rgb( 0,0,255 ));
        addView(openWindow);
        codetext = new EditText(ACTIVITY);
        codetext.setPadding(1, 1, 1, 1);
        codetext.setGravity(Gravity.TOP|Gravity.LEFT);
        codetext.setTextSize(20f);
        codetext.setTextColor( Color.rgb( 0,0,0 ));
        codetext.setBackgroundColor( Color.argb( 0,0,0,0 ));
        addView(codetext);
        inconnect =  new connector( this, &quot;inconnect&quot;);  addView(inconnect);
        outconnect = new connector( this, &quot;outconnect&quot;); addView(outconnect);
        inpin = new innerpin( this, &quot;in&quot;, &quot;in()&quot;, 0,255, 255, 10, 10, 10, 10 );
        addView(inpin);
        outpin = new innerpin( this, &quot;out&quot;, &quot;out()&quot;, 255, 0, 255, 10, 10, 10, 10 );
        addView(outpin);
        load();
        state1 = (state)sedit.get_component( statename1 );
        state2 = (state)sedit.get_component( statename2 );
        inflow  = new xflow( &quot;inflow(&quot;+name+&quot;)&quot;,  state1,     inconnect );
        outflow = new xflow( &quot;outflow(&quot;+name+&quot;)&quot;, outconnect, state2 );
        me = this;
        this.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;operation&quot;);
            }
            return true;
          }
        });
        codetext.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            codetext.requestFocus();
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;operation&quot;);
            }
            return true;
          }
        });
        openWindow.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ handler(me,&quot;operation_edit&quot;);}
        });
      }

      // 自分を消去する
      public void suicide(){

dprint(&quot;operation suicide\n&quot;);

        xml.del_element(element);
        ViewGroup g = (ViewGroup)getParent();
        g.removeView(inflow);
        g.removeView(outflow);
        g.removeView(me);
      }

      //   ロード
      public void load(){

dprint(&quot;operation load\n&quot;);

        statename1 = xml.get_attribute( element, &quot;state1&quot; );
        statename2 = xml.get_attribute( element, &quot;state2&quot; );
        x0 = parseInt( xml.get_attribute( element, &quot;x0&quot; ) );
        y0 = parseInt( xml.get_attribute( element, &quot;y0&quot; ) );
        width = parseInt( xml.get_attribute( element, &quot;width&quot; ) );
        height = parseInt( xml.get_attribute( element, &quot;height&quot; ) );
        inconnect.x0 = parseInt( xml.get_attribute( element, &quot;inconnectx0&quot; ) );
        inconnect.y0 = parseInt( xml.get_attribute( element, &quot;inconnecty0&quot; ) );
        outconnect.x0 = parseInt( xml.get_attribute( element, &quot;outconnectx0&quot; ) );
        outconnect.y0 = parseInt( xml.get_attribute( element, &quot;outconnecty0&quot; ) );
        inpin.setText( xml.get_attribute( element, &quot;inpintext&quot; ) );
        inpin.x0 = parseInt( xml.get_attribute( element, &quot;inpinx0&quot; ) );
        inpin.y0 = parseInt( xml.get_attribute( element, &quot;inpiny0&quot; ) );
        inpin.width = parseInt( xml.get_attribute( element, &quot;inpinwidth&quot; ) );
        inpin.height = parseInt( xml.get_attribute( element, &quot;inpinheight&quot; ) );
        outpin.setText( xml.get_attribute( element, &quot;outpintext&quot; ) );
        outpin.x0 = parseInt( xml.get_attribute( element, &quot;outpinx0&quot; ) );
        outpin.y0 = parseInt( xml.get_attribute( element, &quot;outpiny0&quot; ) );
        outpin.width = parseInt( xml.get_attribute( element, &quot;outpinwidth&quot; ) );
        outpin.height = parseInt( xml.get_attribute( element, &quot;outpinheight&quot; ) );
        codetext.setText( xml.get_attribute( element, &quot;codetext&quot; ) );
      }

      //   セーブ
      public void save(){

dprint(&quot;operation save\n&quot;);

        xml.set_attribute( element, &quot;state1&quot;, inflow.connectionname );
        xml.set_attribute( element, &quot;state2&quot;, outflow.connectionname );
        xml.set_attribute( element, &quot;x0&quot;, &quot;&quot; + x0 );
        xml.set_attribute( element, &quot;y0&quot;, &quot;&quot; + y0 );
        xml.set_attribute( element, &quot;width&quot;, &quot;&quot; + width );
        xml.set_attribute( element, &quot;height&quot;, &quot;&quot; + height );
        xml.set_attribute( element, &quot;inconnectx0&quot;, &quot;&quot; + inconnect.x0 );
        xml.set_attribute( element, &quot;inconnecty0&quot;, &quot;&quot; + inconnect.y0 );
        xml.set_attribute( element, &quot;outconnectx0&quot;, &quot;&quot; + outconnect.x0 );
        xml.set_attribute( element, &quot;outconnecty0&quot;, &quot;&quot; + outconnect.y0 );
        xml.set_attribute( element, &quot;inpintext&quot;, get_text(inpin) );
        xml.set_attribute( element, &quot;inpinx0&quot;, &quot;&quot; + inpin.x0 );
        xml.set_attribute( element, &quot;inpiny0&quot;, &quot;&quot; + inpin.y0 );
        xml.set_attribute( element, &quot;inpinwidth&quot;, &quot;&quot; + inpin.width );
        xml.set_attribute( element, &quot;inpinheight&quot;, &quot;&quot; + inpin.height );
        xml.set_attribute( element, &quot;outpintext&quot;, get_text(outpin) );
        xml.set_attribute( element, &quot;outpinx0&quot;, &quot;&quot; + outpin.x0 );
        xml.set_attribute( element, &quot;outpiny0&quot;, &quot;&quot; + outpin.y0 );
        xml.set_attribute( element, &quot;outpinwidth&quot;, &quot;&quot; + outpin.width );
        xml.set_attribute( element, &quot;outpinheight&quot;, &quot;&quot; + outpin.height );
        xml.set_attribute( element, &quot;inpinlinkcount&quot;, &quot;&quot; + inpin.linkcount ); // コンパイル時に必要なパラメータ
        xml.set_attribute( element, &quot;codetext&quot;, get_text(codetext) );
      }

      // 位置・大きさを設定する
      public void resize(){
        setLayoutParams( new AbsoluteLayout.LayoutParams( scale*width,scale*height,scale*x0,scale*y0 ) );
        openWindow.setLayoutParams( new AbsoluteLayout.LayoutParams( scale*width,scale*20,0,0 ) );
        codetext.setLayoutParams( new AbsoluteLayout.LayoutParams( scale*(width-20)-4,scale*(height-20)-2,2,scale*20 ) );
        inconnect.resize();
        outconnect.resize();
        inpin.resize();
        outpin.resize();
      }

      //コンポーネント描画
      protected void onDraw( Canvas g ){
        super.onDraw( g );
        RectF r1 = new RectF( 1, 1,scale*width-1, scale*height-1);
        g.drawRect( r1, paint );
        RectF r2 = new RectF( 1, 1,scale*(width-20), scale*height-2);
        g.drawRect( r2, paint );
      }

    }//~operation
</codetext>
</codeclip>
<codeclip>
<ID>_C71</ID>
<x0>271</x0>
<y0>413</y0>
<width>225</width>
<height>31</height>
<codetext>// 遷移フローの矢印    
class xflow extends AbsoluteLayout{
  View node1, node2;
  String name;
  String connectionname;
  operation transition;
  int x0, y0;
  int width, height;
  int startx, starty, endx, endy;
  Paint paint;
  View me;

  xflow( String nam, View n1, View n2 ) {
    super(ACTIVITY);

dprint(&quot;new xflow\n&quot;);

    name = nam;
    node1 = n1;
    node2 = n2;
    if( node1 instanceof state ) { connectionname = ((state)node1).name; transition = ((connector)node2).parent; }
    if( node2 instanceof state ) { connectionname = ((state)node2).name; transition = ((connector)node1).parent; }
    paint = new Paint();
    paint.setStyle(Style.STROKE);
    paint.setStrokeWidth(2.0f);
    paint.setColor(Color.rgb(255,0,255));
    setBackgroundColor( Color.argb( 0,0,0,0 ));
    me = this;
    this.setOnTouchListener( new View.OnTouchListener(){
      @Override    
      public boolean onTouch(View v, MotionEvent event) {
        if (event.getAction() == MotionEvent.ACTION_UP) {
          touch_x = (int) event.getRawX();    
          touch_y = (int) event.getRawY();
          handler( me, &quot;xflow&quot;);
        }
        return true;
      }
    });
  }

  // 別の状態に再接続する
  public void reconnect( state st ){

dprint(&quot;xflow reconnect\n&quot;);

    if( node1 instanceof state ) { node1 = st; connectionname = ((state)node1).name; }
    if( node2 instanceof state ) { node2 = st; connectionname = ((state)node2).name; }
  }

  // 線を引き直す
  public void resize(){

dprint(&quot;xflow resize\n&quot;);

    int[] b1 = new int[4];
    int[] b2 = new int[4];
    getBounds( node1, b1 );
    getBounds( node2, b2 );
    Point p1 = getBorderPoint( b1[0], b1[1], b1[2], b1[3], b2[0], b2[1], b2[2], b2[3] );
    Point p2 = getBorderPoint( b2[0], b2[1], b2[2], b2[3], b1[0], b1[1], b1[2], b1[3] );
    startx = p1.x;
    starty = p1.y;
    endx   = p2.x;
    endy   = p2.y;

    if( startx &lt; endx ){
      x0 = startx - 5;
      width = endx - startx + 11;
      startx = 5;
      endx = width - 6;
    }
    else{
      x0 = endx - 5;
      width = startx - endx + 11;
      startx = width - 6;
      endx = 5;
    }
    if( starty &lt; endy ){
      y0 = starty - 5;
      height = endy - starty + 11;
      starty = 5;
      endy = height - 6;
    }
    else{
      y0 = endy - 5;
      height = starty - endy + 11;
      starty = height - 6;
      endy = 5;
    }
    setLayoutParams(new AbsoluteLayout.LayoutParams( width, height, x0, y0));
  }

  //コンポーネント描画
  protected void onDraw( Canvas g ){
    int   rx, ry;
    double len, co, si;

    super.onDraw( g );
    rx = startx - endx;
    ry = starty - endy;
    len = java.lang.Math.sqrt( (double)rx * rx + ry * ry );
    co = 9.659D / len*scale;
    si = 2.588D / len*scale;
    g.drawLine( startx, starty, endx, endy, paint );
    g.drawLine( (int)( co * rx + si * ry ) + endx, (int)(-si * rx + co * ry ) + endy, endx, endy, paint );
    g.drawLine( (int)( co * rx - si * ry ) + endx, (int)( si * rx + co * ry ) + endy, endx, endy, paint );
  }

}//~xflow
</codetext>
</codeclip>
<codeclip>
<ID>_C72</ID>
<x0>272</x0>
<y0>376</y0>
<width>252</width>
<height>34</height>
<codetext>// 遷移フローの端子
       class connector extends TextView{
         operation parent;
         String name;
         int x0, y0, width, height;
         View me;

         connector( operation parnt, String nam ){
           super(ACTIVITY);

dprint(&quot;new connector\n&quot;);

           parent = parnt;
           name = nam;
           x0 = 0;
           y0 = 30;
           width = 20;
           height = 20;
           setText(&quot;&quot;);
           setBackgroundColor( Color.argb( 0,0,0,0 ));
           resize();
           me = this;
           this.setOnTouchListener( new View.OnTouchListener(){
             @Override    
             public boolean onTouch(View v, MotionEvent event) {
               if (event.getAction() == MotionEvent.ACTION_UP) {
                 touch_x = (int) event.getRawX();    
                 touch_y = (int) event.getRawY();
                 handler( me,&quot;connector&quot;);
               }
               return true;
             }
           });
         }

         // 位置・大きさを設定する
         public void resize(){
           setLayoutParams(new AbsoluteLayout.LayoutParams( scale*width, scale*height, scale*x0, scale*y0));
         }

         //コンポーネント描画
         protected void onDraw( Canvas g ){
           super.onDraw( g );
         }


       }//~connector

</codetext>
</codeclip>
<codeclip>
<ID>_C74</ID>
<x0>273</x0>
<y0>341</y0>
<width>232</width>
<height>32</height>
<codetext>// 信号(状態図)
class action extends AbsoluteLayout{
  Object element;
  String name;
  String comp1name, comp2name;
  int x0, y0;
  int width, height;
  int startx, starty, endx, endy;
  Paint paint;
  View comp1, comp2;
  View me;

      // 新規作成
      action( Object elem, View p1, View p2 ){
        super(ACTIVITY);

dprint(&quot;new action\n&quot;);

        element = elem;
        name =  xml.elementID( element );

dprint(&quot;name=&quot;+name+&quot;\n&quot;);

        paint = new Paint();
        paint.setStyle(Style.STROKE);
        paint.setStrokeWidth(2.0f);
        paint.setColor(Color.rgb(0,0,0));
        setBackgroundColor( Color.argb( 0,0,0,0 ));
        comp1 = p1;
        comp2 = p2;
        comp1name = get_name( comp1 );
        comp2name = get_name( comp2 );
        if( comp1 instanceof operation ) ((operation)comp1).outpin.inclinkcount();
        if( comp2 instanceof operation ) ((operation)comp2).inpin.inclinkcount();
        me = this;
        this.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;action&quot;);
            }
            return true;
          }
        });
        save();
      }

      // Loginモードで生成  (ファイルの情報をもとに生成／注意：接続するコンポーネントが存在していること)
      action( Object elem ){
        super(ACTIVITY);

dprint(&quot;new action(e)\n&quot;);

        element = elem;
        name =  xml.elementID( element );

dprint(&quot;name=&quot;+name+&quot;\n&quot;);

        paint = new Paint();
        paint.setStyle(Style.STROKE);
        paint.setStrokeWidth(2.0f);
        paint.setColor(Color.rgb(0,0,0));
        setBackgroundColor( Color.argb( 0,0,0,0 ));
        load();
        comp1 = sedit.get_component( comp1name );
        comp2 = sedit.get_component( comp2name );
        if( comp1 instanceof operation ) ((operation)comp1).outpin.inclinkcount();
        if( comp2 instanceof operation ) ((operation)comp2).inpin.inclinkcount();
        me = this;
        this.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;action&quot;);
            }
            return true;
          }
        });
      }

      // 自分を消去する
      public void suicide(){

dprint(&quot;action suicide\n&quot;);

        if( comp1 instanceof operation ) ((operation)comp1).outpin.declinkcount();
        if( comp2 instanceof operation ) ((operation)comp2).inpin.declinkcount();
        xml.del_element(element);
        ViewGroup g = (ViewGroup)getParent();
        g.removeView(me);
      }

      // 内容をロード
      public void load(){

dprint(&quot;action load\n&quot;);

        comp1name = xml.get_attribute( element, &quot;comp1name&quot; );
        comp2name = xml.get_attribute( element, &quot;comp2name&quot; );
      }

      // 内容をセーブ
      public void save(){

dprint(&quot;action save\n&quot;);

        xml.set_attribute( element, &quot;comp1name&quot;, comp1name );
        xml.set_attribute( element, &quot;comp2name&quot;, comp2name );
      }

      // 線を引き直す
      public void resize() {

dprint(&quot;action resize\n&quot;);

        int[] b1 = new int[4];
        int[] b2 = new int[4];
        if( comp1 instanceof operation ) getBounds( ((operation) comp1).outpin, b1 );
        else                             getBounds( comp1, b1 );
        if( comp2 instanceof operation ) getBounds( ((operation) comp2).inpin,  b2 );
        else                             getBounds( comp2, b2 );
        Point p1 = getBorderPoint( b1[0], b1[1], b1[2], b1[3], b2[0], b2[1], b2[2], b2[3] );
        Point p2 = getBorderPoint( b2[0], b2[1], b2[2], b2[3], b1[0], b1[1], b1[2], b1[3] );
        startx = p1.x;
        starty = p1.y;
        endx   = p2.x;
        endy   = p2.y;
        if( startx &lt; endx ){
          x0 = startx - 5;
          width = endx - startx + 11;
          startx = 5;
          endx = width - 6;
        }
        else{
          x0 = endx - 5;
          width = startx - endx + 11;
          startx = width - 6;
          endx = 5;
        }
        if( starty &lt; endy ){
          y0 = starty - 5;
          height = endy - starty + 11;
          starty = 5;
          endy = height - 6;
        }
        else{
          y0 = endy - 5;
          height = starty - endy + 11;
          starty = height - 6;
          endy = 5;
        }
        setLayoutParams(new AbsoluteLayout.LayoutParams( width, height, x0, y0));
      }

      //コンポーネント描画
      protected void onDraw( Canvas g ){
        int   rx, ry;
        double len, co, si;

        super.onDraw( g );
        rx = startx - endx;
        ry = starty - endy;
        len = java.lang.Math.sqrt( (double)rx * rx + ry * ry );
        co = 9.659D / len*scale;
        si = 2.588D / len*scale;
        g.drawLine( startx, starty, endx, endy, paint );
        g.drawLine( (int)( co * rx + si * ry ) + endx, (int)(-si * rx + co * ry ) + endy, endx, endy, paint );
        g.drawLine( (int)( co * rx - si * ry ) + endx, (int)( si * rx + co * ry ) + endy, endx, endy, paint );
      }

    }//~action
</codetext>
</codeclip>
<codeclip>
<ID>_C76</ID>
<x0>270</x0>
<y0>263</y0>
<width>224</width>
<height>37</height>
<codetext>    // 状態
    class state extends EditText{
      Object element;
      String name;
      int x0, y0, width, height;
      int isinitstate;
      Paint paint;
      View me;

      // 新規作成
      state( Object elem, int isinista, String txt, int xx, int yy ){
        super(ACTIVITY);

dprint(&quot;new state\n&quot;);

        element = elem;
        name = xml.elementID( element );
        paint = new Paint();
        paint.setStyle(Style.STROKE);
        paint.setStrokeWidth(2.0f);
        setTextColor( Color.rgb( 0,0,0 ));
        setBackgroundColor( Color.argb( 0,0,0,0 ));
        setGravity(Gravity.CENTER|Gravity.CENTER);
        x0 = xx;
        y0 = yy;
        width = 70;
        height = 40;
        isinitstate = isinista;
        setText(txt);
        resize();
        me = this;
        this.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;state&quot;);
            }
            return true;
          }
        });
        save();
      }

      // Loginモードで生成(ファイルの情報をもとに生成)
      state( Object elem ){
        super(ACTIVITY);

dprint(&quot;new state(e)\n&quot;);

        element = elem;
        name = xml.elementID( element );
        paint = new Paint();
        paint.setStyle(Style.STROKE);
        paint.setStrokeWidth(2.0f);
        setTextColor( Color.rgb( 0,0,0 ));
        setBackgroundColor( Color.argb( 0,0,0,0 ));
        setGravity(Gravity.CENTER|Gravity.CENTER);
        load();
        resize();
        me = this;
        this.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              handler(me,&quot;state&quot;);
            }
            return true;
          }
        });
      }

      // 自分を消去する
      public void suicide(){

dprint(&quot;state suicide\n&quot;);

        xml.del_element(element);
        ViewGroup g = (ViewGroup)getParent();
        g.removeView(me);
      }

      // 内容をロード
      public void load(){

dprint(&quot;state load\n&quot;);

        x0 = parseInt( xml.get_attribute( element, &quot;x0&quot; ) );
        y0 = parseInt( xml.get_attribute( element, &quot;y0&quot; ) );
        width = parseInt( xml.get_attribute( element, &quot;width&quot; ) );
        height = parseInt( xml.get_attribute( element, &quot;height&quot; ) );
        isinitstate = parseInt( xml.get_attribute( element, &quot;isinitstate&quot; ) );
        setText( xml.get_attribute( element, &quot;text&quot; ) );

dprint(&quot;state load end\n&quot;);

      }

      // 内容をセーブ
      public void save(){

dprint(&quot;state save\n&quot;);

        xml.set_attribute( element, &quot;x0&quot;, &quot;&quot; + x0 );
        xml.set_attribute( element, &quot;y0&quot;, &quot;&quot; + y0 );
        xml.set_attribute( element, &quot;width&quot;, &quot;&quot; + width );
        xml.set_attribute( element, &quot;height&quot;, &quot;&quot; + height );
        xml.set_attribute( element, &quot;isinitstate&quot;, &quot;&quot; + isinitstate );
        xml.set_attribute( element, &quot;text&quot;, get_text(this) );
      }

      // 位置・大きさを設定する
      public void resize(){
        setLayoutParams( new AbsoluteLayout.LayoutParams( scale*width,scale*height,scale*x0,scale*y0 ) );
      }

      //コンポーネント描画
      protected void onDraw( Canvas g ){
        super.onDraw( g );
        RectF r = new RectF( 1, 1, scale*width-1, scale*height-1);
        g.drawOval( r, paint );
        if( isinitstate!=0 ){
          RectF r1 = new RectF( scale*5, scale*5, scale*(width-5)-1, scale*(height-5)-1);
          g.drawOval( r1, paint );
        }
      }

    }//~state
</codetext>
</codeclip>
<codeclip>
<ID>_C77</ID>
<x0>251</x0>
<y0>180</y0>
<width>271</width>
<height>37</height>
<codetext>//コマンドを実行して結果をコンソールに表示する
public void execcommand( String smsg, String emsg, String cmd ){

dprint(&quot;exec command\n&quot;);

      console_gui.show();
      console_gui.print(smsg);
      Runtime runtime = Runtime.getRuntime();
      Process process;
      try {            //実行するコマンドを指定
        process = runtime.exec(cmd);
        new PrintThread(process.getInputStream()).start();
        new PrintThread(process.getErrorStream()).start();
        process.waitFor();
      } catch (Exception e) { console_gui.print(emsg); }
    }


class PrintThread extends Thread{
  BufferedReader reader;
  PrintThread( InputStream s ){
    reader = new BufferedReader(new InputStreamReader(s));
  }
  
  public void run(){
    String line;
    try{
      while ((line = reader.readLine()) != null) console_gui.print(line+&quot;\n&quot;);
      reader.close();
    } catch( IOException ie ){ }
  }
}
</codetext>
</codeclip>
<codeclip>
<ID>_C80</ID>
<x0>24</x0>
<y0>120</y0>
<width>201</width>
<height>34</height>
<codetext>// XFile:Fileクラスの拡張クラス
class XFile extends File{
  StringBuffer javatext;
  
  //コンストラクタ宣言
  XFile( String fname ){ super( fname );}
  XFile( File fil, String fname ){ super( fil, fname );}
  XFile( File fil ){ super( fil.getParentFile(), fil.getName() ); }

  //ディレクトリを作成する
  public boolean mkdir(){ return( super.mkdir() ); }

  //ディレクトリかどうか調べる
  public boolean isDirectory(){ return( super.isDirectory() ); }

  //ファイルかどうか調べる
  public boolean isFile(){ return( super.isFile() ); }

  //親のPathを返す
  public XFile getParentfile(){
    File pf1, pf2;
    pf1 = super.getParentFile();
    if( pf1 == null ) return( null );
    pf2 = pf1.getParentFile();
    if( pf2 == null ) return( new XFile( pf1.getName() ) );
    return( new XFile( pf2, pf1.getName() ) );
  }

  //ディレクトリのリストを取り出す
  public XFile[] listFile(){
    int i;
    File[]   files = super.listFiles();
    if( files == null ) return( null );
    XFile[] xfiles = new XFile[ files.length ];
    for( i = 0; i&lt;files.length; i++){
      xfiles[i] = new XFile( this, files[i].getName() );
    } 
    return( xfiles );
  }

  // 中身ごとディレクトリを削除
  public void Xdelete(){
    int i;
    XFile[] files;
    if( this.isDirectory() ){
      files = listFile();
      if( files!= null ) for( i=0; i&lt;files.length; i++ ) { files[i].Xdelete(); }
    }
    boolean b = super.delete();
  }

  // 中身ごとディレクトリをコピー  
  public void Xcopy( XFile d ){
    int i;
    XFile[] files;
    XFile dst = d;

    if( this.isDirectory() ){
      files = listFile();
      dst.Xdelete();
      dst.mkdir();
      if( files == null ) return;
      for( i=0; i&lt;files.length; i++ ) files[i].Xcopy( new XFile( dst, files[i].getName() ) );
    }

    else if( this.isFile() ){
      try{
        FileInputStream  in  = new FileInputStream( this );
        FileOutputStream out = new FileOutputStream( dst );
        byte[] buffer = new byte[1024];
        int read;
        while((read = in.read(buffer)) != -1){
          out.write(buffer, 0, read);
        }
        in.close();
        out.close();
      } catch( IOException e ){  }
    }
  }

  // すべてのサブディレクトリからファイル名を検索してをファイル返す  
  public XFile Xserch( String filename ){
    int i;
    XFile[] files;
    XFile target;

    if( this.isDirectory() ){
      files = listFile();
      if( files == null ) return null;
      for( i=0; i&lt;files.length; i++ ){
        if( ( target = files[i].Xserch( filename ) ) != null ) return target;
      }
      return null;
    }
    else if( this.isFile() ){
      if( this.getName().equals( filename ) ) return this; else return null;
    }
    return null;
  }

  //ファイルとファイルを結合する
  public void Xappend( XFile apfile ){
    XFile tmpfile = new XFile( getParentfile(), &quot;_TEMP_&quot; );
    try{
    BufferedWriter dout = new BufferedWriter( new FileWriter( tmpfile ) );
    BufferedReader din  = new BufferedReader( new FileReader( this ) );
    while( din.ready() ) dout.write( din.read() );
    din.close();
    din  = new BufferedReader( new FileReader( apfile ) );
    while( din.ready() ) dout.write( din.read() );
    din.close();
    dout.close();
    } catch( IOException e ){  }
    tmpfile.Xcopy( this );
    tmpfile.Xdelete();
  }

  //ファイルと文字列を結合する
  public void Xappend( String str ){
    if( this.isDirectory() ) return;
    else if( this.isFile() ){
      XFile tmpfile = new XFile( getParentfile(), &quot;_TEMP_&quot; );
      try{
      BufferedWriter dout = new BufferedWriter( new FileWriter( tmpfile ) );
      BufferedReader din  = new BufferedReader( new FileReader( this ) );
      while( din.ready() ) dout.write( din.read() );
      din.close();
      dout.write( str );
      dout.close();
      } catch( IOException e ){ System.out.println( e ); }
      tmpfile.Xcopy( this );
      tmpfile.Xdelete();
    }
    else{
      try{
      BufferedWriter dout  = new BufferedWriter( new FileWriter( this ) );
      dout.write( str );
      dout.close();
      } catch( IOException e ){ System.out.println( e ); }
    }
  }

  //ファイルの内容を文字列に変換する
  public String toTextString(){
    int c;
    StringBuffer s = new StringBuffer(&quot;&quot;);
    try{
    BufferedReader din = new BufferedReader( new FileReader( this ) );
    while( ( c = din.read() ) != -1 ) s.append( (char)c );
    din.close();
    } catch( IOException ie ){ return( s.toString() ); }
    return( s.toString() );
  }    
   
  public boolean is_xobject()  {
    return( is_xml() &amp;&amp; DocType().equals(&quot;&lt;xobject&gt;&quot;) );
  }

  public boolean is_aobject()  {
    return( is_xml() &amp;&amp; DocType().equals(&quot;&lt;aobject&gt;&quot;) );
  }

  public boolean is_uobject(){
    return( is_xml() &amp;&amp; DocType().equals(&quot;&lt;operation&gt;&quot;) );
  }
  
  public boolean is_pin(){
    return( is_xml() &amp;&amp; DocType().equals(&quot;&lt;pin&gt;&quot;) );
  }
  
  public boolean is_codeclip(){
    return( is_xml() &amp;&amp; DocType().equals(&quot;&lt;codeclip&gt;&quot;) );
  }
  
  public boolean is_KJgroup(){
    return( is_xml() &amp;&amp; DocType().equals(&quot;&lt;KJgroup&gt;&quot;) );
  }
  
  public boolean is_state(){ 
      return( is_xml() &amp;&amp; DocType().equals(&quot;&lt;state&gt;&quot;) );
  }
  
  public boolean is_operation(){
    return( is_xml() &amp;&amp; DocType().equals(&quot;&lt;operation&gt;&quot;) );
  }
  
  // XMLドキュメントかどうか判断する
  public boolean is_xml(){
    String s;
    if( !this.isFile() ) return( false );
    try{
    BufferedReader din = new BufferedReader( new FileReader( this ) );
    s = din.readLine();
    din.close();
    } catch( IOException ie ){ return( false ); }
    return( s.startsWith( &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=&quot; ) );
  }

  // XMLドキュメントのタイプを返す
  private String DocType(){
    String dmy, type;
    try{
    BufferedReader din = new BufferedReader( new FileReader( this ) );
    dmy = din.readLine();
    dmy = din.readLine();
    type  = din.readLine();
    din.close();
    } catch( IOException e ){ return( &quot;&quot; ); }
    return( type );
  }

}//~XFile
  
</codetext>
</codeclip>
<codeclip>
<ID>_C81</ID>
<x0>527</x0>
<y0>434</y0>
<width>246</width>
<height>49</height>
<codetext>// 3ボタンダイアログ
Dialog3 dialog3;
class Dialog3{
    String         id=&quot;&quot;;

    AbsoluteLayout base;
    TextView       tmessage;
    Button         byes;
    Button         bno;
    Button         bcan;

// ファイルコンポーネントを作成
Dialog3(){

dprint(&quot;dialog3\n&quot;);

int bwid = screen_width-32;
int bhei = 62;
int p = 3;

base = new AbsoluteLayout(ACTIVITY);
base.setBackgroundColor(Color.rgb( 255, 255, 255));

tmessage = new TextView(ACTIVITY);
tmessage.setPadding(1, 1, 1, 1);
tmessage.setGravity(Gravity.CENTER|Gravity.CENTER);
tmessage.setTextColor( Color.rgb( 0, 0, 0 ));
tmessage.setBackgroundColor( Color.rgb( 255, 255, 255 ));
tmessage.setText(&quot;&quot;);
tmessage.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bhei,3,p ) );
base.addView( tmessage );
p+=bhei+3;

byes = new Button(ACTIVITY);
byes.setPadding(1, 1, 1, 1);
byes.setGravity(Gravity.CENTER|Gravity.CENTER);
byes.setTextColor( Color.rgb( 0, 0, 0 ));
byes.setBackgroundColor( Color.rgb( 200, 200, 200 ));
byes.setText(&quot;&quot;);
byes.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     ACTIVITY.setContentView(present_view);
     handler(null,id+&quot;_yes&quot;);
   }
});
byes.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bhei,3,p ) );
base.addView( byes );
p+=bhei+3;

bno = new Button(ACTIVITY);
bno.setPadding(1, 1, 1, 1);
bno.setGravity(Gravity.CENTER|Gravity.CENTER);
bno.setTextColor( Color.rgb( 0, 0, 0 ));
bno.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bno.setText(&quot;&quot;);
bno.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     ACTIVITY.setContentView(present_view);
     handler(null,id+&quot;_no&quot;);
   }
});
bno.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bhei,3,p ) );
base.addView( bno );
p+=bhei+3;

bcan = new Button(ACTIVITY);
bcan.setPadding(1, 1, 1, 1);
bcan.setGravity(Gravity.CENTER|Gravity.CENTER);
bcan.setTextColor( Color.rgb( 0, 0, 0 ));
bcan.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bcan.setText(&quot;&quot;);
bcan.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     ACTIVITY.setContentView(present_view);
     handler(null,id+&quot;_cancel&quot;);
   }
});
bcan.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bhei,3,p ) );
base.addView( bcan );
p+=bhei+3;

}

// 表示する
public void show( String i, String m, String y, String n, String c ){
id=i;
tmessage.setText(m);
byes.setText(y);
bno.setText(n);
bcan.setText(c);
ACTIVITY.setContentView(base);
}

}

</codetext>
</codeclip>
<codeclip>
<ID>_C82</ID>
<x0>275</x0>
<y0>446</y0>
<width>244</width>
<height>34</height>
<codetext>// uobject・遷移内部のピン 
    class innerpin extends EditText{
        View parent;
        String name;
        int x0, y0;
        int width, height;
        int linkcount;
        Paint paint;
        View me;

        innerpin( View parnt, String nam, String txt, int rr, int gg, int bb, int xx, int yy, int ww, int hh ){
          super(ACTIVITY);

dprint(&quot;new innerpin\n&quot;);

          parent = parnt;
          name = nam;    
          linkcount = 0;
          paint = new Paint();
          paint.setStyle(Style.STROKE);
          paint.setStrokeWidth(2.0f);
          paint.setColor(Color.rgb(0,0,0));
          setTextSize(20f);
          setTextColor( Color.rgb( 0,0,0 ));
          setBackgroundColor( Color.rgb( rr, gg, bb ));
          setGravity(Gravity.CENTER|Gravity.CENTER);
          x0 = xx;
          y0 = yy;
          width = ww;
          height = hh;
          setText(txt);
          resize();
          me = this;
          this.setOnTouchListener( new View.OnTouchListener(){
            @Override    
            public boolean onTouch(View v, MotionEvent event) {
              if (event.getAction() == MotionEvent.ACTION_UP) {
                requestFocus();
                touch_x = (int) event.getRawX();    
                touch_y = (int) event.getRawY();
                handler( me, &quot;innerpin&quot;);
              }
              return true;
            }
          });
          setVisibility(View.GONE);
        }

       public void inclinkcount(){
         if( ++linkcount &gt; 0 ) setVisibility(View.VISIBLE);
       }

       public void declinkcount(){
         if( --linkcount &lt;= 0 ){
           setVisibility(View.GONE);
           linkcount = 0;
         }
       }

      // 位置・大きさを設定する
       public void resize(){
         setLayoutParams( new AbsoluteLayout.LayoutParams( scale*width,scale*height,scale*x0,scale*y0 ) );
       }

       //コンポーネント描画
       protected void onDraw( Canvas g ){
        super.onDraw( g );
        RectF r = new RectF( 1, 1,scale*width, scale*height);
        g.drawRect( r, paint );
       }

      }//~innerpin
</codetext>
</codeclip>
<xobject>
<ID>_X_G83</ID>
<x0>777</x0>
<y0>224</y0>
<width>102</width>
<height>52</height>
<objectname>init</objectname>
<description>初期化</description>
<operation>
<ID>_O39</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>96</x0>
<y0>298</y0>
<width>270</width>
<height>62</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>43</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>     // androidアプリケーションに初期化する
      oedit.initialise(4);
</codetext>
</operation>
<operation>
<ID>_O5</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>95</x0>
<y0>208</y0>
<width>195</width>
<height>67</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>27</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>0</outpinx0>
<outpiny0>46</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>2</inpinlinkcount>
<description></description>
<codetext>    //  コンポーネントを作成



dprint(&quot;start\n&quot;);



    Xinteger = new Integer(0);

dprint(&quot;create xml\n&quot;);

    xml = new Nxml();
    DisplayMetrics dm = new DisplayMetrics();
    ACTIVITY.getWindowManager().getDefaultDisplay().getMetrics(dm);
    screen_width  = dm.widthPixels;
    screen_height = dm.heightPixels;

dprint(&quot;screen width=&quot;+screen_width+&quot;\n&quot;);
dprint(&quot;screen height=&quot;+screen_height+&quot;\n&quot;);

    ProjectDir      =  new XFile( CurrentDir, &quot;Projects&quot; );
    ResourceDir     =  new XFile( CurrentDir, &quot;res&quot; );
    ProjectFile     =  new XFile( ProjectDir, &quot;NewApplication.prj&quot; );
    SetupFile       =  new XFile( CurrentDir,&quot;ObjectEditor.xml&quot;);
    GUIDesignerWork =  new XFile( CurrentDir,&quot;GUI.xml&quot;);
    LayoutData      =  new XFile( CurrentDir,&quot;Layout.dat&quot;);
    TempFile        =  new XFile( CurrentDir,&quot;temp.txt&quot;);


    SourceFile =    new XFile[]{
                      new XFile(CurrentDir,&quot;javatext.java&quot;),
                      new XFile(CurrentDir,&quot;javatext.java&quot;),
                      new XFile(CurrentDir,&quot;NewApplication.cpp&quot;),
                      new XFile(CurrentDir,&quot;NewApplication.cpp&quot;),
                      new XFile(CurrentDir,&quot;javatext.java&quot;),
                      new XFile(CurrentDir,&quot;test.bas&quot;),
                      new XFile(CurrentDir,&quot;test.c&quot;),
                    };

    ObjectLib =     new XFile[] {
                      new XFile(CurrentDir,&quot;ObjectLib_J&quot;),
                      new XFile(CurrentDir,&quot;ObjectLib_J&quot;),
                      new XFile(CurrentDir,&quot;ObjectLib_C&quot;),
                      new XFile(CurrentDir,&quot;ObjectLib_C&quot;),
                      new XFile(CurrentDir,&quot;ObjectLib_J&quot;),
                      new XFile(CurrentDir,&quot;ObjectLib_B&quot;),
                      new XFile(CurrentDir,&quot;ObjectLib_C&quot;),
                    };


    ApplicationType = 0;
    clipboad =   xml.new_element( xml.root_element(), &quot;clipboad&quot;,   &quot;clipboad&quot;   );

dprint(&quot;create gui\n&quot;);

    oedit_gui = new ObjEditGUI();
    sedit_gui = new StateEditGUI();
    property_gui = new PropertyGUI();
    file_gui = new FileGUI();
    console_gui = new ConsoleGUI();
    editor_gui = new EditorGUI();
    input_gui = new InputGUI();
    init_gui = new InitGUI();
    dialog2 = new Dialog2();
    dialog3 = new Dialog3();
    image_gui = new ImageGUI();

dprint(&quot;succeed create gui\n&quot;);

    oedit = new ObjectEditor();
    sedit = new StateEditor();
</codetext>
</operation>
<relation>
<ID>_R42</ID>
<pin1name>_O5</pin1name>
<pin2name>_O39</pin2name>
</relation>
<pin>
<ID>_P84</ID>
<text>start()</text>
<x0>4</x0>
<y0>11</y0>
<width>54</width>
<height>25</height>
<px>5</px>
<py>32</py>
</pin>
<ID_maker>106</ID_maker>
<operation>
<ID>_O86</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>94</x0>
<y0>22</y0>
<width>192</width>
<height>70</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>30</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>0</outpinx0>
<outpiny0>50</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// デバッグオブジェクトを作成




try{
  if(debug_mode) dbg = new FileWriter(&quot;/sdcard/debug.txt&quot;);
} catch(Exception e){}
</codetext>
</operation>
<relation>
<ID>_R87</ID>
<pin1name>_P84</pin1name>
<pin2name>_O86</pin2name>
</relation>
<operation>
<ID>_O90</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>94</x0>
<y0>102</y0>
<width>270</width>
<height>84</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>43</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>0</outpinx0>
<outpiny0>63</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>     // ホームディレクトリが存在しないときは
     // インストーラを起動する




    fileselector = new FileSelector();
    home = new File(&quot;data&quot;);
//  home = ACTIVITY.getFilesDir();
//  home = Environment.getExternalStorageDirectory();
    CurrentDir =  new XFile( home, &quot;objedit&quot; );
    if( !CurrentDir.exists() ){
      (new Installer()).start();
      return;
    }
    else if( !CurrentDir.isDirectory() ){
      ACTIVITY.finish();
    }
</codetext>
</operation>
<relation>
<ID>_R91</ID>
<pin1name>_O86</pin1name>
<pin2name>_O90</pin2name>
</relation>
<codeclip>
<ID>_C93</ID>
<x0>380</x0>
<y0>179</y0>
<width>113</width>
<height>50</height>
<codetext>// インストーラ
File home;
class Installer implements CallBackAccepter{

  //インストーラを作成
  Installer(){
    dprint(&quot;install gui\n&quot;);
  }


  // インストールする
  public void start(){
    ACTIVITY.setTitle(&quot;インストール中...&quot;);

    // ファイル選択ダイアログを呼び出す(apkファイルはSDカード上にあるものとする)
    fileselector.show(this, &quot;インストールファイル(.apk)の選択&quot;,Environment.getExternalStorageDirectory());
  }

  // ファイル選択ダイアログからのコールバック
  public void callBack( Object obj ){

    // ファイル選択をキャンセルした場合は終了する
    if( obj == null ){
      ACTIVITY.finish();
      return;
    }

    XFile apkfile = new XFile((File)obj);

    // 一時ディレクトリを作成
    XFile tmp_dir  = new XFile(CurrentDir, &quot;tmp&quot;);
    if(!tmp_dir.exists()){
      tmp_dir.mkdirs();
    }

    // apkファイル展開を展開する
    unzip( apkfile, tmp_dir );

    // 展開したファイルからbusyboxコマンド実行ファイルを取り出す
    XFile assets_dir = new XFile(tmp_dir, &quot;assets&quot;);
    XFile busybox = new XFile(CurrentDir, &quot;busybox&quot;);
    (new XFile(assets_dir, &quot;busybox.mp3&quot;)).Xcopy(busybox);
    execute(&quot;chmod 777 &quot;+busybox.getPath(), true );

    // 展開したファイルからsystem用の圧縮ファイルを取り出す
    XFile systar = new XFile(CurrentDir, &quot;system.tar.gz&quot;);
    (new XFile(assets_dir, &quot;system-2.0.tar.gz.mp3&quot;)).Xcopy(systar);
    execute(&quot;chmod 777 &quot;+systar.getPath(), true );

    // 一時ディレクトリを消去
    tmp_dir.Xdelete();

    // system用圧縮ファイルを解凍する
    execute(busybox.getPath()+&quot; tar -C &quot;+CurrentDir.getPath()+&quot; -xzf &quot;+systar.getPath(), true );

    //busybox用コマンドをインストール
    XFile sys_dir   = new XFile(CurrentDir, &quot;system&quot;);
    XFile bin_dir   = new XFile(sys_dir, &quot;bin&quot;);
    XFile bbin_dir  = new XFile(bin_dir, &quot;bbdir&quot;);
    if(!bbin_dir.exists()){
      bbin_dir.mkdirs();
      execute(&quot;chmod 777 &quot;+bbin_dir.getPath(), true );
    }
    execute(busybox.getPath()+&quot; --install -s &quot;+bbin_dir.getPath(), true);

    // busyboxコマンドを消去
    busybox.Xdelete();

    // システム用圧縮ファイルを消去
    systar.Xdelete();

    // objedit用のインストールファイルを展開する
    unzipFromResource( R.raw.install, home );

    // apkファイルをsystem/classesディレクトリに&quot;terminal-ide.apk&quot;というファイル名でコピーする
    XFile cls_dir = new XFile(sys_dir, &quot;classes&quot;);
    if(!cls_dir.exists()){
      cls_dir.mkdirs();
      execute(&quot;chmod 777 &quot;+cls_dir.getPath(), true );
    }
    XFile apkcopy = new XFile(cls_dir, &quot;terminal-ide.apk&quot; );
    apkfile.Xcopy(apkcopy);
    execute(&quot;chmod 777 &quot;+apkcopy.getPath(), true );
    resume();
  }

}

</codetext>
</codeclip>
<relation>
<ID>_R98</ID>
<pin1name>_O90</pin1name>
<pin2name>_O5</pin2name>
</relation>
<pin>
<ID>_P101</ID>
<x0>380</x0>
<y0>232</y0>
<width>75</width>
<height>27</height>
<text>resume()</text>
<px>35</px>
<py>63</py>
</pin>
<relation>
<ID>_R104</ID>
<pin1name>_P101</pin1name>
<pin2name>_O5</pin2name>
</relation>
</xobject>
<codeclip>
<ID>_C85</ID>
<x0>31</x0>
<y0>521</y0>
<width>339</width>
<height>113</height>
<codetext>
//  *********       メイン処理関数      ***********

View target, target2; String hmode=&quot;&quot;;
int  touch_x, touch_y, touch_x0, touch_y0;
XFile target_file;
public void handler( View view, String command ){

      int loc[] = new int[2];
      loc[0] = loc[1] = 0;

dprint(&quot;handler: command=&quot;+command+&quot;, mode=&quot;+hmode+&quot;\n&quot;);

      if(command.equals(&quot;guidesigner:open&quot;))  gopen(fileselector.selected_file);

      else if(command.equals(&quot;callback:edit_menu&quot;)){
        Object project = xml.child( xml.root_element(), &quot;project&quot; );
        if( project != null ){
          Object properties = xml.child( project, &quot;properties&quot; );
          if( properties != null ){
            xml.set_attribute( properties, &quot;menu&quot;, editor_gui.text );
            menu_gui = new MenuGUI();
          }
        }
        hmode = &quot;&quot;;
      }
      
      else if(command.equals(&quot;obup&quot;)){

dprint(&quot;obup:\n&quot;);
dprint(&quot;objedit.elenent=&quot;+xml.elementID( oedit.element )+&quot;\n&quot;);

        if( !xml.elementID( oedit.element ).equals(&quot;project&quot;) ){
          Object p = xml.parent_element( oedit.element  );

dprint(&quot;parent=&quot;+p+&quot;\n&quot;);

          oedit.Logout();
          oedit.Login(p);
        }
        hmode = &quot;&quot;;
      }
      else if(command.equals(&quot;sbup&quot;)){
        Object p = xml.parent_element( sedit.element  );
        sedit.Logout();
        oedit.Login(p);
        hmode = &quot;&quot;;
      }
      else if(command.equals(&quot;obnew&quot;)){
        init_gui.show(&quot;obnew&quot;);
        hmode = &quot;&quot;;
      }
        else if(command.equals(&quot;obnew_init_open&quot;)){
          hmode = &quot;&quot;;
          fileselector.show(&quot;obnew_init_open_select&quot;, ProjectDir);
        }
          else if( command.equals(&quot;obnew_init_open_select&quot;)){
            hmode = &quot;&quot;;
            File f = fileselector.selected_file;
            if( f != null ) oedit.open(f);
          }
        else if(command.equals(&quot;obnew_init_java&quot;)){
          hmode = &quot;&quot;;
          oedit.initialise(0);
        }
        else if(command.equals(&quot;obnew_init_applet&quot;)){
          hmode = &quot;&quot;;
          oedit.initialise(1);
        }
        else if(command.equals(&quot;obnew_init_cpp_console&quot;)){
          hmode = &quot;&quot;;
          oedit.initialise(2);
        }
        else if(command.equals(&quot;obnew_init_cpp_window&quot;)){
          hmode = &quot;&quot;;
          oedit.initialise(3);
        }
        else if(command.equals(&quot;obnew_init_android&quot;)){
          hmode = &quot;&quot;;
          oedit.initialise(4);
        }
        else if(command.equals(&quot;obnew_init_basic&quot;)){
          hmode = &quot;&quot;;
          oedit.initialise(5);
        }
        else if(command.equals(&quot;obnew_init_c&quot;)){
          hmode = &quot;&quot;;
          oedit.initialise(6);
        }
      else if(command.equals(&quot;sbnew&quot;)){
        hmode = &quot;&quot;;
        init_gui.show(&quot;sbnew&quot;);
      }
        else if(command.equals(&quot;sbnew_init_open&quot;)){
          hmode = &quot;&quot;;
          fileselector.show(&quot;sbnew_init_open_select&quot;, ProjectDir);
        }
          else if( command.equals(&quot;sbnew_init_open_select&quot;)){
            hmode = &quot;&quot;;
            File f = fileselector.selected_file;
            if( f != null ) sedit.open(f);
          }
        else if(command.equals(&quot;sbnew_init_java&quot;)){
          hmode = &quot;&quot;;
          sedit.initialise(0);
        }
        else if(command.equals(&quot;sbnew_init_applet&quot;)){
          hmode = &quot;&quot;;
          sedit.initialise(1);
        }
        else if(command.equals(&quot;sbnew_init_cpp_console&quot;)){
          sedit.initialise(2);
          hmode = &quot;&quot;;
        }
        else if(command.equals(&quot;sbnew_init_cpp_window&quot;)){
          sedit.initialise(3);
          hmode = &quot;&quot;;
        }
        else if(command.equals(&quot;sbnew_init_cpp_window&quot;)){
          sedit.initialise(4);
          hmode = &quot;&quot;;
        }
        else if(command.equals(&quot;sbnew_init_android&quot;)){
          sedit.initialise(5);
          hmode = &quot;&quot;;
        }
        else if(command.equals(&quot;sbnew_init_basic&quot;)){
          sedit.initialise(6);
          hmode = &quot;&quot;;
        }
        else if(command.equals(&quot;sbnew_init_c&quot;)){
          sedit.initialise(7);
          hmode = &quot;&quot;;
        }
      else if(command.equals(&quot;obfile&quot;)){
        file_gui.show(&quot;obfile&quot;);
        hmode = &quot;&quot;;
      }
        else if( command.equals(&quot;obfile_open&quot;)){
          fileselector.show(&quot;obfile_open_select&quot;, ProjectDir);
          hmode = &quot;&quot;;
        }
          else if( command.equals(&quot;obfile_open_select&quot;)){
            File f = fileselector.selected_file;
            if( f != null ) oedit.open(f);
            hmode = &quot;&quot;;
          }
        else if( command.equals(&quot;obfile_save&quot;)){
          oedit.save();
          hmode = &quot;&quot;;
        }
        else if( command.equals(&quot;obfile_copy&quot;)){
          hmode = &quot;obfile_copy_to_file&quot;;
        }
        else if( command.equals(&quot;obfile_paste&quot;)){
          fileselector.show(&quot;obfile_paste_select&quot;, ObjectLib[ApplicationType]);
          hmode = &quot;&quot;;
        }
          else if( command.equals(&quot;obfile_paste_select&quot;)){
            target_file = fileselector.selected_file;
            hmode = &quot;obfile_paste_from_file&quot;;
          }
        else if( command.equals(&quot;obfile_delete&quot;)){
          fileselector.show(&quot;obfile_delete_select&quot;, ObjectLib[ApplicationType]);
          hmode = &quot;&quot;;
        }
          else if( command.equals(&quot;obfile_delete_select&quot;)){
            target_file = fileselector.selected_file;
            if( target_file != null ) target_file.Xdelete();
            hmode = &quot;&quot;;
          }
        else if( command.equals(&quot;obfile_exit&quot;)){
          dialog3.show(&quot;ofile_exit_save&quot;, &quot;プロジェクトを保存しますか？&quot;, &quot;yes&quot;, &quot;no&quot;, &quot;cancel&quot; );
          hmode = &quot;&quot;;
        }
          else if(command.equals(&quot;obfile_exit_save_yes&quot;)){
            hmode = &quot;&quot;;
            oedit.save();
            exitProgram();
          }
          else if(command.equals(&quot;obfile_exit_save_no&quot;)){
            hmode = &quot;&quot;;
            exitProgram();
          }
          else if(command.equals(&quot;obfile_exit_save_cancel&quot;)){
            hmode = &quot;&quot;;
          }
      else if(command.equals(&quot;sbfile&quot;)){
        hmode = &quot;&quot;;
        file_gui.show(&quot;sbfile&quot;);
      }
        else if( command.equals(&quot;sbfle_open&quot;)){
          fileselector.show(&quot;sbfile_open_select&quot;, ProjectDir);
          hmode = &quot;&quot;;
        }
          else if( command.equals(&quot;sbfile_open_select&quot;)){
            File f = fileselector.selected_file;
            if( f != null ) sedit.open(f);
            hmode = &quot;&quot;;
          }
        else if( command.equals(&quot;sbfile_save&quot;)){
          sedit.save();
          hmode = &quot;&quot;;
        }
        else if( command.equals(&quot;sbfile_copy&quot;)){
          hmode = &quot;sbile_copy_to_file&quot;;
        }
        else if( command.equals(&quot;sbfile_paste&quot;)){
          fileselector.show(&quot;sbfile_paste_select&quot;, ObjectLib[ApplicationType]);
          hmode = &quot;&quot;;
        }
          else if( command.equals(&quot;sbfile_paste_select&quot;)){
            target_file = fileselector.selected_file;
            hmode = &quot;sbfile_paste_from_file&quot;;
          }
        else if( command.equals(&quot;sbfile_delete&quot;)){
          fileselector.show(&quot;sbfile_delete_select&quot;, ObjectLib[ApplicationType]);
          hmode = &quot;&quot;;
        }
          else if( command.equals(&quot;sbfile_delete_select&quot;)){
            target_file = fileselector.selected_file;
            if( target_file != null ) target_file.Xdelete();
            hmode = &quot;&quot;;
          }
        else if( command.equals(&quot;sbfile_exit&quot;)){
          dialog3.show(&quot;sfile_exit_save&quot;, &quot;プロジェクトを保存しますか？&quot;, &quot;yes&quot;, &quot;no&quot;, &quot;cancel&quot; );
          hmode = &quot;&quot;;
        }
          else if(command.equals(&quot;sbfile_exit_save_yes&quot;)){
            hmode = &quot;&quot;;
            sedit.save();
            exitProgram();
          }
          else if(command.equals(&quot;sbfile_exit_save_no&quot;)){
            hmode = &quot;&quot;;
            exitProgram();
          }
          else if(command.equals(&quot;sbfile_exit_save_cancel&quot;)){
            hmode = &quot;&quot;;
          }
      else if(command.equals(&quot;obcompile&quot;)){

        console_gui.show();
        Object celement = oedit.element;

            oedit.Logout();
            SourceFile[ApplicationType].Xdelete();
            if( ApplicationType == 0 || ApplicationType == 1 || ApplicationType == 4 ){
              String s = ImportFiles[ApplicationType]
                       + compile_JAVA( project, true, new Vector() );
              s = Xreplace( s, AppName, xml.get_attribute( project, &quot;objectname&quot; ) );
              SourceFile[ApplicationType].Xappend( s );
              if( ApplicationType == 4 ){
                try{
                  BufferedWriter dout = new BufferedWriter( new FileWriter( new File(CurrentDir, &quot;AndroidManifest.xml&quot;) ) );
                  dout.write( NativeHelpCommand[4]  );
                  dout.close();
                } catch( IOException e ){  }
              }
            }
            else  if( ApplicationType ==2 || ApplicationType == 3 ){
              StringBuffer clsbuf  = new StringBuffer(&quot;&quot;);
              StringBuffer funcbuf = new StringBuffer(&quot;&quot;);
              StringBuffer initbuf = new StringBuffer(&quot;&quot;);
              compile_CPP( project, clsbuf, funcbuf, initbuf, new Vector() );
              String s = ImportFiles[ApplicationType]
                       + clsbuf.toString() + &quot;\n&quot;
                       + funcbuf.toString()
                       + &quot;\nvoid Startup(){\n&quot; + initbuf.toString() +&quot; \n}\n&quot;
                       + ProgramStartupCode[ApplicationType];
              s = Xreplace( s, AppName, xml.get_attribute( project, &quot;objectname&quot; ) );
              SourceFile[ApplicationType].Xappend( s );
            } 
            else  if( ApplicationType == 5 ){
              StringBuffer clsbuf  = new StringBuffer(&quot;&quot;);
              StringBuffer funcbuf = new StringBuffer(&quot;&quot;);
              StringBuffer initbuf = new StringBuffer(&quot;&quot;);
              compile_BASIC( project, clsbuf, funcbuf, initbuf, new Vector() );
              String s = ImportFiles[ApplicationType]
                       + clsbuf.toString() 
                       + initbuf.toString()
                       + ProgramStartupCode[ApplicationType]
                       + funcbuf.toString();
              s = Xreplace( s, AppName, xml.get_attribute( project, &quot;objectname&quot; ) );
              SourceFile[ApplicationType].Xappend( s );
            } 
            else  if( ApplicationType == 6 ){
              StringBuffer clsbuf  = new StringBuffer(&quot;void _SINIT();\n&quot;);
              StringBuffer funcbuf = new StringBuffer(&quot;&quot;);
              StringBuffer initbuf = new StringBuffer(&quot;void _SINIT(){\n&quot;);
              compile_C( project, clsbuf, funcbuf, initbuf, new Vector() );
              String s = ImportFiles[ApplicationType]
                       + clsbuf.toString() 
                       + initbuf.toString() + &quot;\n}\n&quot;
                       + ProgramStartupCode[ApplicationType]
                       + funcbuf.toString();
              s = Xreplace( s, AppName, xml.get_attribute( project, &quot;objectname&quot; ) );
              SourceFile[ApplicationType].Xappend( s );
            } 
            oedit.Login( celement );
            execcommand( &quot;コンパイルします．\n&quot;, &quot;\nエラー！！\n&quot;, CompileCommand[ApplicationType] );
            hmode = &quot;&quot;;
      }

      else if(command.equals(&quot;sbcompile&quot;)){

        console_gui.show();
        Object celement = sedit.element;

            oedit.Logout();
            SourceFile[ApplicationType].Xdelete();
            if( ApplicationType == 0 || ApplicationType == 1 || ApplicationType == 4 ){
              String s = ImportFiles[ApplicationType]
                       + compile_JAVA( project, true, new Vector() );
              s = Xreplace( s, AppName, xml.get_attribute( project, &quot;objectname&quot; ) );
              SourceFile[ApplicationType].Xappend( s );
              if( ApplicationType == 4 ){
                try{
                  BufferedWriter dout = new BufferedWriter( new FileWriter( new File(&quot;AndroidManifest.xml&quot;) ) );
                  dout.write( NativeHelpCommand[4]  );
                  dout.close();
                } catch( IOException e ){  }
              }
            }
            else  if( ApplicationType ==2 || ApplicationType == 3 ){
              StringBuffer clsbuf  = new StringBuffer(&quot;&quot;);
              StringBuffer funcbuf = new StringBuffer(&quot;&quot;);
              StringBuffer initbuf = new StringBuffer(&quot;&quot;);
              compile_CPP( project, clsbuf, funcbuf, initbuf, new Vector() );
              String s = ImportFiles[ApplicationType]
                       + clsbuf.toString() + &quot;\n&quot;
                       + funcbuf.toString()
                       + &quot;\nvoid Startup(){\n&quot; + initbuf.toString() +&quot; \n}\n&quot;
                       + ProgramStartupCode[ApplicationType];
              s = Xreplace( s, AppName, xml.get_attribute( project, &quot;objectname&quot; ) );
              SourceFile[ApplicationType].Xappend( s );
            } 
            else  if( ApplicationType == 5 ){
              StringBuffer clsbuf  = new StringBuffer(&quot;&quot;);
              StringBuffer funcbuf = new StringBuffer(&quot;&quot;);
              StringBuffer initbuf = new StringBuffer(&quot;&quot;);
              compile_BASIC( project, clsbuf, funcbuf, initbuf, new Vector() );
              String s = ImportFiles[ApplicationType]
                       + clsbuf.toString() 
                       + initbuf.toString()
                       + ProgramStartupCode[ApplicationType]
                       + funcbuf.toString();
              s = Xreplace( s, AppName, xml.get_attribute( project, &quot;objectname&quot; ) );
              SourceFile[ApplicationType].Xappend( s );
            } 
            else  if( ApplicationType == 6 ){
              StringBuffer clsbuf  = new StringBuffer(&quot;void _SINIT();\n&quot;);
              StringBuffer funcbuf = new StringBuffer(&quot;&quot;);
              StringBuffer initbuf = new StringBuffer(&quot;void _SINIT(){\n&quot;);
              compile_C( project, clsbuf, funcbuf, initbuf, new Vector() );
              String s = ImportFiles[ApplicationType]
                       + clsbuf.toString() 
                       + initbuf.toString() + &quot;\n}\n&quot;
                       + ProgramStartupCode[ApplicationType]
                       + funcbuf.toString();
              s = Xreplace( s, AppName, xml.get_attribute( project, &quot;objectname&quot; ) );
              SourceFile[ApplicationType].Xappend( s );
            } 
            sedit.Login( celement );
            execcommand( &quot;コンパイルします．\n&quot;, &quot;\nエラー！！\n&quot;, CompileCommand[ApplicationType] );
            hmode = &quot;&quot;;
      }
      else if(command.equals(&quot;obrun&quot;)){
        execcommand( &quot;実行します\n&quot;, &quot;\n実行できません\n&quot;, RunCommand[ApplicationType] );
        hmode = &quot;&quot;;
      }
      else if(command.equals(&quot;sbrun&quot;)){
        execcommand( &quot;実行します\n&quot;, &quot;\n実行できません\n&quot;, RunCommand[ApplicationType] );
        hmode = &quot;&quot;;
      }
      else if(command.equals(&quot;obsetting&quot;)){
        property_gui.show();
        hmode = &quot;&quot;;
      }
      else if(command.equals(&quot;sbsetting&quot;)){
        property_gui.show();
        hmode = &quot;&quot;;
      }
      else if(command.equals(&quot;obcamera&quot;)){
        oedit_gui.print_image();
        hmode = &quot;&quot;;
      }
      else if(command.equals(&quot;sbcamera&quot;)){
        sedit_gui.print_image();
        hmode = &quot;&quot;;
      }
      else if(command.equals(&quot;obdelete&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;sbdelete&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;obcopy&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;sbcopy&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;obpaste&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;sbpaste&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;obxobj&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;obaobj&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;obuobj&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;obsignal&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;obpin&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;obcodeclip&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;obgroup&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;sbstate&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;sbtrans&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;sbsignal&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;sbpin&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;sbcodeclip&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;obgtox&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;obxtog&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;obguidsin&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;sbguidsin&quot;)){
        layout_data = xml.get_attribute( sedit.element, &quot;レイアウト&quot; );
        guidsin(&quot;callback:sbguidsin&quot;);
        hmode = &quot;&quot;;
      }
      else if(command.equals(&quot;callback:obguidsin&quot;)){  // 未実装
        if(layout_data != null){
          Object obj;
          if( ( obj = oedit.paste_file( GUIDesignerWork, touch_x0, touch_y0 ) ) != null ){
            xml.set_attribute( obj,&quot;レイアウト&quot;, layout_data );
          }
        }
        hmode = &quot;&quot;;
      }
      else if(command.equals(&quot;callback:sbguidsin&quot;)){  // 未実装
        if(layout_data != null){
          Object elem = sedit.element;
          Object prnt = xml.parent_element( elem );
          String id = xml.elementID( elem );
          sedit.Logout();
          xml.del_element( elem ); 
          Object elem2 = xml.new_element( prnt, GUIDesignerWork, id );

dprint(&quot;callback:sbguidsin GUI element=&quot;+elem2+&quot;\n&quot;);
dprint(&quot;parent=&quot;+prnt+&quot;\n&quot;);
dprint(&quot;id=&quot;+id+&quot;\n&quot;);

          xml.set_attribute( elem2, &quot;レイアウト&quot;, layout_data );
          sedit.Login( elem2 );
        }
        hmode = &quot;&quot;;
      }
      else if(command.equals(&quot;opanel&quot;)){
        oedit_gui.opanel.getLocationOnScreen( loc );
        touch_x0 = (touch_x - loc[0])/scale;
        touch_y0 = (touch_y - loc[1])/scale;

        if( hmode.equals(&quot;obguidsin&quot;)){
          layout_data = null;
          guidsin(&quot;callback:obguidsin&quot;);
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;obxobj&quot;)){
          hmode = &quot;&quot;;
          input_gui.show( &quot;opanel_obxobj_input&quot;, &quot;オブジェクト名を入力して下さい&quot;, &quot;Object&quot; + oedit.ID_maker );
        }
        else if( hmode.equals(&quot;obaobj&quot;)){
          hmode = &quot;&quot;;
          input_gui.show( &quot;opanel_obaobj_input&quot;, &quot;オブジェクト名を入力して下さい&quot;, &quot;Object&quot; + oedit.ID_maker );
        }
        else if( hmode.equals(&quot;obuobj&quot;)){
          Object e = xml.new_element( oedit.element,&quot;operation&quot;, &quot;_O&quot; + oedit.ID_maker++ );
          uobject x = new uobject( e, touch_x0, touch_y0, &quot;in()&quot;, 90, 20, 40, 20, &quot;out()&quot;, 90, 40, 40, 20 );
          oedit_gui.add(x);
          hmode = &quot;&quot;;
        }      
        else if( hmode.equals(&quot;obpin&quot;)){
          Object e = xml.new_element( oedit.element, &quot;pin&quot;, &quot;_P&quot; + oedit.ID_maker++ );
          pin x = new pin( e, &quot;Pin&quot;  + (oedit.ID_maker-1) + &quot;()&quot;, touch_x0, touch_y0 );
          oedit_gui.add(x);
          x.requestFocus();
          x.selectAll();
          hmode = &quot;&quot;;
        }      
        else if( hmode.equals(&quot;obcodeclip&quot;)){
          Object e = xml.new_element( oedit.element, &quot;codeclip&quot;, &quot;_C&quot;+oedit.ID_maker++ );
          codeclip x = new codeclip( e, &quot;&quot;, touch_x0, touch_y0 );
          oedit_gui.add(x);
          hmode = &quot;&quot;;
        }      
        else if( hmode.equals(&quot;obgroup&quot;)){
          Object e = xml.new_element( oedit.element, &quot;KJgroup&quot;, &quot;_G&quot;+oedit.ID_maker++ );
          KJgroup x = new KJgroup( e, &quot;Group&quot;  + (oedit.ID_maker-1), touch_x0, touch_y0 );
          oedit_gui.add(x);
          hmode = &quot;&quot;;
        }      
        else if( hmode.equals(&quot;obpaste&quot;)){
          oedit.paste_clipboad( touch_x0, touch_y0 );
          hmode = &quot;&quot;;
        }      
        else if( hmode.equals(&quot;obfile_paste_from_file&quot;)){
          oedit.paste_file( target_file, touch_x0, touch_y0 );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;move_xobject&quot;)){
          xobject x = (xobject)target;
          x.x0 = touch_x0;
          x.y0 = touch_y0;
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;move_aobject&quot;)){
          aobject x = (aobject)target;
          x.x0 = touch_x0;
          x.y0 = touch_y0;
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;move_uobject&quot;)){
          uobject x = (uobject)target;
          x.x0 = touch_x0;
          x.y0 = touch_y0;
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;move_pin&quot;)){
          pin x = (pin)target;
          x.x0 = touch_x0;
          x.y0 = touch_y0;
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;move_codeclip&quot;)){
          codeclip x = (codeclip)target;
          x.x0 = touch_x0;
          x.y0 = touch_y0;
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;move_KJgroup&quot;)){
          KJgroup x = (KJgroup)target;
          x.x0 = touch_x0;
          x.y0 = touch_y0;
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;resize_xobject&quot;)){
          xobject x = (xobject)target;
          x.width  = max( touch_x0 - x.x0, Margin );
          x.height = max( touch_y0 - x.y0, Margin+80/scale );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;resize_aobject&quot;)){
          aobject x = (aobject)target;
          x.width  = max( touch_x0 - x.x0, Margin );
          x.height = max( touch_y0 - x.y0, Margin+80/scale );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;resize_uobject&quot;)){
          uobject x = (uobject)target;
          x.width  = max( touch_x0 - x.x0, Margin );
          x.height = max( touch_y0 - x.y0, Margin+20 );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;resize_pin&quot;)){
          pin x = (pin)target;
          x.width  = max( touch_x0 - x.x0, Margin );
          x.height = max( touch_y0 - x.y0, Margin );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;resize_codeclip&quot;)){
          codeclip x = (codeclip)target;
          x.width  = max( touch_x0 - x.x0, Margin+20 );
          x.height = max( touch_y0 - x.y0, Margin );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;resize_KJgroup&quot;)){
          KJgroup x = (KJgroup)target;
          x.width  = max( touch_x0 - x.x0, Margin );
          x.height = max( touch_y0 - x.y0, Margin );
          hmode = &quot;&quot;;
        }
        else  hmode = &quot;&quot;;
      }
      else if( command.equals(&quot;opanel_obxobj_input&quot;)){
        Object e = xml.new_element( oedit.element, &quot;xobject&quot;, &quot;_X&quot; + oedit.ID_maker++ );
        xobject x = new xobject( e, input_gui.text, &quot;&quot;, touch_x0, touch_y0 );
        oedit_gui.add(x);
        hmode = &quot;&quot;;
      }
      else if( command.equals(&quot;opanel_obaobj_input&quot;)){
        Object e = xml.new_element( oedit.element, &quot;aobject&quot;, &quot;_A&quot; + oedit.ID_maker++ );
        aobject x = new aobject( e, input_gui.text, &quot;&quot;, touch_x0, touch_y0 );
        oedit_gui.add(x);
        hmode = &quot;&quot;;
      }
      else if(command.equals(&quot;spanel&quot;)){
        sedit_gui.spanel.getLocationOnScreen( loc );
        touch_x0 = (touch_x - loc[0])/scale;
        touch_y0 = (touch_y - loc[1])/scale;

        if( hmode.equals(&quot;sbstate&quot;)){
          Object e = xml.new_element( sedit.element, &quot;state&quot;, &quot;_S&quot; + sedit.ID_maker++ );
          state x = new state( e, 0, &quot;  新しい状態&quot;, touch_x0 , touch_y0 );
          sedit_gui.add(x);
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;sbtrans2&quot;)){
          Object e = xml.new_element( sedit.element, &quot;operation&quot;, &quot;_O&quot; + sedit.ID_maker++ );
          operation x = new operation( e, touch_x0, touch_y0, (state)target, (state)target2, &quot;in()&quot;, 90, 20, 40, 20, &quot;out()&quot;, 90, 40, 40, 20 );
          sedit_gui.add(x);
          sedit_gui.addBack(x.inflow);
          sedit_gui.addBack(x.outflow);
          hmode = &quot;&quot;;
        }      
        else if( hmode.equals(&quot;sbpin&quot;)){
          Object e = xml.new_element( sedit.element, &quot;pin&quot;, &quot;_P&quot; + sedit.ID_maker++ );
          pin x = new pin( e, &quot;Pin&quot;  + (sedit.ID_maker-1) + &quot;()&quot;, touch_x0, touch_y0 );
          sedit_gui.add(x);
          x.requestFocus();
          x.selectAll();
          hmode = &quot;&quot;;
        }      
        else if( hmode.equals(&quot;sbcodeclip&quot;)){
          Object e = xml.new_element( sedit.element, &quot;codeclip&quot;, &quot;_C&quot;+sedit.ID_maker++ );
          codeclip x = new codeclip( e, &quot;&quot;, touch_x0, touch_y0 );
          sedit_gui.add(x);
          hmode = &quot;&quot;;
        }      
        else if( hmode.equals(&quot;sbpaste&quot;)){
          sedit.paste_clipboad( touch_x0, touch_y0 );
          hmode = &quot;&quot;;
        }      
        else if( hmode.equals(&quot;sbfile_paste_from_file&quot;)){
          sedit.paste_file( target_file, touch_x0, touch_y0 );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;move_state&quot;)){
          state x = (state)target;
          x.x0 = touch_x0;
          x.y0 = touch_y0;
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;move_operation&quot;)){
          operation x = (operation)target;
          x.x0 = touch_x0;
          x.y0 = touch_y0;
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;move_pin&quot;)){
          pin x = (pin)target;
          x.x0 = touch_x0;
          x.y0 = touch_y0;
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;move_codeclip&quot;)){
          codeclip x = (codeclip)target;
          x.x0 = touch_x0;
          x.y0 = touch_y0;
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;resize_state&quot;)){
          state x = (state)target;
          x.width  = max( touch_x0 - x.x0, Margin );
          x.height = max( touch_y0 - x.y0, Margin );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;resize_operation&quot;)){
          operation x = (operation)target;
          x.width  = max( touch_x0 - x.x0, Margin );
          x.height = max( touch_y0 - x.y0, Margin+20 );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;resize_pin&quot;)){
          pin x = (pin)target;
          x.width  = max( touch_x0 - x.x0, Margin );
          x.height = max( touch_y0 - x.y0, Margin );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;resize_codeclip&quot;)){
          codeclip x = (codeclip)target;
          x.width  = max( touch_x0 - x.x0, Margin+20 );
          x.height = max( touch_y0 - x.y0, Margin );
          hmode = &quot;&quot;;
        }
        else hmode = &quot;&quot;;
      }
      else if(command.equals(&quot;xobject&quot;)){
        xobject x = (xobject)view;
        Object e = x.element;

        if( hmode.equals(&quot;obdelete&quot;) ){
          x.suicide();
          oedit.check_connect();
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;obcopy&quot;) ){
          x.save();
          xml.del_element( xml.child( xml.root_element(), &quot;clipboad&quot; ) );
          clipboad = xml.new_element( xml.root_element(), e, &quot;clipboad&quot; );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;obpin&quot;) ){
          target = view;
          hmode = &quot;&quot;;
          input_gui.show( &quot;xobject_pinlabel_input&quot;, &quot;ピン名を入力して下さい&quot;, &quot;Pin&quot; + x.ID_maker+&quot;()&quot; );
        }
        else if( hmode.equals(&quot;obxtog&quot;) ){
          xtogroup(e);
          optpin();
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;obfile_copy_to_file&quot;) ){
          x.save();
          String fname = xml.element_name(e) + &quot;~&quot; + x.objectname + &quot;.xml&quot;;
          xml.save_element( e, new XFile( ObjectLib[ApplicationType], fname ) );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;move_pinlabel&quot;) ){
          x.getLocationOnScreen( loc );
          pinlabel p = (pinlabel)target;
          p.px = (touch_x - loc[0])/scale;
          p.py = (touch_y - loc[1])/scale;
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;move_xobject&quot;) )   handler( oedit_gui.opanel, &quot;opanel&quot; ); 
        else if( hmode.equals(&quot;resize_xobject&quot;) ) handler( oedit_gui.opanel, &quot;opanel&quot; ); 
        else{
          target = view;
          if(is_corner( view, touch_x, touch_y )) hmode = &quot;resize_xobject&quot;; else hmode = &quot;move_xobject&quot;;
        }
      }
      else if(command.equals(&quot;xobject-login&quot;)){
        oedit.Logout();
        oedit.Login(((xobject)view).element);
        hmode = &quot;&quot;;
      }
      else if(command.equals(&quot;xobject_pinlabel_input&quot;)){
        xobject x = (xobject)target;
        x.getLocationOnScreen( loc );
        touch_x0 = (touch_x - loc[0])/scale;
        touch_y0 = (touch_y - loc[1])/scale;
        Object e = xml.new_element( x.element, &quot;pin&quot;, &quot;_P&quot; + x.ID_maker++ );
        pinlabel p = new pinlabel( e, input_gui.text, touch_x0, touch_y0 );
        x.add(p);
      }
      else if(command.equals(&quot;aobject&quot;)){
        aobject x = (aobject)view;
        Object e = x.element;

        if( hmode.equals(&quot;obdelete&quot;) ){
          x.suicide();
          oedit.check_connect();
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;obcopy&quot;) ){
          x.save();
          xml.del_element( xml.child( xml.root_element(), &quot;clipboad&quot; ) );
          clipboad = xml.new_element( xml.root_element(), e, &quot;clipboad&quot; );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;obpin&quot;) ){
          target = view;
          hmode = &quot;&quot;;
          input_gui.show( &quot;aobject_pinlabel_input&quot;, &quot;ピン名を入力して下さい&quot;, &quot;Pin&quot; + x.ID_maker+&quot;()&quot; );
        }
        else if( hmode.equals(&quot;move_pinlabel&quot;) ){
          x.getLocationOnScreen( loc );
          pinlabel p = (pinlabel)target;
          p.px = (touch_x - loc[0])/scale;
          p.py = (touch_y - loc[1])/scale;
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;obfile_copy_to_file&quot;) ){
          x.save();
          String fname = xml.element_name(e) + &quot;~&quot; + x.objectname + &quot;.xml&quot;;
          xml.save_element( e, new XFile( ObjectLib[ApplicationType], fname ) );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;move_aobject&quot;) )   handler( oedit_gui.opanel, &quot;opanel&quot; ); 
        else if( hmode.equals(&quot;resize_aobject&quot;) ) handler( oedit_gui.opanel, &quot;opanel&quot; ); 
        else{
          target = view;
          if(is_corner( view, touch_x, touch_y )) hmode = &quot;resize_aobject&quot;; else hmode = &quot;move_aobject&quot;;
        }
      }
      else if(command.equals(&quot;aobject-login&quot;)){
        oedit.Logout();
        sedit.Login(((aobject)view).element);
        hmode = &quot;&quot;;
      }
      else if(command.equals(&quot;aobject_pinlabel_input&quot;)){
        aobject x = (aobject)target;
        x.getLocationOnScreen( loc );
        touch_x0 = (touch_x - loc[0])/scale;
        touch_y0 = (touch_y - loc[1])/scale;
        Object e = xml.new_element( x.element, &quot;pin&quot;, &quot;_P&quot; + x.ID_maker++ );
        pinlabel p = new pinlabel( e, input_gui.text, touch_x0, touch_y0 );
        x.add(p);
      }
      else if(command.equals(&quot;uobject&quot;)){
        uobject x = (uobject)view;
        Object e = x.element;
        x.getLocationOnScreen( loc );
        int tx = (touch_x - loc[0])/scale;
        int ty = (touch_y - loc[1])/scale;
        
        if( hmode.equals(&quot;obdelete&quot;) ){
          x.suicide();
          oedit.check_connect();
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;obcopy&quot;) ){
          x.save();
          xml.del_element( xml.child( xml.root_element(), &quot;clipboad&quot; ) );
          clipboad = xml.new_element( xml.root_element(), e, &quot;clipboad&quot; );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;obsignal&quot;) ){
          target =view;
          hmode = &quot;obsignal1&quot;;
        }
        else if( hmode.equals(&quot;obsignal1&quot;) ){
          Object ee = xml.new_element( oedit.element, &quot;relation&quot;, &quot;_R&quot; + oedit.ID_maker++ );
          relation xx = new relation( ee, target, view );
          oedit_gui.addBack(xx);
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;obgtox&quot;) ){
          utox(e);
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;move_innerpin&quot;) ){
          innerpin p = (innerpin)target;
          p.x0 = tx;
          p.y0 = ty;
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;resize_innerpin&quot;) ){
          innerpin p = (innerpin)target;
          p.width  = max( tx - p.x0, Margin );
          p.height = max( ty - p.y0, Margin );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;obfile_copy_to_file&quot;) ){
          x.save();
          String fname = xml.element_name(e) + &quot;~&quot; + compack( getFirstLine( get_text(x.codetext) ) )+&quot;.xml&quot;; 
          xml.save_element( e, new XFile( ObjectLib[ApplicationType], fname ) );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;move_uobject&quot;) )   handler( oedit_gui.opanel, &quot;opanel&quot; ); 
        else if( hmode.equals(&quot;resize_uobject&quot;) ) handler( oedit_gui.opanel, &quot;opanel&quot; ); 
        else{
          target = view;
          if(is_corner( view, touch_x, touch_y )) hmode = &quot;resize_uobject&quot;; else hmode = &quot;move_uobject&quot;;
        }
      }
      else if(command.equals(&quot;uobject_edit&quot;)){
        target = view;
        EditText e = ((uobject)view).codetext;
        editor_gui.show(&quot;uobject_edit_return&quot;, get_text(e));
      }
        else if(command.equals(&quot;uobject_edit_return&quot;)){
          EditText e = ((uobject)target).codetext;
          e.setText( editor_gui.text );
          hmode = &quot;&quot;;
        }
      else if(command.equals(&quot;pin&quot;)){
        pin x = (pin)view;
        Object e = x.element;
        x.requestFocus();

        if( hmode.equals(&quot;obdelete&quot;) ){
          x.suicide();
          oedit.check_connect();
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;sbdelete&quot;) ){
          x.suicide();
          sedit.check_connect();
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;obcopy&quot;) || hmode.equals(&quot;sbcopy&quot;) ){
          x.save();
          xml.del_element( xml.child( xml.root_element(), &quot;clipboad&quot; ) );
          clipboad = xml.new_element( xml.root_element(), e, &quot;clipboad&quot; );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;obsignal&quot;) ){
          target =view;
          hmode = &quot;obsignal1&quot;;
        }
        else if( hmode.equals(&quot;obsignal1&quot;) ){
          Object ee = xml.new_element( oedit.element, &quot;relation&quot;, &quot;_R&quot; + oedit.ID_maker++ );
          relation xx = new relation( ee, target, view );
          oedit_gui.addBack(xx);
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;sbsignal&quot;) ){
          target =view;
          hmode = &quot;sbsignal1&quot;;
        }
        else if( hmode.equals(&quot;sbsignal1&quot;) ){
          Object ee = xml.new_element( sedit.element, &quot;action&quot;, &quot;_A&quot; + sedit.ID_maker++ );
          action xx = new action( ee, target, view );
          sedit_gui.addBack(xx);
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;obfile_copy_to_file&quot;) || hmode.equals(&quot;sbfile_copy_to_file&quot;) ){
          x.save();
          String fname = xml.element_name(e) + &quot;~&quot; + compack( get_text(x) )+&quot;.xml&quot;; 
          xml.save_element( e, new XFile( ObjectLib[ApplicationType], fname ) );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;move_pin&quot;) ){
          if( sedit_is_active ) handler( sedit_gui.spanel, &quot;spanel&quot; ); else handler( oedit_gui.opanel, &quot;opanel&quot; );
        }
        else if( hmode.equals(&quot;resize_pin&quot;) ){
          if( sedit_is_active ) handler( sedit_gui.spanel, &quot;spanel&quot; ); else handler( oedit_gui.opanel, &quot;opanel&quot; );
        }
        else{
          target =view;
          if(is_corner( view, touch_x, touch_y )) hmode = &quot;resize_pin&quot;; else hmode = &quot;move_pin&quot;;
        }
      }
      else if(command.equals(&quot;pinlabel&quot;)){
        pinlabel x = (pinlabel)view;
        Object e = x.element;

        if( hmode.equals(&quot;obdelete&quot;) ){
          x.suicide();
          oedit.check_connect();
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;sbdelete&quot;) ){
          x.suicide();
          sedit.check_connect();
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;obsignal&quot;) ){
          target =view;
          hmode = &quot;obsignal1&quot;;
        }
        else if( hmode.equals(&quot;obsignal1&quot;) ){
          Object ee = xml.new_element( oedit.element, &quot;relation&quot;, &quot;_R&quot; + oedit.ID_maker++ );
          relation xx = new relation( ee, target, view );
          oedit_gui.addBack(xx);
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;sbsignal&quot;) ){
          target =view;
          hmode = &quot;sbsignal1&quot;;
        }
        else if( hmode.equals(&quot;sbsignal1&quot;) ){
          Object ee = xml.new_element( sedit.element, &quot;action&quot;, &quot;_A&quot; + sedit.ID_maker++ );
          action xx = new action( ee, target, view );
          sedit_gui.addBack(xx);
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;move_pinlabel&quot;) ){
          View v = (View)(x.getParent());
          if( v instanceof xobject ) handler( v, &quot;xobject&quot; );
          if( v instanceof aobject ) handler( v, &quot;aobject&quot; );
        }
        else{
          target =view;
          hmode = &quot;move_pinlabel&quot;;
        }
      }
      else if(command.equals(&quot;codeclip&quot;)){
        codeclip x = (codeclip)view;
        Object e = x.element;

        if( hmode.equals(&quot;obdelete&quot;) ){
          x.suicide();
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;sbdelete&quot;) ){
          x.suicide();
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;obcopy&quot;) || hmode.equals(&quot;sbcopy&quot;) ){
          x.save();
          xml.del_element( xml.child( xml.root_element(), &quot;clipboad&quot; ) );
          clipboad = xml.new_element( xml.root_element(), e, &quot;clipboad&quot; );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;obfile_copy_to_file&quot;) || hmode.equals(&quot;sbfile_copy_to_file&quot;) ){
          x.save();
          String fname = xml.element_name(e) + &quot;~&quot; + compack( getFirstLine( get_text(x.codetext) ) )+&quot;.xml&quot;; 
          xml.save_element( e, new XFile( ObjectLib[ApplicationType], fname ) );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;move_codeclip&quot;) ){
          if( sedit_is_active ) handler( sedit_gui.spanel, &quot;spanel&quot; ); else handler( oedit_gui.opanel, &quot;opanel&quot; );
        }
        else if( hmode.equals(&quot;resize_codeclip&quot;) ){
          if( sedit_is_active ) handler( sedit_gui.spanel, &quot;spanel&quot; ); else handler( oedit_gui.opanel, &quot;opanel&quot; );
        }
        else{
          target = view;
          if(is_corner( view, touch_x, touch_y )) hmode = &quot;resize_codeclip&quot;; else hmode = &quot;move_codeclip&quot;;
        }
      }
      else if(command.equals(&quot;codeclip_edit&quot;)){
        target = view;
        EditText e = ((codeclip)view).codetext;
        editor_gui.show(&quot;codeclip_edit_return&quot;,get_text(e));
      }
        else if(command.equals(&quot;codeclip_edit_return&quot;)){
          EditText e = ((codeclip)target).codetext;
          e.setText( editor_gui.text );
          hmode = &quot;&quot;;
        }
      else if(command.equals(&quot;KJgroup&quot;)){
        KJgroup x = (KJgroup)view;
        Object e = x.element;

        if( hmode.equals(&quot;obdelete&quot;) ){
          x.suicide();
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;obcopy&quot;) ){
          x.save();
          xml.del_element( xml.child( xml.root_element(), &quot;clipboad&quot; ) );
          clipboad = xml.new_element( xml.root_element(), e, &quot;clipboad&quot; );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;obgtox&quot;) ){
          grouptox(e);
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;obfile_copy_to_file&quot;) ){
          x.save();
          String fname = xml.element_name(e) + &quot;~&quot; + compack( getFirstLine( get_text(x.comment) ) )+&quot;.xml&quot;; 
          xml.save_element( e, new XFile( ObjectLib[ApplicationType], fname ) );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;move_KJgroup&quot;) )   handler( oedit_gui.opanel, &quot;opanel&quot; );
        else if( hmode.equals(&quot;resize_KJgroup&quot;) ) handler( oedit_gui.opanel, &quot;opanel&quot; );
        else{
          target = view;
          if(is_corner( view, touch_x, touch_y )) hmode = &quot;resize_KJgroup&quot;; else hmode = &quot;move_KJgroup&quot;;
        }
      }
      else if(command.equals(&quot;relation&quot;)){
        relation x = (relation)view;
        Object e = x.element;

        if( hmode.equals(&quot;obdelete&quot;) ){
          x.suicide();
          hmode = &quot;&quot;;
        }
        else  handler( oedit_gui.opanel, &quot;opanel&quot; );
      }
      else if(command.equals(&quot;state&quot;)){
        state x = (state)view;
        Object e = x.element;
        x.requestFocus();

        if( hmode.equals(&quot;sbdelete&quot;) ){
          if( x.isinitstate == 0 ){
            x.suicide();
            sedit.check_connect();
          }
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;sbcopy&quot;) ){
          x.save();
          xml.del_element( xml.child( xml.root_element(), &quot;clipboad&quot; ) );
          clipboad = xml.new_element( xml.root_element(), e, &quot;clipboad&quot; );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;reconnect_xflow&quot;) ){
          xflow f = (xflow)target;
          f.reconnect(x);
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;sbtrans&quot;) ){
          target = view;
          hmode = &quot;sbtrans1&quot;;
        }
        else if( hmode.equals(&quot;sbtrans1&quot;) ){
          target2 = view;
          hmode = &quot;sbtrans2&quot;;
        }
        else if( hmode.equals(&quot;sbfile_copy_to_file&quot;) ){
          x.save();
          String fname = xml.element_name(e) + &quot;~&quot; + compack( getFirstLine( get_text(x) ) )+&quot;.xml&quot;; 
          xml.save_element( e, new XFile( ObjectLib[ApplicationType], fname ) );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;move_state&quot;) )   handler( sedit_gui.spanel, &quot;spanel&quot; ); 
        else if( hmode.equals(&quot;resize_state&quot;) ) handler( sedit_gui.spanel, &quot;spanel&quot; ); 
        else{
          target = view;
          if(is_corner( view, touch_x, touch_y )) hmode = &quot;resize_state&quot;; else hmode = &quot;move_state&quot;;
        }
      }
      else if(command.equals(&quot;operation&quot;)){
        operation x = (operation)view;
        Object e = x.element;
        x.getLocationOnScreen( loc );
        int tx = (touch_x - loc[0])/scale;
        int ty = (touch_y - loc[1])/scale;
        
        if( hmode.equals(&quot;sbdelete&quot;) ){
          x.suicide();
          sedit.check_connect();
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;sbcopy&quot;) ){
          x.save();
          xml.del_element( xml.child( xml.root_element(), &quot;clipboad&quot; ) );
          clipboad = xml.new_element( xml.root_element(), e, &quot;clipboad&quot; );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;sbsignal&quot;) ){
          target = view;
          hmode = &quot;sbsignal1&quot;;
        }
        else if( hmode.equals(&quot;sbsignal1&quot;) ){
          Object ee = xml.new_element( sedit.element, &quot;action&quot;, &quot;_A&quot; + sedit.ID_maker++ );
          action xx = new action( ee, target, view );
          sedit_gui.addBack(xx);
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;move_innerpin&quot;) ){
          innerpin p = (innerpin)target;
          p.x0 = tx;
          p.y0 = ty;
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;resize_innerpin&quot;) ){
          innerpin p = (innerpin)target;
          p.width  = max( tx - p.x0, Margin );
          p.height = max( ty - p.y0, Margin );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;move_connector&quot;) ){
          connector p = (connector)target;
          p.x0 = tx;
          p.y0 = ty;
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;sbfile_copy_to_file&quot;) ){
          x.save();
          String fname = xml.element_name(e) + &quot;~&quot; + compack( getFirstLine( get_text(x.codetext) ) )+&quot;.xml&quot;; 
          xml.save_element( e, new XFile( ObjectLib[ApplicationType], fname ) );
          hmode = &quot;&quot;;
        }
        else if( hmode.equals(&quot;move_operation&quot;) )   handler( sedit_gui.spanel, &quot;spanel&quot; ); 
        else if( hmode.equals(&quot;resize_operation&quot;) ) handler( sedit_gui.spanel, &quot;spanel&quot; ); 
        else{
          target = view;
          if(is_corner( view, touch_x, touch_y )) hmode = &quot;resize_operation&quot;; else hmode = &quot;move_operation&quot;;
        }
      }
      else if(command.equals(&quot;operation_edit&quot;)){
        target = view;
        EditText e = ((operation)view).codetext;
        editor_gui.show(&quot;operation_edit_return&quot;,get_text(e));
      }
       else if(command.equals(&quot;operation_edit_return&quot;)){
          EditText e = ((operation)target).codetext;
          e.setText( editor_gui.text );
          hmode = &quot;&quot;;
        }
      else if(command.equals(&quot;xflow&quot;)){
        if( hmode.equals(&quot;&quot;) ){
          target = view;
          hmode = &quot;reconnect_xflow&quot;;
        }
        else  handler( sedit_gui.spanel, &quot;spanel&quot; );
      }
      else if(command.equals(&quot;connector&quot;)){
        if( hmode.equals(&quot;&quot;) ){
          target = view;
          hmode = &quot;move_connector&quot;;
        }
        else  handler( (View)(view.getParent()), &quot;operation&quot; );
      }
      else if(command.equals(&quot;innerpin&quot;)){
        if( hmode.equals(&quot;resize_innerpin&quot;) || hmode.equals(&quot;move_innerpin&quot;) ){
          View p = (View)view.getParent();
          if( sedit_is_active ) handler( p, &quot;operation&quot; );
          else                  handler( p, &quot;uobject&quot; );
        }
        else{
          target = view;
          if(is_corner( view, touch_x, touch_y )) hmode = &quot;resize_innerpin&quot;; else hmode = &quot;move_innerpin&quot;;
        }
      }
      else if(command.equals(&quot;action&quot;)){
        action x = (action)view;
        Object e = x.element;

        if( hmode.equals(&quot;sbdelete&quot;) ){
          x.suicide();
          hmode = &quot;&quot;;
        }
        else handler( sedit_gui.spanel, &quot;spanel&quot; );
      }
      else hmode = &quot;&quot;;

 if( sedit_is_active )  sedit.resize(); else   oedit.resize();
 
}
</codetext>
</codeclip>
<codeclip>
<ID>_C86</ID>
<x0>278</x0>
<y0>483</y0>
<width>233</width>
<height>34</height>
<codetext>// コンポーネントの名前を求める
public String get_name( View v ){
 if( v instanceof xobject ) return ((xobject)v).name;
 if( v instanceof aobject ) return ((aobject)v).name;
 if( v instanceof uobject ) return ((uobject)v).name;
 if( v instanceof pin ) return ((pin)v).name;
 if( v instanceof pinlabel ) return ((pinlabel)v).name;
 if( v instanceof relation ) return ((relation)v).name;
 if( v instanceof codeclip ) return ((codeclip)v).name;
 if( v instanceof KJgroup) return ((KJgroup)v).name;
 if( v instanceof state) return ((state)v).name;
 if( v instanceof operation) return ((operation)v).name;
 if( v instanceof action ) return ((action)v).name;
 return &quot;&quot;;
}
</codetext>
</codeclip>
<codeclip>
<ID>_C88</ID>
<x0>605</x0>
<y0>589</y0>
<width>167</width>
<height>45</height>
<codetext>// 1行入力コンポーネント
InputGUI input_gui;
class InputGUI{
    String         id;
    String         text;

    AbsoluteLayout base;
    TextView       tmsg;
    EditText       einput;
    Button         bclose;

//入力コンポーネントを作成
InputGUI(){

int wid = screen_width - 32;
int hei = 62;
int p = 3;

dprint(&quot;input gui\n&quot;);

base = new AbsoluteLayout(ACTIVITY);
base.setBackgroundColor(Color.rgb( 255, 255, 255));

tmsg = new TextView(ACTIVITY);
tmsg.setBackgroundColor(Color.rgb( 255, 255, 255));
tmsg.setTextColor(Color.rgb( 0, 0, 0));
tmsg.setPadding(1, 1, 1, 1);
tmsg.setGravity(Gravity.CENTER|Gravity.CENTER);
tmsg.setLayoutParams( new AbsoluteLayout.LayoutParams( wid,hei,3,p ) );
base.addView( tmsg );
p += hei + 3;

einput = new EditText(ACTIVITY);
einput.setPadding(1, 1, 1, 1);
einput.setGravity(Gravity.LEFT|Gravity.CENTER);
einput.setTextColor( Color.rgb( 0, 0, 0 ));
einput.setBackgroundColor( Color.rgb( 255, 255, 255 ));
einput.setLayoutParams( new AbsoluteLayout.LayoutParams( wid,hei,3,p ) );
base.addView( einput );
p += hei + 3;

bclose = new Button(ACTIVITY);
bclose.setPadding(1, 1, 1, 1);
bclose.setGravity(Gravity.CENTER|Gravity.CENTER);
bclose.setTextColor( Color.rgb( 0, 0, 0 ));
bclose.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bclose.setText(&quot;閉じる&quot;);
bclose.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     ACTIVITY.setContentView(present_view);
     text = get_text(einput);
     handler( null, id );
   }
});
bclose.setLayoutParams( new AbsoluteLayout.LayoutParams( wid,hei,3,p ) );
base.addView( bclose );


}

// テキストをセットして表示する
public void show( String i, String m, String t ){
id=i;
tmsg.setText(m);
einput.setText(t);
einput.selectAll();
einput.setSelection(0);
einput.requestFocus();
einput.selectAll();
ACTIVITY.setContentView(base);
}


}
</codetext>
</codeclip>
<プロパティ>
<ID>properties</ID>
<LookandFeel>javax.swing.plaf.metal.MetalLookAndFeel</LookandFeel>
<MainWinx0>0</MainWinx0>
<MainWiny0>0</MainWiny0>
<MainWinWidth>1024</MainWinWidth>
<MainWinHeight>740</MainWinHeight>
<MesgWinx0>0</MesgWinx0>
<MesgWiny0>0</MesgWiny0>
<MesgWinWidth>1024</MesgWinWidth>
<MesgWinHeight>740</MesgWinHeight>
<FileWinx0>36</FileWinx0>
<FileWiny0>478</FileWiny0>
<FileWinWidth>578</FileWinWidth>
<FileWinHeight>262</FileWinHeight>
<EditWinx0>347</EditWinx0>
<EditWiny0>0</EditWiny0>
<EditWinWidth>676</EditWinWidth>
<EditWinHeight>541</EditWinHeight>
<PropWinx0>1</PropWinx0>
<PropWiny0>1</PropWiny0>
<PropWinWidth>615</PropWinWidth>
<PropWinHeight>448</PropWinHeight>
<DividerLocation1>2</DividerLocation1>
<DividerLocation2>2</DividerLocation2>
<ToolBarVisible>1</ToolBarVisible>
<ViewSourceAtCompile>0</ViewSourceAtCompile>
<NoSourceCreate>0</NoSourceCreate>
<JavaEditCommand>geany</JavaEditCommand>
<JavaViewCommand></JavaViewCommand>
<HelpCommand></HelpCommand>
<ApplicationType>4</ApplicationType>
<CompileCommand0>./compile</CompileCommand0>
<RunCommand0>./run</RunCommand0>
<GUIDesignerCommand0>java -jar guidsin.jar -java</GUIDesignerCommand0>
<ImportFiles0> import java.awt.*;
 import java.awt.event.*;
 import javax.swing.*;
 import javax.swing.event.*;
 import javax.swing.tree.*;
 import java.io.*;
 import java.net.*;
 import java.util.*;
import java.awt.geom.*;
import java.awt.print.*;
import javax.swing.border.*;
import javax.swing.filechooser.*;
 import javax.swing.*;
 import javax.swing.event.*;
 import javax.swing.tree.*;
 import java.io.*;
 import java.net.*;
 import java.util.*;
import java.awt.image.BufferedImage;
import javax.sound.sampled.*;

class Starter{
  public static void main( String args[] ){
    %AppName% ap = new %AppName%();
    ap.ARGS = args;
    ap.Start();
  }
}
</ImportFiles0>
<ProgramStartupCode0> String[] ARGS;
</ProgramStartupCode0>
<NativeHelpCommand0></NativeHelpCommand0>
<CompileCommand1>./compile_applet</CompileCommand1>
<RunCommand1>./run_applet</RunCommand1>
<GUIDesignerCommand1>java -jar guidsin.jar -applet</GUIDesignerCommand1>
<ImportFiles1> import java.awt.*;
 import java.awt.event.*;
 import java.applet.*;
 import javax.swing.*;
 import javax.swing.event.*;
 import javax.swing.tree.*;
 import java.io.*;
 import java.net.*;
 import java.util.*;
 public class javatext extends Applet {
   %AppName% ap;
   public void init() {
     ap = new %AppName%();
     ap.APPLET = this;
     ap.Start();
   }
 }
</ImportFiles1>
<ProgramStartupCode1> Applet APPLET;
</ProgramStartupCode1>
<NativeHelpCommand1></NativeHelpCommand1>
<CompileCommand2>./compile_cpp</CompileCommand2>
<RunCommand2>./run_cpp</RunCommand2>
<GUIDesignerCommand2></GUIDesignerCommand2>
<ImportFiles2>#include &lt;stdio.h&gt;

void Startup();
</ImportFiles2>
<ProgramStartupCode2>int main(){
 Startup();
 %AppName%::Start();
 }
</ProgramStartupCode2>
<NativeHelpCommand2></NativeHelpCommand2>
<CompileCommand3>./compile_cppw</CompileCommand3>
<RunCommand3>./run_cppw</RunCommand3>
<GUIDesignerCommand3>java -jar guidsin.jar -cpp</GUIDesignerCommand3>
<ImportFiles3>#include &lt;stdio.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;math.h&gt;
#include &quot;Ekagen.h&quot;
void Startup();
</ImportFiles3>
<ProgramStartupCode3>void Emain(){
Startup();
%AppName%::Start();
}
</ProgramStartupCode3>
<NativeHelpCommand3></NativeHelpCommand3>
<MoveStep>8</MoveStep>
<ImageEditCommand></ImageEditCommand>
<CompilerFileName>javac.exe</CompilerFileName>
<CompileCommand4>./compile_objedit Objedit com kousoz80 objedit</CompileCommand4>
<RunCommand4>echo no action</RunCommand4>
<GUIDesignerCommand4>java -jar guidsin.jar -android</GUIDesignerCommand4>
<ImportFiles4>package com.example.test;

import android.os.Bundle;
import android.app.Activity;
import android.view.View;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Paint.Style;
import android.widget.Button;
import android.view.SurfaceHolder;
import android.view.SurfaceHolder.Callback;
import android.view.SurfaceView;
import android.widget.EditText;
import android.text.SpannableStringBuilder;
import android.text.TextWatcher;
import android.text.Editable;
import android.graphics.Matrix;
import android.graphics.Typeface;
import android.graphics.RectF;
import android.graphics.BitmapFactory;
import java.io.*;
 import java.net.*;
import java.util.*;
import java.text.SimpleDateFormat;
import android.media.MediaPlayer;
import android.os.Handler;
//import android.os.Enviroment;
import android.content.res.Configuration;
import android.content.Context;
import android.view.LayoutInflater;
import android.view.ViewGroup;
import android.app.Activity;
import android.graphics.Color;
import android.graphics.Bitmap.CompressFormat;

import android.widget.AbsoluteLayout;
import android.widget.*;
import android.view.Gravity;
import android.view.View.OnClickListener;
import android.graphics.BitmapFactory;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
//import android.graphics.PaintStyle;
import android.view.MotionEvent;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.util.DisplayMetrics;
import android.os.Environment;
import android.view.MotionEvent;
import android.view.KeyEvent;
import android.graphics.Rect;

import android.hardware.Camera;
import java.util.Vector;
import java.util.zip.*;
import android.widget.Toast;
import android.view.Menu;


public class HelloWorld extends Activity {
    %AppName% ap;

@Override
 public void onCreate(Bundle bundle) {
   super.onCreate(bundle);
   ap = new %AppName%();
   ap.ACTIVITY = this;
   ap.Start();
 }

@Override
 public boolean onCreateOptionsMenu(Menu menu) {
//  menu.add(&quot;touch&quot;);
  return true;
 }

@Override
public boolean dispatchKeyEvent(KeyEvent e) {
 
    // menu or homeボタンが押されたとき
    if (e.getKeyCode() == KeyEvent.KEYCODE_MENU ||
       (
         !ap.image_gui.is_active &amp;&amp; 
         (
           (e.getKeyCode() == KeyEvent.KEYCODE_VOLUME_UP)||
           (e.getKeyCode() == KeyEvent.KEYCODE_VOLUME_DOWN)
         )
       )
     ) {

      // ボタンが押し込まれたとき
      if (e.getAction() == KeyEvent.ACTION_DOWN) {
        if( ap.menu_active ){
          ap.menu_active = false;
          setContentView( ap.present_view );
        }
        else ap.menu_gui.show();
        return true;
      }
  }
   return super.dispatchKeyEvent(e);
}


}

interface xview{
  public String get_params();
  public void join();
  public void suicide();
  public void show_property();
  public int  get_x();
  public int  get_y();
  public int  get_width();
  public int  get_height();
  public void setBounds( int x, int y, int w, int h );
  public void setBackground( int r, int g, int b );
  public void setForeground( int r, int g, int b );
}

interface CallBackAccepter{
  public void callBack( Object obj );
}
 
</ImportFiles4>
<ProgramStartupCode4>Activity ACTIVITY;
</ProgramStartupCode4>
<NativeHelpCommand4>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;
      package=&quot;com.example.test&quot;
      android:versionCode=&quot;1&quot;
      android:versionName=&quot;1.0&quot;&gt;
    &lt;uses-sdk
        android:minSdkVersion=&quot;3&quot;
        android:targetSdkVersion=&quot;17&quot; /&gt;

  &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt; 
    &lt;application
        android:label=&quot;@string/app_name&quot;
        android:icon=&quot;@drawable/ic_launcher&quot;
     &gt;
        &lt;activity android:name=&quot;HelloWorld&quot;
                  android:label=&quot;@string/app_name&quot;&gt;
            &lt;intent-filter&gt;
                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;
                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;
    &lt;/application&gt;
&lt;/manifest&gt; 
</NativeHelpCommand4>
<HtmlEditCommand></HtmlEditCommand>
<CompileCommand5></CompileCommand5>
<RunCommand5>java -jar basic.jar test.bas</RunCommand5>
<GUIDesignerCommand5></GUIDesignerCommand5>
<ImportFiles5></ImportFiles5>
<ProgramStartupCode5>gosub @_PSTART
end
</ProgramStartupCode5>
<NativeHelpCommand5></NativeHelpCommand5>
<NoOptimizePin>0</NoOptimizePin>
<CompileCommand6>./compile_c</CompileCommand6>
<RunCommand6>./run_c</RunCommand6>
<GUIDesignerCommand6></GUIDesignerCommand6>
<ImportFiles6>#include &lt;setjmp.h&gt;
#include &lt;pthread.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdarg.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;math.h&gt;
#include &lt;sys/socket.h&gt;
#include &lt;netinet/in.h&gt;
#include &lt;arpa/inet.h&gt;
#include &lt;netdb.h&gt;

#include &lt;X11/Xlib.h&gt;
#include &lt;X11/Xutil.h&gt;
#include &lt;X11/Xlocale.h&gt; /* ロケール用ヘッダーファイル */
#include &lt;X11/xpm.h&gt;
#include &lt;sys/time.h&gt;
#include &lt;signal.h&gt;
#include &lt;unistd.h&gt;
#include &lt;termios.h&gt;
#include &lt;errno.h&gt;
</ImportFiles6>
<ProgramStartupCode6>int ARGC; char** ARGV;
int main( int argc, char** argv ){
  ARGC=argc;
  ARGV=argv;
  _PSTART();
}
</ProgramStartupCode6>
<NativeHelpCommand6></NativeHelpCommand6>
</プロパティ>
<codeclip>
<ID>_C90</ID>
<x0>389</x0>
<y0>597</y0>
<width>171</width>
<height>33</height>
<codetext>// 2次元座標を表すクラス
class Point{
  int x;
  int y;
  Point( int xx, int yy ){
    x = xx;
    y = yy;
  }
}
</codetext>
</codeclip>
<codeclip>
<ID>_C91</ID>
<x0>777</x0>
<y0>12</y0>
<width>214</width>
<height>170</height>
<codetext>// デバッグ表示
FileWriter dbg;
boolean debug_mode =false;
public void dprint(String s){
  if(debug_mode){
    try{
      dbg.write(s);
      dbg.flush();
    } catch(Exception e){}
  }
}
</codetext>
</codeclip>
<codeclip>
<ID>_C93</ID>
<x0>778</x0>
<y0>192</y0>
<width>170</width>
<height>20</height>
<codetext>//オブジェクト操作用関数


//  ピン配置を最適化する
    public void optpin(){
      if( !sedit_is_active ){
        Object here = oedit.element;
        oedit.Logout();

        Vector pins = null, signals = null, esignals = null;
        int outlink = 0, inlink = 0, extoutlink = 0, extinlink = 0;
        Object rel1 = null, rel2 = null;

        String here_id = xml.elementID( here );
        boolean here_is_top = here_id.equals(&quot;project&quot;);
        pins = xml.child_list( here, &quot;pin&quot; );
        if( !here_is_top ) esignals = xml.child_list( xml.parent_element(here), &quot;relation&quot; );
        for( int i = pins.size()-1; i &gt;= 0; i-- ){
          signals = xml.child_list( here, &quot;relation&quot; );
          inlink = outlink = extinlink = extoutlink = 0;
          String pin_id = xml.elementID( pins.get(i) );
          for( int j = signals.size()-1; j &gt;= 0; j-- ){
            if( xml.get_attribute( signals.get(j), &quot;pin1name&quot; ).equals( pin_id ) ){
              rel1 = signals.get(j);
              outlink++;
            }
            if( xml.get_attribute( signals.get(j), &quot;pin2name&quot; ).equals( pin_id ) ){
              rel2 = signals.get(j);
              inlink++;
            }
          }
          if( !here_is_top ){
            String ep = here_id + &quot;(&quot; + pin_id + &quot;)&quot;;
            for( int j = esignals.size()-1; j &gt;= 0; j-- ){
              if( xml.get_attribute( esignals.get(j), &quot;pin1name&quot; ).equals( ep ) ) extoutlink++;
              if( xml.get_attribute( esignals.get(j), &quot;pin2name&quot; ).equals( ep ) ) extinlink++;
            }
          }
          if( outlink==0 &amp;&amp; inlink==0 &amp;&amp; extoutlink==0 &amp;&amp; extinlink==0 &amp;&amp; !pin_id.equals( &quot;_PSTART&quot; ) ){
            xml.del_element( pins.get(i) );
          }
          if( outlink==1 &amp;&amp; inlink==1 &amp;&amp; extoutlink==0 &amp;&amp; extinlink==0 ){
            xml.del_element( pins.get(i) );
            xml.set_attribute( rel1, &quot;pin1name&quot;, xml.get_attribute( rel2, &quot;pin1name&quot; ) );
            xml.del_element( rel2 );
          }
        }

        oedit.Login( here );
      }
    }

//  uobjectをxobjectに変換する
    public void utox( Object uobj0 ){
      if( !sedit_is_active ){
        Object here = oedit.element;
        oedit.Logout();

        String uid  = xml.elementID( uobj0 );

        Object xobj, uobj, inpin, outpin, inrel=null, outrel=null;
        int inlink = 0, outlink = 0;

        xobj = xml.new_element( here, &quot;xobject&quot;, &quot;_X&quot; + uid );
        xml.set_attribute( xobj, &quot;x0&quot;, xml.get_attribute( uobj0, &quot;x0&quot; ) );
        xml.set_attribute( xobj, &quot;y0&quot;, xml.get_attribute( uobj0, &quot;y0&quot; ) );
        xml.set_attribute( xobj, &quot;width&quot;, xml.get_attribute( uobj0, &quot;width&quot; ) );
        xml.set_attribute( xobj, &quot;height&quot;, xml.get_attribute( uobj0, &quot;height&quot; ) );
        xml.set_attribute( xobj, &quot;ID_maker&quot;, &quot;1&quot; );
        xml.set_attribute( xobj, &quot;objectname&quot;, &quot;Object&quot; + uid );
        xml.set_attribute( xobj, &quot;description&quot;, &quot;&quot; );

        uobj = xml.new_element( xobj, uobj0, &quot;_OX&quot; );
        xml.set_attribute( uobj, &quot;x0&quot;, &quot;120&quot;);
        xml.set_attribute( uobj, &quot;y0&quot;, &quot;10&quot;);

        Vector signals = xml.child_list( here, &quot;relation&quot; );
        for( int j = signals.size()-1; j &gt;= 0; j-- ){
          if( xml.get_attribute( signals.get(j), &quot;pin1name&quot; ).equals( uid ) ){
            outlink++;
            xml.set_attribute( signals.get(j), &quot;pin1name&quot;, &quot;_X&quot; + uid + &quot;(_Pout)&quot; );  
          } 
          if( xml.get_attribute( signals.get(j), &quot;pin2name&quot; ).equals( uid ) ){
            inlink++;
            xml.set_attribute( signals.get(j), &quot;pin2name&quot;, &quot;_X&quot; + uid + &quot;(_Pin)&quot; );  
          }
        }
        if( outlink &gt; 0 ){ 
          outpin = xml.new_element( xobj, &quot;pin&quot;, &quot;_Pout&quot; );
          xml.set_attribute( outpin, &quot;x0&quot;, &quot;0&quot; );
          xml.set_attribute( outpin, &quot;y0&quot;, &quot;&quot; + ( parseInt( xml.get_attribute( uobj0, &quot;outpiny0&quot; ) ) + 10 ) );
          xml.set_attribute( outpin, &quot;width&quot;, xml.get_attribute( uobj0, &quot;outpinwidth&quot; ) );
          xml.set_attribute( outpin, &quot;height&quot;, xml.get_attribute( uobj0, &quot;outpinheight&quot; ) );
          xml.set_attribute( outpin, &quot;text&quot;, xml.get_attribute( uobj0, &quot;outpintext&quot; ) );
          xml.set_attribute( outpin, &quot;px&quot;, xml.get_attribute( uobj0, &quot;outpinx0&quot; ) );
          xml.set_attribute( outpin, &quot;py&quot;, xml.get_attribute( uobj0, &quot;outpiny0&quot; ) );
          outrel = xml.new_element( xobj, &quot;relation&quot;, &quot;_Rout&quot; );
          xml.set_attribute( outrel, &quot;pin1name&quot;, &quot;_OX&quot; );
          xml.set_attribute( outrel, &quot;pin2name&quot;, &quot;_Pout&quot; );
        }
        if( inlink &gt; 0 ){ 
          inpin = xml.new_element( xobj, &quot;pin&quot;, &quot;_Pin&quot; );
          xml.set_attribute( inpin, &quot;x0&quot;, &quot;0&quot; );
          xml.set_attribute( inpin, &quot;y0&quot;, &quot;&quot; + ( parseInt( xml.get_attribute( uobj0, &quot;inpiny0&quot; ) ) + 10 ) );
          xml.set_attribute( inpin, &quot;width&quot;, xml.get_attribute( uobj0, &quot;inpinwidth&quot; ) );
          xml.set_attribute( inpin, &quot;height&quot;, xml.get_attribute( uobj0, &quot;inpinheight&quot; ) );
          xml.set_attribute( inpin, &quot;text&quot;, xml.get_attribute( uobj0, &quot;inpintext&quot; ) );
          xml.set_attribute( inpin, &quot;px&quot;, xml.get_attribute( uobj0, &quot;inpinx0&quot; ) );
          xml.set_attribute( inpin, &quot;py&quot;, xml.get_attribute( uobj0, &quot;inpiny0&quot; ) );
          inrel = xml.new_element( xobj, &quot;relation&quot;, &quot;_Rin&quot; );
          xml.set_attribute( inrel, &quot;pin1name&quot;, &quot;_Pin&quot; );
          xml.set_attribute( inrel, &quot;pin2name&quot;, &quot;_OX&quot; );
        }

        xml.del_element( uobj0 );

        oedit.Login( here );
      }
    }

//  KJgroupをxobjectに変換する
    public void grouptox( Object group ){
      if( !sedit_is_active ){
        Object here = oedit.element;
        oedit.Logout();

        Vector incomps0 = new Vector();
        Vector incomps = new Vector();
        Vector links0 = new Vector();
        Vector links = new Vector();

// xobjectを生成( rectangleは同一、 名前はコメントと同一 )
        String gid  = xml.elementID( group );
        int ID_maker = parseInt( xml.get_attribute( here, &quot;ID_maker&quot; ) );
        Object xobj = xml.new_element( here, &quot;xobject&quot;, &quot;_X&quot; + gid );

        xml.set_attribute( xobj, &quot;x0&quot;, xml.get_attribute( group, &quot;x0&quot; ) );
        xml.set_attribute( xobj, &quot;y0&quot;, xml.get_attribute( group, &quot;y0&quot; ) );
        xml.set_attribute( xobj, &quot;width&quot;, xml.get_attribute( group, &quot;width&quot; ) );
        xml.set_attribute( xobj, &quot;height&quot;, xml.get_attribute( group, &quot;height&quot; ) );
        xml.set_attribute( xobj, &quot;objectname&quot;, xml.get_attribute( group, &quot;comment&quot; ) );
        xml.set_attribute( xobj, &quot;description&quot;, &quot;&quot; );

        // KJgroup内のコンポーネントをxobject内にコピー
        int  x0 = parseInt( xml.get_attribute( group, &quot;x0&quot; ) );
        int  y0 = parseInt( xml.get_attribute( group, &quot;y0&quot; ) );
        int  width  = parseInt( xml.get_attribute( group, &quot;width&quot; ) );
        int  height = parseInt( xml.get_attribute( group, &quot;height&quot; ) );
        Vector comps = xml.child_list( here );
        for( int j = comps.size()-1; j &gt;= 0; j-- ){
          String cname = xml.element_name( comps.get(j) );

          // コンポーネント: xobject, aobject, uobject, pin, codeclip, group
          if( cname.equals( &quot;xobject&quot; ) ||
          cname.equals( &quot;aobject&quot; ) ||
          cname.equals( &quot;operation&quot; ) ||
          cname.equals( &quot;pin&quot; ) ||
          cname.equals( &quot;codeclip&quot; ) ||
          cname.equals( &quot;KJgroup&quot; ) ){
            Object c = comps.get(j);
            int x =  parseInt( xml.get_attribute( c, &quot;x0&quot; ) );
            int y =  parseInt( xml.get_attribute( c, &quot;y0&quot; ) );
            if( ( x &gt; x0 ) &amp;&amp; ( x &lt; x0 + width ) &amp;&amp; ( y &gt; y0 ) &amp;&amp; ( y &lt; y0 + height ) ){
              Object c2 = xml.new_element( xobj, c, xml.elementID( c ) );
              incomps0.add( c );
              incomps.add( c2 );
              if( cname.equals( &quot;pin&quot; ) ){
                xml.set_attribute( c2, &quot;px&quot;, &quot;&quot;+ ( x - x0 ) );
                xml.set_attribute( c2, &quot;py&quot;, &quot;&quot;+ ( y - y0 ) );
              }
            }
          }
        }


//KJgroup内のrelationをxobject内にコピー(接続元＆接続先がグループ内にある場合)
        Vector rels = xml.child_list( here, &quot;relation&quot; );
        for( int j = rels.size()-1; j &gt;= 0; j-- ){
          Object r = rels.get(j);
          String p1 = xml.get_attribute( r, &quot;pin1name&quot; );
          if( p1.indexOf( &apos;(&apos; ) &gt; 0 ) p1 = getbase( p1 ); 
          Object c1 = xml.child( here, p1 ); 
          String p2 = xml.get_attribute( r, &quot;pin2name&quot; );
          if( p2.indexOf( &apos;(&apos; ) &gt; 0 ) p2 = getbase( p2 ); 
          Object c2 = xml.child( here, p2 );
          if( incomps0.contains( c1 ) &amp;&amp; incomps0.contains( c2 ) ){
            links0.add( r );
            links.add( xml.new_element( xobj, r, xml.elementID( r ) ) );
          } 
        }

// 一方がグループ内でもう一方がグループ外にリンクしているrelationを探す
        for( int j = rels.size()-1; j &gt;= 0; j-- ){
          Object r = rels.get(j);
          String p1 = xml.get_attribute( r, &quot;pin1name&quot; );
          String q1 = p1;
          if( p1.indexOf( &apos;(&apos; ) &gt;= 0 ) p1 = getbase( p1 ); 
          Object c1 = xml.child( here, p1 ); 
          String p2 = xml.get_attribute( r, &quot;pin2name&quot; );
          String q2 = p2;
          if( p2.indexOf( &apos;(&apos; ) &gt;= 0 ) p2 = getbase( p2 ); 
          Object c2 = xml.child( here, p2 );
          if( ( incomps0.contains( c1 ) &amp;&amp; ( !incomps0.contains( c2 ) ) ) ||
              ( ( !incomps0.contains( c1 ) ) &amp;&amp; incomps0.contains( c2 ) ) ){

            boolean reverse = false;
            if( ( !incomps0.contains( c1 ) ) &amp;&amp; incomps0.contains( c2 ) ){
              reverse = true;
              Object t = c1;
              c1 = c2;
              c2 = t;
              String s = q1;
              q1 = q2;
              q2 = s;
            }

// pinの場合はダイレクトにリンクさせる
            String cname1 = xml.element_name( c1 );
            if( cname1.equals( &quot;pin&quot; ) ){
              if( reverse ) xml.set_attribute( r, &quot;pin2name&quot;, &quot;_X&quot; + gid + &quot;(&quot; + xml.elementID( c1 ) + &quot;)&quot; );
              else          xml.set_attribute( r, &quot;pin1name&quot;, &quot;_X&quot; + gid + &quot;(&quot; + xml.elementID( c1 ) + &quot;)&quot; );
            }

// xobject, aobject, uobjectのときは新規に pin&amp;relationを生成して中継させる
            else{

              String pintext = null;

              int c1x = 0, c1y = 0, c1w = 0, c1h = 0;
              int c2x = 0, c2y = 0, c2w = 0, c2h = 0;
  
              int gx = parseInt( xml.get_attribute( group, &quot;x0&quot; ) );
              int gy = parseInt( xml.get_attribute( group, &quot;y0&quot; ) );
              int gw = parseInt( xml.get_attribute( group, &quot;width&quot; ) );
              int gh = parseInt( xml.get_attribute( group, &quot;height&quot; ) );

              if( cname1.equals( &quot;xobject&quot; ) || cname1.equals( &quot;aobject&quot; ) ){
                Object cp = xml.child( c1, getsubscript( q1 ) );
                pintext = xml.get_attribute( cp, &quot;text&quot; );
                c1x = parseInt( xml.get_attribute( c1, &quot;x0&quot; ) ) + parseInt( xml.get_attribute( cp, &quot;px&quot; ) );
                c1y = parseInt( xml.get_attribute( c1, &quot;y0&quot; ) ) + parseInt( xml.get_attribute( cp, &quot;py&quot; ) );
                c1w = 16 * pintext.length();
                c1h = 16;
              }
              else if( cname1.equals( &quot;operation&quot; ) ){
                if( reverse ){
                  pintext = xml.get_attribute( c1, &quot;inpintext&quot; );
                  c1x = parseInt( xml.get_attribute( c1, &quot;x0&quot; ) ) + parseInt( xml.get_attribute( c1, &quot;inpinx0&quot; ) );
                  c1y = parseInt( xml.get_attribute( c1, &quot;y0&quot; ) ) + parseInt( xml.get_attribute( c1, &quot;inpiny0&quot; ) );
                  c1w = parseInt( xml.get_attribute( c1, &quot;inpinwidth&quot; ) );
                  c1h = parseInt( xml.get_attribute( c1, &quot;inpinheight&quot; ) );
                }
                else{
                  pintext = xml.get_attribute( c1, &quot;outpintext&quot; );
                  c1x = parseInt( xml.get_attribute( c1, &quot;x0&quot; ) ) + parseInt( xml.get_attribute( c1, &quot;outpinx0&quot; ) );
                  c1y = parseInt( xml.get_attribute( c1, &quot;y0&quot; ) ) + parseInt( xml.get_attribute( c1, &quot;outpiny0&quot; ) );
                  c1w = parseInt( xml.get_attribute( c1, &quot;outpinwidth&quot; ) );
                  c1h = parseInt( xml.get_attribute( c1, &quot;outpinheight&quot; ) );
                }
              }

              String cname2 = xml.element_name( c2 );
              if( cname2.equals( &quot;pin&quot; ) ){
                c2x = parseInt( xml.get_attribute( c2, &quot;x0&quot; ) );
                c2y = parseInt( xml.get_attribute( c2, &quot;y0&quot; ) );
                c2w = parseInt( xml.get_attribute( c2, &quot;width&quot; ) );
                c2h = parseInt( xml.get_attribute( c2, &quot;height&quot; ) );
              }
              else if( cname2.equals( &quot;xobject&quot; ) || cname2.equals( &quot;aobject&quot; ) ){
                Object cp = xml.child( c2, getsubscript( q2 ) );
                c2x = parseInt( xml.get_attribute( c2, &quot;x0&quot; ) ) + parseInt( xml.get_attribute( cp, &quot;px&quot; ) );
                c2y = parseInt( xml.get_attribute( c2, &quot;y0&quot; ) ) + parseInt( xml.get_attribute( cp, &quot;py&quot; ) );
                c2w = 16 * xml.get_attribute( cp, &quot;text&quot; ).length();
                c2h = 16;
              }
              else if( cname2.equals( &quot;operation&quot; ) ){
                if( reverse ){
                  c2x = parseInt( xml.get_attribute( c2, &quot;x0&quot; ) ) + parseInt( xml.get_attribute( c2, &quot;outpinx0&quot; ) );
                  c2y = parseInt( xml.get_attribute( c2, &quot;y0&quot; ) ) + parseInt( xml.get_attribute( c2, &quot;outpiny0&quot; ) );
                  c2w = parseInt( xml.get_attribute( c2, &quot;outpinwidth&quot; ) );
                  c2h = parseInt( xml.get_attribute( c2, &quot;outpinheight&quot; ) );
                }
                else{
                  c2x = parseInt( xml.get_attribute( c2, &quot;x0&quot; ) ) + parseInt( xml.get_attribute( c2, &quot;inpinx0&quot; ) );
                  c2y = parseInt( xml.get_attribute( c2, &quot;y0&quot; ) ) + parseInt( xml.get_attribute( c2, &quot;intpiny0&quot; ) );
                  c2w = parseInt( xml.get_attribute( c2, &quot;inpinwidth&quot; ) );
                  c2h = parseInt( xml.get_attribute( c2, &quot;intpinheight&quot; ) );
                }
              }

              int xx = c2x;
              int yy = c2y;
              int px = c1x - gx;
              int py = c1y - gy;

              Object pinX  = xml.new_element( xobj, &quot;pin&quot;, &quot;_P&quot; + ID_maker );
              xml.set_attribute( pinX, &quot;text&quot;, &quot;pin&quot; + ID_maker + &quot;(&quot; + getsubscript( pintext ) + &quot;)&quot; );
              xml.set_attribute( pinX, &quot;x0&quot;, &quot;&quot; + xx );
              xml.set_attribute( pinX, &quot;y0&quot;, &quot;&quot; + yy );
              xml.set_attribute( pinX, &quot;width&quot;, &quot;80&quot; );
              xml.set_attribute( pinX, &quot;height&quot;, &quot;24&quot; );
              xml.set_attribute( pinX, &quot;px&quot;, &quot;&quot; + px );
              xml.set_attribute( pinX, &quot;py&quot;, &quot;&quot; + py );
              if( reverse ){
                Object relX  = xml.new_element( xobj, &quot;relation&quot;, &quot;_R&quot; + ( ID_maker + 1 ) );
                xml.set_attribute( relX, &quot;pin2name&quot;, xml.get_attribute( r, &quot;pin2name&quot; ) );
                xml.set_attribute( relX, &quot;pin1name&quot;, &quot;_P&quot; + ID_maker );
                xml.set_attribute( r, &quot;pin2name&quot;, &quot;_X&quot; + gid + &quot;(_P&quot; + ID_maker + &quot;)&quot; );
              }
              else{
                Object relX  = xml.new_element( xobj, &quot;relation&quot;, &quot;_R&quot; + ( ID_maker + 1 ) );
                xml.set_attribute( relX, &quot;pin1name&quot;, xml.get_attribute( r, &quot;pin1name&quot; ) );
                xml.set_attribute( relX, &quot;pin2name&quot;, &quot;_P&quot; + ID_maker );
                xml.set_attribute( r, &quot;pin1name&quot;, &quot;_X&quot; + gid + &quot;(_P&quot; + ID_maker + &quot;)&quot; );
              }
              ID_maker += 2;
            } 
          }
        }



// 内部コンポーネントの座標を変換する
        incomps = xml.child_list( xobj );
        int  ox = -1, oy = -1; //座標変換のオフセット
        for( int j = incomps.size()-1; j &gt;= 0; j-- ){
          String cname = xml.element_name( incomps.get(j) );
          if( cname.equals( &quot;xobject&quot; ) ||
          cname.equals( &quot;aobject&quot; ) ||
          cname.equals( &quot;operation&quot; ) ||
          cname.equals( &quot;pin&quot; ) ||
          cname.equals( &quot;codeclip&quot; ) ||
          cname.equals( &quot;KJgroup&quot; ) ) {
            Object c = incomps.get(j);
            int x =  parseInt( xml.get_attribute( c, &quot;x0&quot; ) );
            int y =  parseInt( xml.get_attribute( c, &quot;y0&quot; ) );
            if( ( ox &lt; 0 ) || ( ox &gt; x  ) ) ox = x;
            if( ( oy &lt; 0 ) || ( oy &gt; y  ) ) oy = y;
          }
        }
        for( int j = incomps.size()-1; j &gt;= 0; j-- ){
          String cname = xml.element_name( incomps.get(j) );
          if( cname.equals( &quot;xobject&quot; ) ||
          cname.equals( &quot;aobject&quot; ) ||
          cname.equals( &quot;operation&quot; ) ||
          cname.equals( &quot;pin&quot; ) ||
          cname.equals( &quot;codeclip&quot; ) ||
          cname.equals( &quot;KJgroup&quot; ) ) {
            Object c = incomps.get(j);
            xml.set_attribute( c, &quot;x0&quot;, &quot;&quot; + ( parseInt( xml.get_attribute( c, &quot;x0&quot; ) ) - ox + 20 ) );
            xml.set_attribute( c, &quot;y0&quot;, &quot;&quot; + ( parseInt( xml.get_attribute( c, &quot;y0&quot; ) ) - oy + 20 ) );
          }
        }

//　グループ＆グループ内のコンポーネントを削除
        xml.del_element( group );
        for( int j = incomps0.size()-1; j &gt;= 0; j-- ){
          xml.del_element( incomps0.get(j) );
        }
        for( int j = links0.size()-1; j &gt;= 0; j-- ){
          xml.del_element( links0.get(j) );
        }

        xml.set_attribute( xobj, &quot;ID_maker&quot;, &quot;&quot; + ID_maker  );

        oedit.Login( here );
      }
    }

//  xobjectをKJgroupに変換する
    public void xtogroup( Object xobj ){
      if( !sedit_is_active ){
        Object here = oedit.element;
        oedit.Logout();

        int ID_maker = parseInt( xml.get_attribute( here, &quot;ID_maker&quot; ) );
        String gid = &quot;_G&quot; + ID_maker++;
        String xid = xml.elementID( xobj );


// xobject内の画面の大きさを求める
        int ex0 = -1, ey0 = -1, ex1 = -1, ey1 = -1;
        Vector xcomps = xml.child_list( xobj );
        for( int j = xcomps.size()-1; j &gt;= 0; j-- ){
          String cname = xml.element_name( xcomps.get(j) );
          if( cname.equals( &quot;xobject&quot; ) ||
          cname.equals( &quot;aobject&quot; ) ||
          cname.equals( &quot;operation&quot; ) ||
          cname.equals( &quot;pin&quot; ) ||
          cname.equals( &quot;codeclip&quot; ) ||
          cname.equals( &quot;KJgroup&quot; ) ) {
            Object c = xcomps.get(j);
            int x =  parseInt( xml.get_attribute( c, &quot;x0&quot; ) );
            int y =  parseInt( xml.get_attribute( c, &quot;y0&quot; ) );
            int w =  parseInt( xml.get_attribute( c, &quot;width&quot; ) );
            int h =  parseInt( xml.get_attribute( c, &quot;height&quot; ) );
            if( ( ex0 &lt; 0 ) || ( ex0 &gt; x  ) ) ex0 = x;
            if( ( ey0 &lt; 0 ) || ( ey0 &gt; y  ) ) ey0 = y;
            if( ( ex1 &lt; 0 ) || ( ex1 &lt; x + w ) ) ex1 = x + w;
            if( ( ey1 &lt; 0 ) || ( ey1 &lt; y + h ) ) ey1 = y + h;
          }
        }

        int wid = parseInt( xml.get_attribute( xobj, &quot;width&quot; ) );
        int wid2 = ex1 - ex0 + 20;
        if( wid &lt; wid2 ) wid = wid2;
        int hei = parseInt( xml.get_attribute( xobj, &quot;height&quot; ) );
        int hei2 = ey1 - ey0 + 40;
        if( hei &lt; hei2 ) hei = hei2;
        Object group = xml.new_element( here, &quot;KJgroup&quot;, gid );
        xml.set_attribute( group, &quot;comment&quot;, xml.get_attribute( xobj, &quot;objectname&quot; ) );
        xml.set_attribute( group, &quot;x0&quot;, xml.get_attribute( xobj, &quot;x0&quot; ) );
        xml.set_attribute( group, &quot;y0&quot;, xml.get_attribute( xobj, &quot;y0&quot; ) );
        xml.set_attribute( group, &quot;width&quot;,  &quot;&quot; + wid );
        xml.set_attribute( group, &quot;height&quot;, &quot;&quot; + hei );

// 画面の中のxobjectの座標( ex0, ey0 )より大きいコンポーネントをずらす
        int x0 =  parseInt( xml.get_attribute( xobj, &quot;x0&quot; ) );
        int y0 =  parseInt( xml.get_attribute( xobj, &quot;y0&quot; ) );
        int width =  parseInt( xml.get_attribute( xobj, &quot;width&quot; ) );
        int height =  parseInt( xml.get_attribute( xobj, &quot;height&quot; ) );
        Vector comps = xml.child_list( here );
        for( int j = comps.size()-1; j &gt;= 0; j-- ){
          String cname = xml.element_name( comps.get(j) );
          if( cname.equals( &quot;xobject&quot; ) ||
          cname.equals( &quot;aobject&quot; ) ||
          cname.equals( &quot;operation&quot; ) ||
          cname.equals( &quot;pin&quot; ) ||
          cname.equals( &quot;codeclip&quot; ) ||
          cname.equals( &quot;KJgroup&quot; ) ) {
            Object c = comps.get(j);
            int x =  parseInt( xml.get_attribute( c, &quot;x0&quot; ) );
            int y =  parseInt( xml.get_attribute( c, &quot;y0&quot; ) );
            if( x &gt;= x0 + width )  xml.set_attribute( c, &quot;x0&quot;,&quot;&quot; + ( x + ex1 - ex0 - width  + 20 ) );
            if( y &gt;= y0 + height ) xml.set_attribute( c, &quot;y0&quot;,&quot;&quot; + ( y + ey1 - ey0 - height + 40 ) );
          }
        }

// ずらしたところにxobjectの中の画面をはめ込む
// コンポーネントの名前を重複しないようにつけかえる
        for( int j = xcomps.size()-1; j &gt;= 0; j-- ){
          String cname = xml.element_name( xcomps.get(j) );
          if( cname.equals( &quot;xobject&quot; ) ||
          cname.equals( &quot;aobject&quot; ) ||
          cname.equals( &quot;operation&quot; ) ||
          cname.equals( &quot;pin&quot; ) ||
          cname.equals( &quot;codeclip&quot; ) ||
          cname.equals( &quot;KJgroup&quot; ) ) {
            Object c1 = xcomps.get(j);
            Object c2 = xml.new_element( here, c1, xml.elementID( c1 ).substring( 0, 2 ) + ( ID_maker + j ) );
            int x =  parseInt( xml.get_attribute( c2, &quot;x0&quot; ) );
            int y =  parseInt( xml.get_attribute( c2, &quot;y0&quot; ) );
            xml.set_attribute( c2, &quot;x0&quot;,&quot;&quot; + ( x + x0 - ex0 + 10 ) );
            xml.set_attribute( c2, &quot;y0&quot;,&quot;&quot; + ( y + y0 - ey0 + 30 ) );
 
          }
        }

//relation  のコンポーネント名の所もつけかえる
        for( int j = xcomps.size()-1; j &gt;= 0; j-- ){
          String cname = xml.element_name( xcomps.get(j) );

          //   relation
          if( cname.equals( &quot;relation&quot; ) ){
            int index = 0;
            Object r1 = xcomps.get(j);
            Object r2 = xml.new_element( here, r1, xml.elementID( r1 ).substring( 0, 2 ) + ( ID_maker + j ) );
            String nm1 = xml.get_attribute( r1, &quot;pin1name&quot; );
            if( nm1.indexOf( &apos;(&apos; ) &gt; 0 ){
              String  base = getbase( nm1 );
              for( index = xcomps.size(); ( --index &gt;= 0 ) &amp;&amp; ( !base.equals( xml.elementID( xcomps.get( index ) ) ) ); ) ;
              xml.set_attribute( r2, &quot;pin1name&quot;, nm1.substring( 0, 2 ) + ( ID_maker + index ) + &quot;(&quot;  + getsubscript( nm1 ) + &quot;)&quot; );
            }
            else{
              for( index = xcomps.size(); ( --index &gt;= 0 ) &amp;&amp; ( !nm1.equals( xml.elementID( xcomps.get( index ) ) ) ); ) ;
              xml.set_attribute( r2, &quot;pin1name&quot;, nm1.substring( 0, 2 ) + ( ID_maker + index ) );
            }
            String nm2 = xml.get_attribute( r1, &quot;pin2name&quot; );
            if( nm2.indexOf( &apos;(&apos; ) &gt; 0 ){
              String  base = getbase( nm2 );
              for( index = xcomps.size(); ( --index &gt;= 0 ) &amp;&amp; ( !base.equals( xml.elementID( xcomps.get( index ) ) ) ); ) ;
              xml.set_attribute( r2, &quot;pin2name&quot;, nm2.substring( 0, 2 ) + ( ID_maker + index ) + &quot;(&quot;  + getsubscript( nm2 ) + &quot;)&quot; );
            }
            else{
              for( index = xcomps.size(); ( --index &gt;= 0 ) &amp;&amp; ( !nm2.equals( xml.elementID( xcomps.get( index ) ) ) ); ) ;
              xml.set_attribute( r2, &quot;pin2name&quot;, nm2.substring( 0, 2 ) + ( ID_maker + index ) );
            }
          }
        }

// xobjectにリンクしているrelationをつけかえる
        for( int j = comps.size()-1; j &gt;= 0; j-- ){
          Object cmp = comps.get(j);
          String cname = xml.element_name( cmp );


          // relation
          if( cname.equals( &quot;relation&quot; ) ){
            int index = 0;
            String xnm1 = xml.get_attribute( cmp, &quot;pin1name&quot; );
            if( xnm1.startsWith( xid ) ){
              String pid = getsubscript( xnm1 );
              for( index = xcomps.size(); ( --index &gt;= 0 ) &amp;&amp; ( !pid.equals( xml.elementID( xcomps.get( index ) ) ) ); ) ;
              xml.set_attribute( cmp, &quot;pin1name&quot;, pid.substring( 0, 2 ) + ( ID_maker + index ) );
            }
            String xnm2 = xml.get_attribute( cmp, &quot;pin2name&quot; );
            if( xnm2.startsWith( xid ) ){
              String pid = getsubscript( xnm2 );
              for( index = xcomps.size(); ( --index &gt;= 0 ) &amp;&amp; ( !pid.equals( xml.elementID( xcomps.get( index ) ) ) ); ) ;
              xml.set_attribute( cmp, &quot;pin2name&quot;, pid.substring( 0, 2 ) + ( ID_maker + index ) );
            }
          }
        }


        xml.set_attribute( here, &quot;ID_maker&quot;, &quot;&quot; + ( ID_maker + xcomps.size() + 1 ) );
        xml.del_element( xobj );

        oedit.Login( here );
      }
    }


</codetext>
</codeclip>
<xobject>
<ID>_X99</ID>
<x0>780</x0>
<y0>292</y0>
<width>216</width>
<height>93</height>
<ID_maker>41</ID_maker>
<objectname>GUIDesigner</objectname>
<description></description>
<codeclip>
<ID>_C0</ID>
<x0>22</x0>
<y0>11</y0>
<width>215</width>
<height>48</height>
<codetext>// GUIデザイナのUI
GUIDesigner_UI designer;
class GUIDesigner_UI{

int id;
int back_r = 255, back_g = 255, back_b = 255;
Vector member;

AbsoluteLayout base;
AbsoluteLayout ebase;
HorizontalScrollView exview;
ScrollView eyview;

AbsoluteLayout pbase;
HorizontalScrollView pxview;
ScrollView pyview;

Button bopen;
Button bsave;
Button bcompile;
Button bdelete;
Button bexit;

TextView Lproperty;
TextView Ltitle; EditText etitle;
TextView Lcolor; Button   bcolor;
TextView Lscale; EditText escale;

TextView Litems;
ImageButton blist;
ImageButton bcheckbox;
ImageButton bvslider;
ImageButton bhslider;
ImageButton btextfield;
ImageButton btextarea;
ImageButton bbutton;
ImageButton blabel;

TextView Lcproperty;

// GUIデザイナコンポーネントを作成
GUIDesigner_UI(){

dprint(&quot;objedit gui\n&quot;);

base = new AbsoluteLayout(ACTIVITY);
base.setBackgroundColor(Color.rgb( 255, 255, 255));
pbase = new AbsoluteLayout(ACTIVITY);
pbase.setBackgroundColor(Color.rgb( 255, 255, 255));
ebase = new AbsoluteLayout(ACTIVITY);
ebase.setBackgroundColor(Color.rgb( back_r, back_g, back_b ));
ebase.setOnTouchListener( new View.OnTouchListener(){
  @Override    
  public boolean onTouch(View v, MotionEvent event) {
    if (event.getAction() == MotionEvent.ACTION_UP) {
      touch_x = (int) event.getRawX();    
      touch_y = (int) event.getRawY();
      xhandler( null,&quot;touch&quot; );
    }
    return true;
  }
});

/*
ebase.setFocusable(true);
ebase.setFocusableInTouchMode(true);
ebase.setOnKeyListener( new View.OnKeyListener(){
  @Override
  public boolean onKey(View v, int keyCode, KeyEvent event) {
    if (event.getAction() == KeyEvent.ACTION_DOWN) {
      key_code = keyCode;
      xhandler( null,&quot;keyinput&quot; );
    }
    return true;
  }
});
*/

bopen = new Button(ACTIVITY);
bopen.setPadding(1, 1, 1, 1);
bopen.setGravity(Gravity.CENTER|Gravity.CENTER);
bopen.setTextColor( Color.rgb( 0, 0, 0 ));
bopen.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bopen.setTextSize( FSIZE );
bopen.setText(&quot;開く&quot;);
bopen.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ xhandler( null,&quot;open&quot;);}
});
bopen.setLayoutParams( new AbsoluteLayout.LayoutParams( cnt_btn_wid,item_hei,hpos,vpos ) );
pbase.addView( bopen );
hpos+=cnt_btn_wid+1;

bsave = new Button(ACTIVITY);
bsave.setPadding(1, 1, 1, 1);
bsave.setGravity(Gravity.CENTER|Gravity.CENTER);
bsave.setTextColor( Color.rgb( 0, 0, 0 ));
bsave.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bsave.setTextSize( FSIZE );
bsave.setText(&quot;保存&quot;);
bsave.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ xhandler( null,&quot;save&quot;);}
});
bsave.setLayoutParams( new AbsoluteLayout.LayoutParams( cnt_btn_wid,item_hei,hpos,vpos ) );
pbase.addView( bsave );
hpos+=cnt_btn_wid+1;

bcompile = new Button(ACTIVITY);
bcompile.setPadding(1, 1, 1, 1);
bcompile.setGravity(Gravity.CENTER|Gravity.CENTER);
bcompile.setTextColor( Color.rgb( 0, 0, 0 ));
bcompile.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bcompile.setTextSize( FSIZE );
bcompile.setText(&quot;変換&quot;);
bcompile.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ xhandler( null,&quot;compile&quot;);}
});
bcompile.setLayoutParams( new AbsoluteLayout.LayoutParams( cnt_btn_wid,item_hei,hpos,vpos ) );
pbase.addView( bcompile );
hpos+=cnt_btn_wid+1;

bdelete = new Button(ACTIVITY);
bdelete.setPadding(1, 1, 1, 1);
bdelete.setGravity(Gravity.CENTER|Gravity.CENTER);
bdelete.setTextColor( Color.rgb( 0, 0, 0 ));
bdelete.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bdelete.setTextSize( FSIZE );
bdelete.setText(&quot;削除&quot;);
bdelete.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ xhandler( null,&quot;delete&quot;);}
});
bdelete.setLayoutParams( new AbsoluteLayout.LayoutParams( cnt_btn_wid,item_hei,hpos,vpos ) );
pbase.addView( bdelete );
hpos+=cnt_btn_wid+1;

bexit = new Button(ACTIVITY);
bexit.setPadding(1, 1, 1, 1);
bexit.setGravity(Gravity.CENTER|Gravity.CENTER);
bexit.setTextColor( Color.rgb( 0, 0, 0 ));
bexit.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bexit.setTextSize( FSIZE );
bexit.setText(&quot;終了&quot;);
bexit.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ xhandler( null,&quot;exit&quot;);}
});
bexit.setLayoutParams( new AbsoluteLayout.LayoutParams( cnt_btn_wid,item_hei,hpos,vpos ) );
pbase.addView( bexit );
vpos+=item_hei;

Lproperty = new TextView(ACTIVITY);
Lproperty.setPadding(1, 1, 1, 1);
Lproperty.setGravity(Gravity.CENTER|Gravity.CENTER);
Lproperty.setTextColor( Color.rgb( 0, 0, 0 ));
Lproperty.setTextSize( FSIZE );
Lproperty.setText(&quot;＜GUIのプロパティ＞&quot;);
Lproperty.setLayoutParams( new AbsoluteLayout.LayoutParams( title_wid,item_hei,0,vpos ) );
pbase.addView( Lproperty );
vpos+=item_hei+3;

Ltitle = new TextView(ACTIVITY);
Ltitle.setPadding(1, 1, 1, 1);
Ltitle.setGravity(Gravity.LEFT|Gravity.CENTER);
Ltitle.setTextColor( Color.rgb( 0, 0, 0 ));
Ltitle.setTextSize( FSIZE );
Ltitle.setText(&quot;タイトル&quot;);
Ltitle.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,vpos ) );
pbase.addView( Ltitle );

etitle = new EditText(ACTIVITY);
etitle.setPadding(1, 1, 1, 1);
etitle.setGravity(Gravity.CENTER|Gravity.CENTER);
etitle.setTextSize( FSIZE );
etitle.setTextColor( Color.rgb( 0, 0, 0 ));
etitle.setBackgroundColor( Color.rgb( 255, 255, 255 ));
etitle.setText( &quot;NoTitle&quot; );
etitle.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,vpos ) );
pbase.addView( etitle );
vpos+=item_hei+3;

Lcolor = new TextView(ACTIVITY);
Lcolor.setPadding(1, 1, 1, 1);
Lcolor.setGravity(Gravity.LEFT|Gravity.CENTER);
Lcolor.setTextColor( Color.rgb( 0, 0, 0 ));
Lcolor.setTextSize( FSIZE );
Lcolor.setText(&quot;土台の色&quot;);
Lcolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,vpos ) );
pbase.addView( Lcolor );

bcolor = new Button(ACTIVITY);
bcolor.setPadding(1, 1, 1, 1);
bcolor.setTextSize( FSIZE );
bcolor.setTextColor( Color.rgb( 0, 0, 0 ));
bcolor.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bcolor.setText( &quot;変える&quot; );
bcolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,vpos ) );
bcolor.setOnClickListener( new View.OnClickListener(){
  @Override
  public void onClick(View v){ xhandler( null, &quot;backcolor&quot;);}
});
pbase.addView( bcolor );
vpos+=item_hei+3;

Lscale = new TextView(ACTIVITY);
Lscale.setPadding(1, 1, 1, 1);
Lscale.setGravity(Gravity.LEFT|Gravity.CENTER);
Lscale.setTextColor( Color.rgb( 0, 0, 0 ));
Lscale.setTextSize( FSIZE );
Lscale.setText(&quot;倍率&quot;);
Lscale.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,vpos ) );
pbase.addView( Lscale );

escale = new EditText(ACTIVITY);
escale.setPadding(1, 1, 1, 1);
escale.setGravity(Gravity.CENTER|Gravity.CENTER);
escale.setTextSize( FSIZE );
escale.setTextColor( Color.rgb( 0, 0, 0 ));
escale.setBackgroundColor( Color.rgb( 255, 255, 255 ));
escale.setText( &quot;1&quot; );
escale.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,vpos ) );
pbase.addView( escale );
vpos+=item_hei+3;

Litems = new TextView(ACTIVITY);
Litems.setPadding(1, 1, 1, 1);
Litems.setGravity(Gravity.CENTER|Gravity.CENTER);
Litems.setTextColor( Color.rgb( 0, 0, 0 ));
Litems.setTextSize( FSIZE );
Litems.setText(&quot;＜コンポーネントの種類＞&quot;);
Litems.setLayoutParams( new AbsoluteLayout.LayoutParams( title_wid,item_hei,0,vpos ) );
pbase.addView( Litems );
vpos+=item_hei+3;
hpos=gui_btn_tab;

blist = new ImageButton(ACTIVITY);
blist.setPadding(1, 1, 1, 1);
blist.setBackgroundColor( Color.rgb( 200, 200, 200 ));
blist.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.list ));
blist.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ xhandler( null,&quot;create list&quot;);}
});
blist.setLayoutParams( new AbsoluteLayout.LayoutParams( gui_btn_wid,item_hei,hpos,vpos ) );
pbase.addView( blist );
hpos+=gui_btn_wid+1;

bcheckbox = new ImageButton(ACTIVITY);
bcheckbox.setPadding(1, 1, 1, 1);
bcheckbox.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bcheckbox.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.checkbox ));
bcheckbox.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ xhandler( null,&quot;create checkbox&quot;);}
});
bcheckbox.setLayoutParams( new AbsoluteLayout.LayoutParams( gui_btn_wid,item_hei,hpos,vpos ) );
pbase.addView( bcheckbox );
hpos+=gui_btn_wid+1;

bvslider = new ImageButton(ACTIVITY);
bvslider.setPadding(1, 1, 1, 1);
bvslider.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bvslider.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.vslider ));
bvslider.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ xhandler( null,&quot;create vslider&quot;);}
});
bvslider.setLayoutParams( new AbsoluteLayout.LayoutParams( gui_btn_wid,item_hei,hpos,vpos ) );
pbase.addView( bvslider );
hpos+=gui_btn_wid+1;

bhslider = new ImageButton(ACTIVITY);
bhslider.setPadding(1, 1, 1, 1);
bhslider.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bhslider.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.hslider ));
bhslider.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ xhandler( null,&quot;create hslider&quot;);}
});
bhslider.setLayoutParams( new AbsoluteLayout.LayoutParams( gui_btn_wid,item_hei,hpos,vpos ) );
pbase.addView( bhslider );
hpos+=gui_btn_wid+1;

btextfield = new ImageButton(ACTIVITY);
btextfield.setPadding(1, 1, 1, 1);
btextfield.setBackgroundColor( Color.rgb( 200, 200, 200 ));
btextfield.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.textfield ));
btextfield.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ xhandler( null,&quot;create textfield&quot;);}
});
btextfield.setLayoutParams( new AbsoluteLayout.LayoutParams( gui_btn_wid,item_hei,hpos,vpos ) );
pbase.addView( btextfield );
hpos+=gui_btn_wid+1;

btextarea = new ImageButton(ACTIVITY);
btextarea.setPadding(1, 1, 1, 1);
btextarea.setBackgroundColor( Color.rgb( 200, 200, 200 ));
btextarea.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.textarea ));
btextarea.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ xhandler( null,&quot;create textarea&quot;);}
});
btextarea.setLayoutParams( new AbsoluteLayout.LayoutParams( gui_btn_wid,item_hei,hpos,vpos ) );
pbase.addView( btextarea );
hpos+=gui_btn_wid+1;

bbutton = new ImageButton(ACTIVITY);
bbutton.setPadding(1, 1, 1, 1);
bbutton.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bbutton.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.button ));
bbutton.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ xhandler( null,&quot;create button&quot;);}
});
bbutton.setLayoutParams( new AbsoluteLayout.LayoutParams( gui_btn_wid,item_hei,hpos,vpos ) );
pbase.addView( bbutton );
hpos+=gui_btn_wid+1;

blabel = new ImageButton(ACTIVITY);
blabel.setPadding(1, 1, 1, 1);
blabel.setBackgroundColor( Color.rgb( 200, 200, 200 ));
blabel.setImageBitmap( BitmapFactory.decodeResource(ACTIVITY.getResources(), R.drawable.label ));
blabel.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){ xhandler( null,&quot;create label&quot;);}
});
blabel.setLayoutParams( new AbsoluteLayout.LayoutParams( gui_btn_wid,item_hei,hpos,vpos ) );
pbase.addView( blabel );
vpos+=item_hei+3;

Lcproperty = new TextView(ACTIVITY);
Lcproperty.setPadding(1, 1, 1, 1);
Lcproperty.setGravity(Gravity.CENTER|Gravity.CENTER);
Lcproperty.setTextColor( Color.rgb( 0, 0, 0 ));
Lcproperty.setTextSize( FSIZE );
Lcproperty.setText(&quot;＜コンポーネンのプロパティ＞&quot;);
Lcproperty.setLayoutParams( new AbsoluteLayout.LayoutParams( title_wid,item_hei,0,vpos ) );
pbase.addView( Lcproperty );
vpos+=item_hei+3;
hpos = 0;

ebase.setLayoutParams( new AbsoluteLayout.LayoutParams( 2048,2048,0,0 ) );
AbsoluteLayout e = new AbsoluteLayout(ACTIVITY);
e.addView( ebase );
eyview = new ScrollView(ACTIVITY);
eyview.addView(e);
exview = new HorizontalScrollView(ACTIVITY);
exview.addView(eyview);
exview.setLayoutParams( new AbsoluteLayout.LayoutParams( edit_wid,edit_hei,0,0 ) );
base.addView(exview);

pbase.setLayoutParams( new AbsoluteLayout.LayoutParams( screen_width, 2048,0,0 ) );
AbsoluteLayout p = new AbsoluteLayout(ACTIVITY);
p.addView( pbase );
pyview = new ScrollView(ACTIVITY);
pyview.addView(p);
pxview = new HorizontalScrollView(ACTIVITY);
pxview.addView(pyview);
pxview.setLayoutParams( new AbsoluteLayout.LayoutParams( prop_wid,prop_hei,edit_wid,0 ) );
base.addView(pxview);

}


// 背景色を設定
public void setBackground( int r, int g, int b ){
  back_r = r;
  back_g = g;
  back_b = b;
  ebase.setBackgroundColor( Color.rgb( back_r, back_g, back_b ) );
}


// 再描画する
public void invalidate(){
  base.invalidate();
}

// 表示する
public void show(){
  last_view = present_view;
  ACTIVITY.setContentView( present_view = base );
  member = new Vector();
  id = 0;
  etitle.setText(&quot;NoTitle&quot;);
  escale.setText(&quot;1&quot;);
  ebase.setBackgroundColor( Color.rgb( 255, 255, 255 ) );
}

// 隠す
public void hide(){
  clear();
  ACTIVITY.setContentView( present_view = last_view );
}

// クリア
public void clear(){
  for( int i = member.size()-1; i &gt;= 0; i-- ){
    ((xview)member.get(i)).suicide();
  }
}

}
</codetext>
</codeclip>
<codeclip>
<ID>_C1</ID>
<x0>21</x0>
<y0>68</y0>
<width>224</width>
<height>35</height>
<codetext>    // xlabel クラス
    class xlabel extends TextView implements xview{
      View me;
      int x0, y0, width, height;
      int ypos;
      String[] superclass = {
        &quot;JLabel&quot;,
        &quot;JLabel&quot;,
        &quot;ELabel&quot;,
        &quot;ELabel&quot;,
        &quot;TextView&quot;,
        &quot;Label&quot;,
        &quot;Label&quot;,
        &quot;Label&quot;,
        &quot;Label&quot;,
        &quot;Label&quot;,
        &quot;Label&quot;,
        &quot;Label&quot;,
        &quot;Label&quot;,
        &quot;Label&quot;,
        &quot;Label&quot;,
        &quot;Label&quot;
      };

      AbsoluteLayout pbase;
      TextView Lname;         EditText ename;         String  name;
      TextView Ltext;         EditText etext;         String  text;
      TextView Lforecolor;    Button   bforecolor;    int     fr, fg, fb;
      TextView Lbackcolor;    Button   bbackcolor;    int     br, bg, bb;
      TextView Lfont;         EditText efont;         String  font; // 無効(環境間の互換性に問題あり)
      TextView Lfontsize;     EditText efontsize;     int     fontsize;
      TextView Lhalign;       Button   brt,bch,blt;   int     halign;
      TextView Lvalign;       Button   bup,bcv,bdw;   int     valign;
      TextView Lseethrough;   CheckBox cseethrough;   boolean seethrough;
      TextView Lcreate_pin;   CheckBox ccreate_pin;   boolean create_pin;
      TextView Lpaint_pin;    CheckBox cpaint_pin;    boolean paint_pin;
      TextView Lsuperclass;   EditText esuperclass;


      // 新規作成
      xlabel( String nam, String txt, int x, int y ){
        super(ACTIVITY);

dprint(&quot;new xlabel\n&quot;);

        x0         = x;
        y0         = y;
        width      = default_width;
        height     = default_height;
        name       = nam;
        text       = txt;
        fr = 0;   fg = 0;   fb = 0;
        br = 200; bg = 200; bb = 200;
        font       = &quot;***&quot;;
        fontsize   = 16;
        halign     = 1;
        valign     = 1;
        seethrough = false;
        create_pin = true;
        paint_pin  = true;
        init();
      }


      // Loginモードで生成(ファイルの情報をもとに生成)  
      xlabel( String str ){
        super(ACTIVITY);

dprint(&quot;new xlabel(s)\n&quot;);

        x0         = 0;
        y0         = 0;
        width      = default_width;
        height     = default_height;
        name       = &quot;no name&quot;;
        text       = &quot;&quot;;
        fr = 0;   fg = 0;   fb = 0;
        br = 200; bg = 200; bb = 200;
        font       = &quot;***&quot;;
        fontsize   = 16;
        halign     = 1;
        valign     = 1;
        seethrough = false;
        create_pin = true;
        paint_pin  = true;
        if( (  str.startsWith(&quot;LABEL&quot;) ) ){
          StringTokenizer fld = new StringTokenizer( str, &quot;;&quot; );
          String d = fld.nextToken();
          name = fld.nextToken();
          String s = fld.nextToken();
          if( s.equals(&quot;null&quot;)) text =&quot;&quot;; else text = s;
          x0 = parseInt(fld.nextToken());
          y0 = parseInt(fld.nextToken());
          width  = parseInt(fld.nextToken());
          height = parseInt(fld.nextToken());
          fr = parseInt(fld.nextToken());
          fg = parseInt(fld.nextToken());
          fb = parseInt(fld.nextToken());
          br = parseInt(fld.nextToken());
          bg = parseInt(fld.nextToken());
          bb = parseInt(fld.nextToken());
          font = fld.nextToken();
          fontsize = parseInt(fld.nextToken());
          String imagefile = fld.nextToken();
          halign = parseInt(fld.nextToken());
          valign = parseInt(fld.nextToken());
          if( fld.hasMoreTokens() ) seethrough  = (parseInt(fld.nextToken())==0);
          if( fld.hasMoreTokens() ) create_pin  = (parseInt(fld.nextToken())!=0);
          if( fld.hasMoreTokens() ) paint_pin   = (parseInt(fld.nextToken())!=0);
          if( fld.hasMoreTokens() ) superclass[ApplicationType] = fld.nextToken();
        }
        init();
      }


      // 初期化共通部  
      private void init(){

dprint(&quot;xlabel init\n&quot;);

        pbase = new AbsoluteLayout(ACTIVITY);
        me = this;
        setFocusable(true);
        setFocusableInTouchMode(true);
        ypos = 0;
        Lname = new TextView(ACTIVITY);
        Lname.setPadding(1, 1, 1, 1);
        Lname.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lname.setTextColor( Color.rgb( 0, 0, 0 ));
        Lname.setTextSize( FSIZE );
        Lname.setText(&quot;名前&quot;);
        Lname.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lname );

        ename = new EditText(ACTIVITY);
        ename.setPadding(1, 1, 1, 1);
        ename.setGravity(Gravity.LEFT|Gravity.CENTER);
        ename.setTextSize( FSIZE );
        ename.setTextColor( Color.rgb( 0, 0, 0 ));
        ename.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        ename.setText( name );
        ename.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        ename.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              name = get_text(ename);
              resize();
              ename.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( ename );
        ypos+=item_hei+3;

        Ltext = new TextView(ACTIVITY);
        Ltext.setPadding(1, 1, 1, 1);
        Ltext.setGravity(Gravity.LEFT|Gravity.CENTER);
        Ltext.setTextColor( Color.rgb( 0, 0, 0 ));
        Ltext.setTextSize( FSIZE );
        Ltext.setText(&quot;テキスト&quot;);
        Ltext.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Ltext );

        etext = new EditText(ACTIVITY);
        etext.setPadding(1, 1, 1, 1);
        etext.setGravity(Gravity.LEFT|Gravity.CENTER);
        etext.setTextSize( FSIZE );
        etext.setTextColor( Color.rgb( 0, 0, 0 ));
        etext.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        etext.setText( text );
        etext.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        etext.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              text = get_text(etext);
              resize();
              etext.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( etext );
        ypos+=item_hei+3;

        Lforecolor = new TextView(ACTIVITY);
        Lforecolor.setPadding(1, 1, 1, 1);
        Lforecolor.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lforecolor.setTextColor( Color.rgb( 0, 0, 0 ));
        Lforecolor.setTextSize( FSIZE );
        Lforecolor.setText(&quot;色&quot;);
        Lforecolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lforecolor );

        bforecolor = new Button(ACTIVITY);
        bforecolor.setPadding(1, 1, 1, 1);
        bforecolor.setGravity(Gravity.CENTER|Gravity.CENTER);
        bforecolor.setTextSize( FSIZE );
        bforecolor.setTextColor( Color.rgb( 0, 0, 0 ));
        bforecolor.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        bforecolor.setText( &quot;変える&quot; );
        bforecolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        bforecolor.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ xhandler(me,&quot;forecolor&quot;);}
        });
        pbase.addView( bforecolor );
        ypos+=item_hei+3;

        Lbackcolor = new TextView(ACTIVITY);
        Lbackcolor.setPadding(1, 1, 1, 1);
        Lbackcolor.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lbackcolor.setTextColor( Color.rgb( 0, 0, 0 ));
        Lbackcolor.setTextSize( FSIZE );
        Lbackcolor.setText(&quot;背景の色&quot;);
        Lbackcolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lbackcolor );

        bbackcolor = new Button(ACTIVITY);
        bbackcolor.setPadding(1, 1, 1, 1);
        bbackcolor.setGravity(Gravity.CENTER|Gravity.CENTER);
        bbackcolor.setTextSize( FSIZE );
        bbackcolor.setTextColor( Color.rgb( 0, 0, 0 ) );
        bbackcolor.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        bbackcolor.setText( &quot;変える&quot; );
        bbackcolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        bbackcolor.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ xhandler(me,&quot;backcolor&quot;);}
        });
        pbase.addView( bbackcolor );
        ypos+=item_hei+3;

        Lfont = new TextView(ACTIVITY);
        Lfont.setPadding(1, 1, 1, 1);
        Lfont.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lfont.setTextColor( Color.rgb( 0, 0, 0 ));
        Lfont.setTextSize( FSIZE );
        Lfont.setText(&quot;フォント&quot;);
        Lfont.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lfont );

        efont = new EditText(ACTIVITY);
        efont.setPadding(1, 1, 1, 1);
        efont.setGravity(Gravity.LEFT|Gravity.CENTER);
        efont.setTextSize( FSIZE );
        efont.setTextColor( Color.rgb( 0, 0, 0 ));
        efont.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        efont.setText( &quot;&quot;+font );
        efont.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        efont.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              font = get_text(efont);
              resize();
              efont.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( efont );
        ypos+=item_hei+3;

        Lfontsize = new TextView(ACTIVITY);
        Lfontsize.setPadding(1, 1, 1, 1);
        Lfontsize.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lfontsize.setTextColor( Color.rgb( 0, 0, 0 ));
        Lfontsize.setTextSize( FSIZE );
        Lfontsize.setText(&quot;文字のサイズ&quot;);
        Lfontsize.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lfontsize );

        efontsize = new EditText(ACTIVITY);
        efontsize.setPadding(1, 1, 1, 1);
        efontsize.setGravity(Gravity.LEFT|Gravity.CENTER);
        efontsize.setTextSize( FSIZE );
        efontsize.setTextColor( Color.rgb( 0, 0, 0 ));
        efontsize.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        efontsize.setText( &quot;&quot;+fontsize );
        efontsize.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        efontsize.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              fontsize = parseInt( get_text(efontsize) );
              resize();
              efontsize.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( efontsize );
        ypos+=item_hei+3;

        Lhalign = new TextView(ACTIVITY);
        Lhalign.setPadding(1, 1, 1, 1);
        Lhalign.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lhalign.setTextColor( Color.rgb( 0, 0, 0 ));
        Lhalign.setTextSize( FSIZE );
        Lhalign.setText(&quot;横方向の揃え位置&quot;);
        Lhalign.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lhalign );

        blt = new Button(ACTIVITY);
        blt.setPadding(1, 1, 1, 1);
        blt.setGravity(Gravity.CENTER|Gravity.CENTER);
        blt.setTextSize( FSIZE );
        blt.setTextColor( Color.rgb( 0, 0, 0 ));
        blt.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        blt.setText( &quot;左&quot; );
        blt.setLayoutParams( new AbsoluteLayout.LayoutParams( item_hei,item_hei,item_wid,ypos ) );
        blt.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){
            halign = 0;
            resize();
          }
        });
        pbase.addView( blt );
        bch = new Button(ACTIVITY);
        bch.setPadding(1, 1, 1, 1);
        bch.setGravity(Gravity.CENTER|Gravity.CENTER);
        bch.setTextSize( FSIZE );
        bch.setTextColor( Color.rgb( 0, 0, 0 ));
        bch.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        bch.setText( &quot;中&quot; );
        bch.setLayoutParams( new AbsoluteLayout.LayoutParams( item_hei,item_hei,item_wid * 4 / 3,ypos ) );
        bch.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){
            halign = 1;
            resize();
          }
        });
        pbase.addView( bch );
        brt = new Button(ACTIVITY);
        brt.setPadding(1, 1, 1, 1);
        brt.setGravity(Gravity.CENTER|Gravity.CENTER);
        brt.setTextSize( FSIZE );
        brt.setTextColor( Color.rgb( 0, 0, 0 ));
        brt.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        brt.setText( &quot;右&quot; );
        brt.setLayoutParams( new AbsoluteLayout.LayoutParams( item_hei,item_hei,item_wid * 5 / 3,ypos ) );
        brt.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){
            halign = 2;
            resize();
          }
        });
        pbase.addView( brt );
        ypos+=item_hei+3;

        Lvalign = new TextView(ACTIVITY);
        Lvalign.setPadding(1, 1, 1, 1);
        Lvalign.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lvalign.setTextColor( Color.rgb( 0, 0, 0 ));
        Lvalign.setTextSize( FSIZE );
        Lvalign.setText(&quot;縦方向の揃え位置&quot;);
        Lvalign.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lvalign );

        bup = new Button(ACTIVITY);
        bup.setPadding(1, 1, 1, 1);
        bup.setGravity(Gravity.CENTER|Gravity.CENTER);
        bup.setTextSize( FSIZE );
        bup.setTextColor( Color.rgb( 0, 0, 0 ));
        bup.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        bup.setText( &quot;上&quot; );
        bup.setLayoutParams( new AbsoluteLayout.LayoutParams( item_hei,item_hei,item_wid,ypos ) );
        bup.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){
            valign = 0;
            resize();
          }
        });
        pbase.addView( bup );
        bcv = new Button(ACTIVITY);
        bcv.setPadding(1, 1, 1, 1);
        bcv.setGravity(Gravity.CENTER|Gravity.CENTER);
        bcv.setTextSize( FSIZE );
        bcv.setTextColor( Color.rgb( 0, 0, 0 ));
        bcv.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        bcv.setText( &quot;中&quot; );
        bcv.setLayoutParams( new AbsoluteLayout.LayoutParams( item_hei,item_hei,item_wid * 4 / 3,ypos ) );
        bcv.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){
            valign = 1;
            resize();
          }
        });
        pbase.addView( bcv );
        bdw = new Button(ACTIVITY);
        bdw.setPadding(1, 1, 1, 1);
        bdw.setGravity(Gravity.CENTER|Gravity.CENTER);
        bdw.setTextSize( FSIZE );
        bdw.setTextColor( Color.rgb( 0, 0, 0 ));
        bdw.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        bdw.setText( &quot;下&quot; );
        bdw.setLayoutParams( new AbsoluteLayout.LayoutParams( item_hei,item_hei,item_wid * 5 / 3,ypos ) );
        bdw.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){
            valign = 2;
            resize();
          }
        });
        pbase.addView( bdw );
        ypos+=item_hei+3;

        Lseethrough = new TextView(ACTIVITY);
        Lseethrough.setPadding(1, 1, 1, 1);
        Lseethrough.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lseethrough.setTextColor( Color.rgb( 0, 0, 0 ));
        Lseethrough.setTextSize( FSIZE );
        Lseethrough.setText(&quot;透明コンポーネント&quot;);
        Lseethrough.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lseethrough );

        cseethrough = new CheckBox(ACTIVITY);
        cseethrough.setPadding(1, 1, 1, 1);
        cseethrough.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        cseethrough.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        cseethrough.setChecked( seethrough );
        pbase.addView( cseethrough );
        ypos+=item_hei+3;

        Lcreate_pin = new TextView(ACTIVITY);
        Lcreate_pin.setPadding(1, 1, 1, 1);
        Lcreate_pin.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lcreate_pin.setTextColor( Color.rgb( 0, 0, 0 ));
        Lcreate_pin.setTextSize( FSIZE );
        Lcreate_pin.setText(&quot;createdピンを表示&quot;);
        Lcreate_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lcreate_pin );

        ccreate_pin = new CheckBox(ACTIVITY);
        ccreate_pin.setPadding(1, 1, 1, 1);
        ccreate_pin.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        ccreate_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        ccreate_pin.setChecked( create_pin );
        pbase.addView( ccreate_pin );
        ypos+=item_hei+3;

        Lpaint_pin = new TextView(ACTIVITY);
        Lpaint_pin.setPadding(1, 1, 1, 1);
        Lpaint_pin.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lpaint_pin.setTextColor( Color.rgb( 0, 0, 0 ));
        Lpaint_pin.setTextSize( FSIZE );
        Lpaint_pin.setText(&quot;paintピンを表示&quot;);
        Lpaint_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lpaint_pin );

        cpaint_pin = new CheckBox(ACTIVITY);
        cpaint_pin.setPadding(1, 1, 1, 1);
        cpaint_pin.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        cpaint_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        cpaint_pin.setChecked( paint_pin );
        pbase.addView( cpaint_pin );
        ypos+=item_hei+3;

        Lsuperclass = new TextView(ACTIVITY);
        Lsuperclass.setPadding(1, 1, 1, 1);
        Lsuperclass.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lsuperclass.setTextColor( Color.rgb( 0, 0, 0 ));
        Lsuperclass.setTextSize( FSIZE );
        Lsuperclass.setText(&quot;スーパークラス&quot;);
        Lsuperclass.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lsuperclass );

        esuperclass = new EditText(ACTIVITY);
        esuperclass.setPadding(1, 1, 1, 1);
        esuperclass.setGravity(Gravity.LEFT|Gravity.CENTER);
        esuperclass.setTextSize( FSIZE );
        esuperclass.setTextColor( Color.rgb( 0, 0, 0 ));
        esuperclass.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        esuperclass.setText( superclass[ApplicationType] );
        esuperclass.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        esuperclass.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              superclass[ApplicationType] = get_text(esuperclass);
              resize();
              esuperclass.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( esuperclass );
        ypos+=item_hei+3;

        me.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              me.requestFocus();
              xhandler(me,&quot;touch&quot;);
            }
            return true;
          }
        });
        me.setOnKeyListener( new View.OnKeyListener(){
          @Override
          public boolean onKey(View v, int keyCode, KeyEvent event) {
            if (event.getAction() == KeyEvent.ACTION_DOWN) {
              key_code = keyCode;
              xhandler(me,&quot;keyinput&quot;);
            }
            return true;
          }
        });
        pbase.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid * 2+10, ypos+180, 0, vpos ) );
        resize();
      }

      // サイズ調整する
      public void resize(){

dprint(&quot;xlabel resize\n&quot;);

        setPadding(1, 1, 1, 1);
        int g = 0;
        switch( halign ){
          case 0: g = g | Gravity.LEFT  ; break;
          case 1: g = g | Gravity.CENTER; break;
          case 2: g = g | Gravity.RIGHT ; break;
        }
        switch( valign ){
          case 0: g = g | Gravity.TOP   ; break;
          case 1: g = g | Gravity.CENTER; break;
          case 2: g = g | Gravity.BOTTOM; break;
        }
        setGravity(g);
        setTextSize( fontsize );
        setTextColor( Color.rgb( fr, fg, fb ));
        setBackgroundColor( Color.rgb( br, bg, bb ));
        setText( text );
        setLayoutParams( new AbsoluteLayout.LayoutParams( width, height, x0, y0 ) );
      }

      // 各パラメータをセットする
      public void set_params(){

dprint(&quot;xlabel set_prams\n&quot;);

        name = get_text(ename);
        text = get_text(etext);
        fontsize = parseInt( get_text(efontsize) );
        seethrough = cseethrough.isChecked();
        create_pin = ccreate_pin.isChecked();
        paint_pin  = cpaint_pin.isChecked();
        superclass[ApplicationType] = get_text(esuperclass);
      }

      // 各パラメータを返す
      public String get_params(){

dprint(&quot;xlabel get_prams\n&quot;);

        return
          &quot;LABEL;&quot;  +
          name +&quot;;&quot; +
          text +&quot;;&quot; +
          x0 + &quot;;&quot; + y0 + &quot;;&quot; + width + &quot;;&quot; + height + &quot;;&quot; +
          fr + &quot;;&quot; + fg + &quot;;&quot; + fb + &quot;;&quot; +
          br + &quot;;&quot; + bg + &quot;;&quot; + bb + &quot;;&quot; +
          font + &quot;;&quot; + fontsize + &quot;;&quot; + 
          &quot;null;&quot; +  // ダミー
          halign + &quot;;&quot; + valign + &quot;;&quot; +
          (seethrough? 0:1) +&quot;;&quot;+
          (create_pin? 1:0) +&quot;;&quot;+
          (paint_pin?  1:0) +&quot;;&quot;+
          superclass[ApplicationType]  + &quot;;&quot;
        ;
      }

      // 自分を追加する
      public void join(){

dprint(&quot;xlabel join\n&quot;);

        designer.ebase.addView( me );
        designer.pbase.addView( pbase );
        designer.member.add(me);
        show_property();
      }

      // 自分を消去する
      public void suicide(){

dprint(&quot;xlabel suicide\n&quot;);

        designer.ebase.removeView( me );
        if( pbase == present_property ) present_property = null;
        designer.pbase.removeView( pbase );
        designer.member.remove(me);
      }

      // プロパティを表示する
      public void show_property(){

dprint(&quot;xlabel show property\n&quot;);

        if(present_property != null ) present_property.setVisibility(View.GONE);
        present_property = pbase;
        pbase.setVisibility(View.VISIBLE);
      }

      // X方向の位置を返す
      public int get_x(){
        return x0;
      }

      // Y方向の位置を返す
      public int get_y(){
        return y0;
      }

      // 幅を返す
      public int get_width(){
        return width;
      }

      // 高さを返す
      public int get_height(){
        return height;
      }

      // 位置・大きさを設定する
      public void setBounds( int x, int y, int wid, int hei ){

dprint(&quot;xlabel setBounds\n&quot;);

        x0 = x;
        y0 = y;
        width = wid;
        height = hei;
        setLayoutParams( new AbsoluteLayout.LayoutParams( width, height, x0, y0 ) );
      }

      // 背景色を設定
      public void setBackground( int r, int g, int b ){
        br = r;
        bg = g;
        bb = b;
        setBackgroundColor( Color.rgb( br, bg, bb ) );
      }


      // 色を設定
      public void setForeground( int r, int g, int b ){
        fr = r;
        fg = g;
        fb = b;
        setTextColor( Color.rgb( fr, fg, fb ) );
      }

    }//~xlabel
</codetext>
</codeclip>
<pin>
<ID>_P2</ID>
<x0>371</x0>
<y0>27</y0>
<width>60</width>
<height>30</height>
<text>start()</text>
<px>2</px>
<py>35</py>
</pin>
<operation>
<ID>_O3</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>469</x0>
<y0>11</y0>
<width>164</width>
<height>52</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>33</inpiny0>
<inpinwidth>40</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// GUIデザイナを初期化


designer = new GUIDesigner_UI();
creater = new ColorCreater();
</codetext>
</operation>
<relation>
<ID>_R4</ID>
<pin1name>_P2</pin1name>
<pin2name>_O3</pin2name>
</relation>
<codeclip>
<ID>_C6</ID>
<x0>18</x0>
<y0>458</y0>
<width>197</width>
<height>47</height>
<codetext>// 色合成クラス
ColorCreater creater;
class ColorCreater{
  int r = 200, g = 200, b = 200; 

         AbsoluteLayout base;
    Button     bok;    Button  bcan;
    TextView   Lred;   SeekBar rbar;
    TextView   Lgreen; SeekBar gbar;  TextView disp;
    TextView   Lblue;  SeekBar bbar;

int bok_x  = 0,                bok_y  = 0, bok_wid  = screen_width/3, bok_hei  = 80;
int bcan_x = screen_width/3+8, bcan_y = 0, bcan_wid = screen_width/3, bcan_hei = 80;
int Lred_x   = 0, Lred_y   = 83,  Lred_wid   = 80, Lred_hei   = 80;
int Lgreen_x = 0, Lgreen_y = 166, Lgreen_wid = 80, Lgreen_hei = 80;
int Lblue_x  = 0, Lblue_y  = 249, Lblue_wid  = 80, Lblue_hei  = 80;
int rbar_x = 88, rbar_y = 83, rbar_wid = screen_width / 2, rbar_hei = 80;
int gbar_x = 88, gbar_y = 166,gbar_wid = screen_width / 2, gbar_hei = 80;
int bbar_x = 88, bbar_y = 249,bbar_wid = screen_width / 2, bbar_hei = 80;
int disp_x = 88 + screen_width /2 + 8, disp_y = 83, disp_wid = screen_width / 8, disp_hei = 246;

//色合成
ColorCreater(){

dprint(&quot;color creater\n&quot;);

int vpos = 0;

dprint(&quot;base\n&quot;);

base = new AbsoluteLayout(ACTIVITY);
base.setBackgroundColor(Color.rgb( 255, 255, 255));

dprint(&quot;bok\n&quot;);

bok = new Button(ACTIVITY);
bok.setPadding(1, 1, 1, 1);
bok.setGravity(Gravity.CENTER|Gravity.CENTER);
bok.setText(&quot;OK&quot;);
bok.setTextColor( Color.rgb( 0, 0, 0 ));
bok.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bok.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     ACTIVITY.setContentView(designer.base);
     xhandler(null, &quot;color:ok&quot;);
   }
});
bok.setLayoutParams( new AbsoluteLayout.LayoutParams( bok_wid,bok_hei,bok_x,bok_y ) );
base.addView( bok );

dprint(&quot;bacan\n&quot;);

bcan = new Button(ACTIVITY);
bcan.setPadding(1, 1, 1, 1);
bcan.setGravity(Gravity.CENTER|Gravity.CENTER);
bcan.setText(&quot;CANCEL&quot;);
bcan.setTextColor( Color.rgb( 0, 0, 0 ));
bcan.setBackgroundColor( Color.rgb( 200, 200, 200 ));
bcan.setOnClickListener( new View.OnClickListener(){
   @Override
   public void onClick(View v){
     ACTIVITY.setContentView(designer.base);
     xhandler(null, &quot;color:cancel&quot;);
   }
});
bcan.setLayoutParams( new AbsoluteLayout.LayoutParams( bcan_wid,bcan_hei,bcan_x,bcan_y ) );
base.addView( bcan );


dprint(&quot;Lred\n&quot;);

Lred = new TextView(ACTIVITY);
Lred.setBackgroundColor(Color.rgb( 255, 0, 0 ));
Lred.setLayoutParams( new AbsoluteLayout.LayoutParams( Lred_wid,Lred_hei,Lred_x,Lred_y ) );
base.addView( Lred );

dprint(&quot;Lgreen\n&quot;);

Lgreen = new TextView(ACTIVITY);
Lgreen.setBackgroundColor(Color.rgb( 0, 255, 0 ));
Lgreen.setLayoutParams( new AbsoluteLayout.LayoutParams( Lgreen_wid,Lgreen_hei,Lgreen_x,Lgreen_y ) );
base.addView( Lgreen );

dprint(&quot;Lblue\n&quot;);

Lblue = new TextView(ACTIVITY);
Lblue.setBackgroundColor(Color.rgb( 0, 0, 255 ));
Lblue.setLayoutParams( new AbsoluteLayout.LayoutParams( Lblue_wid,Lblue_hei,Lblue_x,Lblue_y ) );
base.addView( Lblue );

dprint(&quot;rbar\n&quot;);

rbar = new SeekBar(ACTIVITY);
rbar.setBackgroundColor( Color.rgb( 238, 238, 238 ));
rbar.setLayoutParams( new AbsoluteLayout.LayoutParams( rbar_wid,rbar_hei,rbar_x,rbar_y ) );
rbar.setMax( 255 );
rbar.setProgress( 0 );
rbar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
  public void onStopTrackingTouch(SeekBar seekBar) {}
  public void onStartTrackingTouch(SeekBar seekBar) {}
  public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser){
    r = progress;
    disp.setBackgroundColor(Color.rgb( r, g, b ));
  }
});
base.addView( rbar );

dprint(&quot;gbr\n&quot;);

gbar = new SeekBar(ACTIVITY);
gbar.setBackgroundColor( Color.rgb( 238, 238, 238 ));
gbar.setLayoutParams( new AbsoluteLayout.LayoutParams( gbar_wid,gbar_hei,gbar_x,gbar_y ) );
gbar.setMax( 255 );
gbar.setProgress( 0 );
gbar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
  public void onStopTrackingTouch(SeekBar seekBar) {}
  public void onStartTrackingTouch(SeekBar seekBar) {}
  public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser){
    g = progress;
    disp.setBackgroundColor(Color.rgb( r, g, b ));
  }
});
base.addView( gbar );

dprint(&quot;bbr\n&quot;);

bbar = new SeekBar(ACTIVITY);
bbar.setBackgroundColor( Color.rgb( 238, 238, 238 ));
bbar.setLayoutParams( new AbsoluteLayout.LayoutParams( bbar_wid,bbar_hei,bbar_x,bbar_y ) );
bbar.setMax( 255 );
bbar.setProgress( 0 );
bbar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
  public void onStopTrackingTouch(SeekBar seekBar) {}
  public void onStartTrackingTouch(SeekBar seekBar) {}
  public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser){
    b = progress;
    disp.setBackgroundColor(Color.rgb( r, g, b ));
  }
});
base.addView( bbar );

dprint(&quot;disp\n&quot;);

disp = new TextView(ACTIVITY);
disp.setBackgroundColor(Color.rgb( 0, 0, 0 ));
disp.setLayoutParams( new AbsoluteLayout.LayoutParams( disp_wid,disp_hei,disp_x,disp_y ) );
base.addView( disp );

dprint(&quot;end init color creater\n&quot;);

}

// テキストをセットして表示する
public void show(){

dprint(&quot;color creater show\n&quot;);

  ACTIVITY.setContentView(base);
  rbar.setProgress( r = 255 );
  gbar.setProgress( g = 255 );
  bbar.setProgress( b = 255 );
}



}
</codetext>
</codeclip>
<codeclip>
<ID>_C9</ID>
<x0>20</x0>
<y0>523</y0>
<width>343</width>
<height>69</height>
<codetext>//       ********    メイン処理    **********
xview target; String hmode = &quot;&quot;;
int key_code, touch_x, touch_y;
public void xhandler( View view, String command ){

dprint(&quot;xhandler command = \&quot;&quot;+command+&quot;\&quot;,mode=\&quot;&quot;+hmode+&quot;\&quot;,view=&quot;+view+&quot;,keycode=&quot;+key_code+&quot;\n&quot;);

      if(command.equals(&quot;open&quot;)){
        fileselector.show( &quot;guidesigner:open&quot;, CurrentDir );
        hmode = &quot;&quot;;
      }
      else if(command.equals(&quot;save&quot;)){
        save();
        hmode = &quot;&quot;;
      }
      else if(command.equals(&quot;compile&quot;)){

dprint(&quot;compile:application type=&quot;+ApplicationType+&quot;\n&quot;);

        compile();
        hmode = command;
      }
      else if(command.equals(&quot;delete&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;exit&quot;)){
        designer.hide();
        handler( null, callback_str );
        hmode = &quot;&quot;;
      }
      else if(command.equals(&quot;create label&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;create button&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;create textarea&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;create textfield&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;create hslider&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;create vslider&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;create checkbox&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;create list&quot;)){
        hmode = command;
      }
      else if(command.equals(&quot;backcolor&quot;)){
        target = (xview)view;
        hmode = command;
        creater.show();
      }
      else if(command.equals(&quot;forecolor&quot;)){
        target = (xview)view;
        hmode = command;
        creater.show();
      }
      else if(command.equals(&quot;color:ok&quot;)){
        if(hmode.equals(&quot;backcolor&quot;)){
          if( target == null ){
            designer.setBackground( creater.r, creater.g, creater.b );
          }
          else{
            target.setBackground( creater.r, creater.g, creater.b );
          }
        }
        else if(hmode.equals(&quot;forecolor&quot;)){
          target.setForeground( creater.r, creater.g, creater.b );
        }
        hmode = &quot;&quot;;
      }
      else if(command.equals(&quot;color:cancel&quot;)){
          hmode = &quot;&quot;;
      }
      else if(command.equals(&quot;touch&quot;)){
        int[] loc = new int[2];
        designer.ebase.getLocationOnScreen( loc );
        int x = touch_x - loc[0];
        int y = touch_y - loc[1];

        if(hmode.equals(&quot;&quot;)){
          if( view != null ){
            target = (xview)view;
            target.show_property();
            if( x - target.get_x() &gt; target.get_width()  - CORNER_RANGE &amp;&amp;
                y - target.get_y() &gt; target.get_height() - CORNER_RANGE )
                 hmode = &quot;resize&quot;;
            else hmode = &quot;move&quot;;
	      }
	    }
        else if(hmode.equals(&quot;delete&quot;)){
          ((xview)view).suicide();
          hmode = &quot;&quot;;
        }
        else if(hmode.equals(&quot;create label&quot;)){
          hmode = &quot;&quot;;
          xlabel v = new xlabel( &quot;LABEL&quot;+designer.id++, &quot;LABEL&quot;, x, y );
          v.join();
          hmode = &quot;&quot;;
        }
        else if(hmode.equals(&quot;create button&quot;)){
          xview v = new xbutton( &quot;BUTTON&quot;+designer.id++, &quot;BUTTON&quot;, x, y );
          v.join();
          hmode = &quot;&quot;;
        }
        else if(hmode.equals(&quot;create textarea&quot;)){
          xview v = new xtextarea( &quot;TEXTAREA&quot;+designer.id++, &quot;TEXT&quot;, x, y );
          v.join();
          hmode = &quot;&quot;;
        }
        else if(hmode.equals(&quot;create textfield&quot;)){
          xview v = new xtextfield( &quot;TEXTFIELD&quot;+designer.id++, &quot;TEXT&quot;, x, y );
          v.join();
          hmode = &quot;&quot;;
        }
        else if(hmode.equals(&quot;create hslider&quot;)){
          xview v = new xhslider( &quot;HSLIDER&quot;+designer.id++, x, y );
          v.join();
          hmode = &quot;&quot;;
        }
        else if(hmode.equals(&quot;create vslider&quot;)){
          xview v = new xvslider( &quot;VSLIDER&quot;+designer.id++, x, y );
          v.join();
          hmode = &quot;&quot;;
        }
        else if(hmode.equals(&quot;create checkbox&quot;)){
          xview v = new xcheckbox( &quot;CHECKBOX&quot;+designer.id++, x, y );
          v.join();
          hmode = &quot;&quot;;
        }
        else if(hmode.equals(&quot;create list&quot;)){
          xview v = new xlist( &quot;LIST&quot;+designer.id++, x, y );
          v.join();
          hmode = &quot;&quot;;
        }
        else if(hmode.equals(&quot;move&quot;)){
          target.setBounds( x, y, target.get_width(), target.get_height() );
          hmode = &quot;&quot;;
        }
        else if(hmode.equals(&quot;resize&quot;)){
          int w = x - target.get_x();
          if( w &lt; MIN_SIZE ) w = MIN_SIZE;
          int h = y - target.get_y();
          if( h &lt; MIN_SIZE ) w = MIN_SIZE;
          target.setBounds( target.get_x(), target.get_y(), w, h );
          hmode = &quot;&quot;;
        }
      }
      else if(command.equals(&quot;keyinput&quot;)){
        switch( key_code ){
        case LEFT_KEY:
          if(hmode.equals(&quot;move&quot;)){
            int x = target.get_x() - 1;
            if( x &lt; 0 ) x = 0;
            target.setBounds( x, target.get_y(), target.get_width(), target.get_height() );
          }
          else if(hmode.equals(&quot;resize&quot;)){
            int w = target.get_width() - 1;
            if( w &lt; MIN_SIZE ) w = MIN_SIZE;
            target.setBounds( target.get_x(), target.get_y(), w, target.get_height() );
          }
          break;
        case RIGHT_KEY:
          if(hmode.equals(&quot;move&quot;)){
            int x = target.get_x() + 1;
            target.setBounds( x, target.get_y(), target.get_width(), target.get_height() );
          }
          else if(hmode.equals(&quot;resize&quot;)){
            int w = target.get_width() + 1;
            target.setBounds( target.get_x(), target.get_y(), w, target.get_height() );
          }
          break;
        case UP_KEY:

dprint(&quot;up key assert\n&quot;);

          if(hmode.equals(&quot;move&quot;)){
            int y = target.get_y() - 1;
            if( y &lt; 0 ) y = 0;
            target.setBounds( target.get_x(), y, target.get_width(), target.get_height() );
          }
          else if(hmode.equals(&quot;resize&quot;)){
            int h = target.get_height() - 1;
            if( h &lt; MIN_SIZE ) h = MIN_SIZE;
            target.setBounds( target.get_x(), target.get_y(), target.get_width(), h );
          }
          break;
        case DOWN_KEY:
          if(hmode.equals(&quot;move&quot;)){
            int y = target.get_y() + 1;
            target.setBounds( target.get_x(), y, target.get_width(), target.get_height() );
          }
          else if(hmode.equals(&quot;resize&quot;)){
            int h = target.get_height() + 1;
            target.setBounds( target.get_x(), target.get_y(), target.get_width(), h );
          }
          break;
        default:
          hmode = &quot;&quot;;
          break;
        }
      }
}
</codetext>
</codeclip>
<codeclip>
<ID>_C10</ID>
<x0>669</x0>
<y0>34</y0>
<width>306</width>
<height>548</height>
<codetext>// コールバック用リターン文字列
String callback_str = &quot;&quot;;

// 貼り付けるコンポーネントの大きさ
int default_width = 160, default_height = 80;

// プロパティコンテナの貼り付け位置
int hpos = 0, vpos = 0;

// エディタ部の幅・高さ
int edit_wid  = screen_width / 2;
int edit_hei  = screen_height -200;

// プロパティ部の幅・高さ
int prop_wid  = edit_wid-140;
int prop_hei  = edit_hei;

// プロパティタイトルの幅
int title_wid = prop_wid;

// プロパティ項目の幅・高さ
int item_wid  = title_wid / 2;
int item_hei  = 60;

// 操作ボタンの幅
int cnt_btn_wid  = 130;

//　GUI部品ボタンの幅・位置
int gui_btn_wid  = 80;
int gui_btn_tab   = 0;

// 現在表示されているプロパティ
View present_property = null;

// 直前に表示されていたView
View last_view;
</codetext>
</codeclip>
<codeclip>
<ID>_C16</ID>
<x0>22</x0>
<y0>114</y0>
<width>224</width>
<height>35</height>
<codetext>    // xbutton クラス
    class xbutton extends Button implements xview{
      View me;
      int x0, y0, width, height;
      int ypos;
      String[] superclass = {
        &quot;JButton&quot;,
        &quot;JButton&quot;,
        &quot;EButton&quot;,
        &quot;EButton&quot;,
        &quot;Button&quot;,
        &quot;Button&quot;,
        &quot;Button&quot;,
        &quot;Button&quot;,
        &quot;Button&quot;,
        &quot;Button&quot;,
        &quot;Button&quot;,
        &quot;Button&quot;,
        &quot;Button&quot;,
        &quot;Button&quot;,
        &quot;Button&quot;,
        &quot;Button&quot;
      };

      AbsoluteLayout pbase;
      TextView Lname;         EditText ename;         String  name;
      TextView Ltext;         EditText etext;         String  text;
      TextView Lforecolor;    Button   bforecolor;    int     fr, fg, fb;
      TextView Lbackcolor;    Button   bbackcolor;    int     br, bg, bb;
      TextView Lfont;         EditText efont;         String  font; // 無効(環境間の互換性に問題あり)
      TextView Lfontsize;     EditText efontsize;     int     fontsize;
      TextView Lhalign;       Button   brt,bch,blt;   int     halign;
      TextView Lvalign;       Button   bup,bcv,bdw;   int     valign;
      TextView Lseethrough;   CheckBox cseethrough;   boolean seethrough;
      TextView Lcreate_pin;   CheckBox ccreate_pin;   boolean create_pin;
      TextView Lclick_pin;    CheckBox cclick_pin;    boolean click_pin;
      TextView Lsuperclass;   EditText esuperclass;


      // 新規作成
      xbutton( String nam, String txt, int x, int y ){
        super(ACTIVITY);

dprint(&quot;new xbutton\n&quot;);

        x0         = x;
        y0         = y;
        width      = default_width;
        height     = default_height;
        name       = nam;
        text       = txt;
        fr = 0;   fg = 0;   fb = 0;
        br = 200; bg = 200; bb = 200;
        font       = &quot;***&quot;;
        fontsize   = 16;
        halign     = 1;
        valign     = 1;
        seethrough = false;
        create_pin = true;
        click_pin  = true;
        init();
      }


      // Loginモードで生成(ファイルの情報をもとに生成)  
      xbutton( String str ){
        super(ACTIVITY);

dprint(&quot;new xbutton(s)\n&quot;);

        x0         = 0;
        y0         = 0;
        width      = 107;
        height     = 50;
        name       = &quot;no name&quot;;
        text       = &quot;&quot;;
        fr = 0;   fg = 0;   fb = 0;
        br = 200; bg = 200; bb = 200;
        font       = &quot;***&quot;;
        fontsize   = 16;
        halign     = 1;
        valign     = 1;
        seethrough = false;
        create_pin = true;
        click_pin  = true;
        if( (  str.startsWith(&quot;BUTTON&quot;) ) ){
          StringTokenizer fld = new StringTokenizer( str, &quot;;&quot; );
          String d = fld.nextToken();
          name = fld.nextToken();
          String s = fld.nextToken();
          if( s.equals(&quot;null&quot;)) text =&quot;&quot;; else text = s;
          x0 = parseInt(fld.nextToken());
          y0 = parseInt(fld.nextToken());
          width  = parseInt(fld.nextToken());
          height = parseInt(fld.nextToken());
          fr = parseInt(fld.nextToken());
          fg = parseInt(fld.nextToken());
          fb = parseInt(fld.nextToken());
          br = parseInt(fld.nextToken());
          bg = parseInt(fld.nextToken());
          bb = parseInt(fld.nextToken());
          font = fld.nextToken();
          fontsize = parseInt(fld.nextToken());
          String imagefile = fld.nextToken();
          halign = parseInt(fld.nextToken());
          valign = parseInt(fld.nextToken());
          if( fld.hasMoreTokens() ) seethrough  = (parseInt(fld.nextToken())==0);
          if( fld.hasMoreTokens() ) create_pin  = (parseInt(fld.nextToken())!=0);
          if( fld.hasMoreTokens() ) click_pin   = (parseInt(fld.nextToken())!=0);
          if( fld.hasMoreTokens() ) superclass[ApplicationType] = fld.nextToken();
        }
        init();
      }


      // 初期化共通部  
      private void init(){

dprint(&quot;xbutton init\n&quot;);

        pbase = new AbsoluteLayout(ACTIVITY);
        me = this;
        setFocusable(true);
        setFocusableInTouchMode(true);
        ypos = 0;
        Lname = new TextView(ACTIVITY);
        Lname.setPadding(1, 1, 1, 1);
        Lname.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lname.setTextColor( Color.rgb( 0, 0, 0 ));
        Lname.setTextSize( FSIZE );
        Lname.setText(&quot;名前&quot;);
        Lname.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lname );

        ename = new EditText(ACTIVITY);
        ename.setPadding(1, 1, 1, 1);
        ename.setGravity(Gravity.LEFT|Gravity.CENTER);
        ename.setTextSize( FSIZE );
        ename.setTextColor( Color.rgb( 0, 0, 0 ));
        ename.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        ename.setText( name );
        ename.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        ename.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              name = get_text(ename);
              resize();
              ename.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( ename );
        ypos+=item_hei+3;

        Ltext = new TextView(ACTIVITY);
        Ltext.setPadding(1, 1, 1, 1);
        Ltext.setGravity(Gravity.LEFT|Gravity.CENTER);
        Ltext.setTextColor( Color.rgb( 0, 0, 0 ));
        Ltext.setTextSize( FSIZE );
        Ltext.setText(&quot;テキスト&quot;);
        Ltext.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Ltext );

        etext = new EditText(ACTIVITY);
        etext.setPadding(1, 1, 1, 1);
        etext.setGravity(Gravity.LEFT|Gravity.CENTER);
        etext.setTextSize( FSIZE );
        etext.setTextColor( Color.rgb( 0, 0, 0 ));
        etext.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        etext.setText( text );
        etext.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        etext.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              text = get_text(etext);
              resize();
              etext.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( etext );
        ypos+=item_hei+3;

        Lforecolor = new TextView(ACTIVITY);
        Lforecolor.setPadding(1, 1, 1, 1);
        Lforecolor.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lforecolor.setTextColor( Color.rgb( 0, 0, 0 ));
        Lforecolor.setTextSize( FSIZE );
        Lforecolor.setText(&quot;色&quot;);
        Lforecolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lforecolor );

        bforecolor = new Button(ACTIVITY);
        bforecolor.setPadding(1, 1, 1, 1);
        bforecolor.setGravity(Gravity.CENTER|Gravity.CENTER);
        bforecolor.setTextSize( FSIZE );
        bforecolor.setTextColor( Color.rgb( 0, 0, 0 ));
        bforecolor.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        bforecolor.setText( &quot;変える&quot; );
        bforecolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        bforecolor.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ xhandler(me,&quot;forecolor&quot;);}
        });
        pbase.addView( bforecolor );
        ypos+=item_hei+3;

        Lbackcolor = new TextView(ACTIVITY);
        Lbackcolor.setPadding(1, 1, 1, 1);
        Lbackcolor.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lbackcolor.setTextColor( Color.rgb( 0, 0, 0 ));
        Lbackcolor.setTextSize( FSIZE );
        Lbackcolor.setText(&quot;背景の色&quot;);
        Lbackcolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lbackcolor );

        bbackcolor = new Button(ACTIVITY);
        bbackcolor.setPadding(1, 1, 1, 1);
        bbackcolor.setGravity(Gravity.CENTER|Gravity.CENTER);
        bbackcolor.setTextSize( FSIZE );
        bbackcolor.setTextColor( Color.rgb( 0, 0, 0 ) );
        bbackcolor.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        bbackcolor.setText( &quot;変える&quot; );
        bbackcolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        bbackcolor.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ xhandler(me,&quot;backcolor&quot;);}
        });
        pbase.addView( bbackcolor );
        ypos+=item_hei+3;

        Lfont = new TextView(ACTIVITY);
        Lfont.setPadding(1, 1, 1, 1);
        Lfont.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lfont.setTextColor( Color.rgb( 0, 0, 0 ));
        Lfont.setTextSize( FSIZE );
        Lfont.setText(&quot;フォント&quot;);
        Lfont.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lfont );

        efont = new EditText(ACTIVITY);
        efont.setPadding(1, 1, 1, 1);
        efont.setGravity(Gravity.LEFT|Gravity.CENTER);
        efont.setTextSize( FSIZE );
        efont.setTextColor( Color.rgb( 0, 0, 0 ));
        efont.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        efont.setText( &quot;&quot;+font );
        efont.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        efont.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              font = get_text(efont);
              resize();
              efont.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( efont );
        ypos+=item_hei+3;

        Lfontsize = new TextView(ACTIVITY);
        Lfontsize.setPadding(1, 1, 1, 1);
        Lfontsize.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lfontsize.setTextColor( Color.rgb( 0, 0, 0 ));
        Lfontsize.setTextSize( FSIZE );
        Lfontsize.setText(&quot;文字のサイズ&quot;);
        Lfontsize.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lfontsize );

        efontsize = new EditText(ACTIVITY);
        efontsize.setPadding(1, 1, 1, 1);
        efontsize.setGravity(Gravity.LEFT|Gravity.CENTER);
        efontsize.setTextSize( FSIZE );
        efontsize.setTextColor( Color.rgb( 0, 0, 0 ));
        efontsize.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        efontsize.setText( &quot;&quot;+fontsize );
        efontsize.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        efontsize.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              fontsize = parseInt( get_text(efontsize) );
              resize();
              efontsize.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( efontsize );
        ypos+=item_hei+3;

        Lhalign = new TextView(ACTIVITY);
        Lhalign.setPadding(1, 1, 1, 1);
        Lhalign.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lhalign.setTextColor( Color.rgb( 0, 0, 0 ));
        Lhalign.setTextSize( FSIZE );
        Lhalign.setText(&quot;横方向の揃え位置&quot;);
        Lhalign.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lhalign );

        blt = new Button(ACTIVITY);
        blt.setPadding(1, 1, 1, 1);
        blt.setGravity(Gravity.CENTER|Gravity.CENTER);
        blt.setTextSize( FSIZE );
        blt.setTextColor( Color.rgb( 0, 0, 0 ));
        blt.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        blt.setText( &quot;左&quot; );
        blt.setLayoutParams( new AbsoluteLayout.LayoutParams( item_hei,item_hei,item_wid,ypos ) );
        blt.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){
            halign = 0;
            resize();
          }
        });
        pbase.addView( blt );
        bch = new Button(ACTIVITY);
        bch.setPadding(1, 1, 1, 1);
        bch.setGravity(Gravity.CENTER|Gravity.CENTER);
        bch.setTextSize( FSIZE );
        bch.setTextColor( Color.rgb( 0, 0, 0 ));
        bch.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        bch.setText( &quot;中&quot; );
        bch.setLayoutParams( new AbsoluteLayout.LayoutParams( item_hei,item_hei,item_wid * 4 / 3,ypos ) );
        bch.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){
            halign = 1;
            resize();
          }
        });
        pbase.addView( bch );
        brt = new Button(ACTIVITY);
        brt.setPadding(1, 1, 1, 1);
        brt.setGravity(Gravity.CENTER|Gravity.CENTER);
        brt.setTextSize( FSIZE );
        brt.setTextColor( Color.rgb( 0, 0, 0 ));
        brt.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        brt.setText( &quot;右&quot; );
        brt.setLayoutParams( new AbsoluteLayout.LayoutParams( item_hei,item_hei,item_wid * 5 / 3,ypos ) );
        brt.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){
            halign = 2;
            resize();
          }
        });
        pbase.addView( brt );
        ypos+=item_hei+3;

        Lvalign = new TextView(ACTIVITY);
        Lvalign.setPadding(1, 1, 1, 1);
        Lvalign.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lvalign.setTextColor( Color.rgb( 0, 0, 0 ));
        Lvalign.setTextSize( FSIZE );
        Lvalign.setText(&quot;縦方向の揃え位置&quot;);
        Lvalign.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lvalign );

        bup = new Button(ACTIVITY);
        bup.setPadding(1, 1, 1, 1);
        bup.setGravity(Gravity.CENTER|Gravity.CENTER);
        bup.setTextSize( FSIZE );
        bup.setTextColor( Color.rgb( 0, 0, 0 ));
        bup.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        bup.setText( &quot;上&quot; );
        bup.setLayoutParams( new AbsoluteLayout.LayoutParams( item_hei,item_hei,item_wid,ypos ) );
        bup.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){
            valign = 0;
            resize();
          }
        });
        pbase.addView( bup );
        bcv = new Button(ACTIVITY);
        bcv.setPadding(1, 1, 1, 1);
        bcv.setGravity(Gravity.CENTER|Gravity.CENTER);
        bcv.setTextSize( FSIZE );
        bcv.setTextColor( Color.rgb( 0, 0, 0 ));
        bcv.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        bcv.setText( &quot;中&quot; );
        bcv.setLayoutParams( new AbsoluteLayout.LayoutParams( item_hei,item_hei,item_wid * 4 / 3,ypos ) );
        bcv.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){
            valign = 1;
            resize();
          }
        });
        pbase.addView( bcv );
        bdw = new Button(ACTIVITY);
        bdw.setPadding(1, 1, 1, 1);
        bdw.setGravity(Gravity.CENTER|Gravity.CENTER);
        bdw.setTextSize( FSIZE );
        bdw.setTextColor( Color.rgb( 0, 0, 0 ));
        bdw.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        bdw.setText( &quot;下&quot; );
        bdw.setLayoutParams( new AbsoluteLayout.LayoutParams( item_hei,item_hei,item_wid * 5 / 3,ypos ) );
        bdw.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){
            valign = 2;
            resize();
          }
        });
        pbase.addView( bdw );
        ypos+=item_hei+3;

        Lseethrough = new TextView(ACTIVITY);
        Lseethrough.setPadding(1, 1, 1, 1);
        Lseethrough.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lseethrough.setTextColor( Color.rgb( 0, 0, 0 ));
        Lseethrough.setTextSize( FSIZE );
        Lseethrough.setText(&quot;透明コンポーネント&quot;);
        Lseethrough.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lseethrough );

        cseethrough = new CheckBox(ACTIVITY);
        cseethrough.setPadding(1, 1, 1, 1);
        cseethrough.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        cseethrough.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        cseethrough.setChecked( seethrough );
        pbase.addView( cseethrough );
        ypos+=item_hei+3;

        Lcreate_pin = new TextView(ACTIVITY);
        Lcreate_pin.setPadding(1, 1, 1, 1);
        Lcreate_pin.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lcreate_pin.setTextColor( Color.rgb( 0, 0, 0 ));
        Lcreate_pin.setTextSize( FSIZE );
        Lcreate_pin.setText(&quot;createdピンを表示&quot;);
        Lcreate_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lcreate_pin );

        ccreate_pin = new CheckBox(ACTIVITY);
        ccreate_pin.setPadding(1, 1, 1, 1);
        ccreate_pin.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        ccreate_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        ccreate_pin.setChecked( create_pin );
        pbase.addView( ccreate_pin );
        ypos+=item_hei+3;

        Lclick_pin = new TextView(ACTIVITY);
        Lclick_pin.setPadding(1, 1, 1, 1);
        Lclick_pin.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lclick_pin.setTextColor( Color.rgb( 0, 0, 0 ));
        Lclick_pin.setTextSize( FSIZE );
        Lclick_pin.setText(&quot;clickedピンを表示&quot;);
        Lclick_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lclick_pin );

        cclick_pin = new CheckBox(ACTIVITY);
        cclick_pin.setPadding(1, 1, 1, 1);
        cclick_pin.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        cclick_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        cclick_pin.setChecked( click_pin );
        pbase.addView( cclick_pin );
        ypos+=item_hei+3;

        Lsuperclass = new TextView(ACTIVITY);
        Lsuperclass.setPadding(1, 1, 1, 1);
        Lsuperclass.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lsuperclass.setTextColor( Color.rgb( 0, 0, 0 ));
        Lsuperclass.setTextSize( FSIZE );
        Lsuperclass.setText(&quot;スーパークラス&quot;);
        Lsuperclass.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lsuperclass );

        esuperclass = new EditText(ACTIVITY);
        esuperclass.setPadding(1, 1, 1, 1);
        esuperclass.setGravity(Gravity.LEFT|Gravity.CENTER);
        esuperclass.setTextSize( FSIZE );
        esuperclass.setTextColor( Color.rgb( 0, 0, 0 ));
        esuperclass.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        esuperclass.setText( superclass[ApplicationType] );
        esuperclass.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        esuperclass.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              superclass[ApplicationType] = get_text(esuperclass);
              resize();
              esuperclass.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( esuperclass );
        ypos+=item_hei+3;

        me.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              me.requestFocus();
              xhandler(me,&quot;touch&quot;);
            }
            return true;
          }
        });
        me.setOnKeyListener( new View.OnKeyListener(){
          @Override
          public boolean onKey(View v, int keyCode, KeyEvent event) {
            if (event.getAction() == KeyEvent.ACTION_DOWN) {
              key_code = keyCode;
              xhandler(me,&quot;keyinput&quot;);
            }
            return true;
          }
        });
        pbase.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid * 2+10, ypos+180, 0, vpos ) );
        resize();
      }


      // サイズ調整する
      public void resize(){

dprint(&quot;xbutton resize\n&quot;);

        setPadding(1, 1, 1, 1);
        int g = 0;
        switch( halign ){
          case 0: g = g | Gravity.LEFT  ; break;
          case 1: g = g | Gravity.CENTER; break;
          case 2: g = g | Gravity.RIGHT ; break;
        }
        switch( valign ){
          case 0: g = g | Gravity.TOP   ; break;
          case 1: g = g | Gravity.CENTER; break;
          case 2: g = g | Gravity.BOTTOM; break;
        }
        setGravity(g);
        setTextSize( fontsize );
        setTextColor( Color.rgb( fr, fg, fb ));
        setBackgroundColor( Color.rgb( br, bg, bb ));
        setText( text );
        setLayoutParams( new AbsoluteLayout.LayoutParams( width, height, x0, y0 ) );
      }

      // パラメータをセットする
      public void set_params(){

dprint(&quot;xbutton set_prams\n&quot;);

        name = get_text(ename);
        text = get_text(etext);
        fontsize = parseInt( get_text(efontsize) );
        seethrough = cseethrough.isChecked();
        create_pin = ccreate_pin.isChecked();
        click_pin  = cclick_pin.isChecked();
        superclass[ApplicationType] = get_text(esuperclass);
      }


      // 各パラメータを返す
      public String get_params(){

dprint(&quot;xbutton get_prams\n&quot;);

        return
          &quot;BUTTON;&quot;  +
          name +&quot;;&quot; +
          text +&quot;;&quot; +
          x0 + &quot;;&quot; + y0 + &quot;;&quot; + width + &quot;;&quot; + height + &quot;;&quot; +
          fr + &quot;;&quot; + fg + &quot;;&quot; + fb + &quot;;&quot; +
          br + &quot;;&quot; + bg + &quot;;&quot; + bb + &quot;;&quot; +
          font + &quot;;&quot; + fontsize + &quot;;&quot; + 
          &quot;null;&quot; +  // ダミー
          halign + &quot;;&quot; + valign + &quot;;&quot; +
          (seethrough? 0:1) +&quot;;&quot;+
          (create_pin? 1:0) +&quot;;&quot;+
          (click_pin?  1:0) +&quot;;&quot;+
          superclass[ApplicationType]  + &quot;;&quot;
        ;
      }

      // 自分を追加する
      public void join(){

dprint(&quot;xbutton join\n&quot;);

        designer.ebase.addView( me );
        designer.pbase.addView( pbase );
        designer.member.add(me);
        show_property();
      }


      // 自分を消去する
      public void suicide(){

dprint(&quot;xbutton suicide\n&quot;);

        designer.ebase.removeView( me );
        if( pbase == present_property ) present_property = null;
        designer.pbase.removeView( pbase );
        designer.member.remove(me);
      }


      // プロパティを表示する
      public void show_property(){

dprint(&quot;xbutton show property\n&quot;);

        if(present_property != null ) present_property.setVisibility(View.GONE);
        present_property = pbase;
        pbase.setVisibility(View.VISIBLE);
      }


      // X方向の位置を返す
      public int get_x(){
        return x0;
      }

      // Y方向の位置を返す
      public int get_y(){
        return y0;
      }

      // 幅を返す
      public int get_width(){
        return width;
      }

      // 高さを返す
      public int get_height(){
        return height;
      }

      // 位置・大きさを設定する
      public void setBounds( int x, int y, int wid, int hei ){

dprint(&quot;xbutton setBounds\n&quot;);

        x0 = x;
        y0 = y;
        width = wid;
        height = hei;
        setLayoutParams( new AbsoluteLayout.LayoutParams( width, height, x0, y0 ) );
      }


      // 背景色を設定
      public void setBackground( int r, int g, int b ){
        br = r;
        bg = g;
        bb = b;
        setBackgroundColor( Color.rgb( br, bg, bb ) );
      }


      // 色を設定
      public void setForeground( int r, int g, int b ){
        fr = r;
        fg = g;
        fb = b;
        setTextColor( Color.rgb( fr, fg, fb ) );
      }


    }//~xbutton
</codetext>
</codeclip>
<codeclip>
<ID>_C17</ID>
<x0>22</x0>
<y0>161</y0>
<width>242</width>
<height>36</height>
<codetext>    // xtextarea クラス
    class xtextarea extends EditText implements xview{
      View me;
      int x0, y0, width, height;
      int ypos;
      String[] superclass = {
        &quot;JTextArea&quot;,
        &quot;JTextArea&quot;,
        &quot;ETextArea&quot;,
        &quot;ETextArea&quot;,
        &quot;EditText&quot;,
        &quot;TextArea&quot;,
        &quot;TextArea&quot;,
        &quot;TextArea&quot;,
        &quot;TextArea&quot;,
        &quot;TextArea&quot;,
        &quot;TextArea&quot;,
        &quot;TextArea&quot;,
        &quot;TextArea&quot;,
        &quot;TextArea&quot;,
        &quot;TextArea&quot;,
        &quot;TextArea&quot;
      };

      AbsoluteLayout pbase;
      TextView Lname;         EditText ename;        String  name;
      TextView Ltext;         EditText etext;        String  text;
      TextView Lforecolor;    Button   bforecolor;   int     fr, fg, fb;
      TextView Lbackcolor;    Button   bbackcolor;   int     br, bg, bb;
      TextView Lfont;         EditText efont;        String  font; // 無効(環境間の互換性に問題あり)
      TextView Lfontsize;     EditText efontsize;    int     fontsize;
      TextView Lseethrough;   CheckBox cseethrough;  boolean seethrough;
      TextView Lscrollable;   CheckBox cscrollable;  boolean scrollable;
      TextView Lcreate_pin;   CheckBox ccreate_pin;  boolean create_pin;
      TextView Lsuperclass;   EditText esuperclass;


      // 新規作成
      xtextarea( String nam, String txt, int x, int y ){
        super(ACTIVITY);

dprint(&quot;new xtextarea\n&quot;);

        x0         = x;
        y0         = y;
        width      = default_width;
        height     = default_height;
        name       = nam;
        text       = txt;
        fr = 0;   fg = 0;   fb = 0;
        br = 200; bg = 200; bb = 200;
        font       = &quot;***&quot;;
        fontsize   = 16;
        seethrough = false;
        scrollable = true;
        create_pin = true;
        init();
      }


      // Loginモードで生成(ファイルの情報をもとに生成)  
      xtextarea( String str ){
        super(ACTIVITY);

dprint(&quot;new textarea(s)\n&quot;);

        x0         = 0;
        y0         = 0;
        width      = 107;
        height     = 50;
        name       = &quot;no name&quot;;
        text       = &quot;&quot;;
        fr = 0;   fg = 0;   fb = 0;
        br = 200; bg = 200; bb = 200;
        font       = &quot;***&quot;;
        fontsize   = 16;
        seethrough = false;
        scrollable = true;
        create_pin = true;
        if( (  str.startsWith(&quot;TEXTAREA&quot;) ) ){
          StringTokenizer fld = new StringTokenizer( str, &quot;;&quot; );
          String d = fld.nextToken();
          name = fld.nextToken();
          String s = fld.nextToken();
          if( s.equals(&quot;null&quot;)) text =&quot;&quot;; else text = s;
          x0 = parseInt(fld.nextToken());
          y0 = parseInt(fld.nextToken());
          width  = parseInt(fld.nextToken());
          height = parseInt(fld.nextToken());
          fr = parseInt(fld.nextToken());
          fg = parseInt(fld.nextToken());
          fb = parseInt(fld.nextToken());
          br = parseInt(fld.nextToken());
          bg = parseInt(fld.nextToken());
          bb = parseInt(fld.nextToken());
          font = fld.nextToken();
          fontsize = parseInt(fld.nextToken());
          if( fld.hasMoreTokens() ) seethrough  = (parseInt(fld.nextToken())==0);
          if( fld.hasMoreTokens() ) scrollable  = (parseInt(fld.nextToken())!=0);
          if( fld.hasMoreTokens() ) create_pin  = (parseInt(fld.nextToken())!=0);
          if( fld.hasMoreTokens() ) superclass[ApplicationType] = fld.nextToken();
        }
        init();
      }


      // 初期化共通部  
      private void init(){

dprint(&quot;xtextarea init\n&quot;);

        pbase = new AbsoluteLayout(ACTIVITY);
        me = this;
        setFocusable(true);
        setFocusableInTouchMode(true);
        setGravity(Gravity.LEFT|Gravity.TOP);
        ypos = 0;
        Lname = new TextView(ACTIVITY);
        Lname.setPadding(1, 1, 1, 1);
        Lname.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lname.setTextColor( Color.rgb( 0, 0, 0 ));
        Lname.setTextSize( FSIZE );
        Lname.setText(&quot;名前&quot;);
        Lname.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lname );

        ename = new EditText(ACTIVITY);
        ename.setPadding(1, 1, 1, 1);
        ename.setGravity(Gravity.LEFT|Gravity.CENTER);
        ename.setTextSize( FSIZE );
        ename.setTextColor( Color.rgb( 0, 0, 0 ));
        ename.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        ename.setText( name );
        ename.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        ename.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              name = get_text(ename);
              resize();
              ename.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( ename );
        ypos+=item_hei+3;

        Ltext = new TextView(ACTIVITY);
        Ltext.setPadding(1, 1, 1, 1);
        Ltext.setGravity(Gravity.LEFT|Gravity.CENTER);
        Ltext.setTextColor( Color.rgb( 0, 0, 0 ));
        Ltext.setTextSize( FSIZE );
        Ltext.setText(&quot;テキスト&quot;);
        Ltext.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Ltext );

        etext = new EditText(ACTIVITY);
        etext.setPadding(1, 1, 1, 1);
        etext.setGravity(Gravity.LEFT|Gravity.CENTER);
        etext.setTextSize( FSIZE );
        etext.setTextColor( Color.rgb( 0, 0, 0 ));
        etext.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        etext.setText( text );
        etext.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        etext.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              text = get_text(etext);
              resize();
              etext.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( etext );
        ypos+=item_hei+3;

        Lforecolor = new TextView(ACTIVITY);
        Lforecolor.setPadding(1, 1, 1, 1);
        Lforecolor.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lforecolor.setTextColor( Color.rgb( 0, 0, 0 ));
        Lforecolor.setTextSize( FSIZE );
        Lforecolor.setText(&quot;色&quot;);
        Lforecolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lforecolor );

        bforecolor = new Button(ACTIVITY);
        bforecolor.setPadding(1, 1, 1, 1);
        bforecolor.setGravity(Gravity.CENTER|Gravity.CENTER);
        bforecolor.setTextSize( FSIZE );
        bforecolor.setTextColor( Color.rgb( 0, 0, 0 ));
        bforecolor.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        bforecolor.setText( &quot;変える&quot; );
        bforecolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        bforecolor.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ xhandler(me,&quot;forecolor&quot;);}
        });
        pbase.addView( bforecolor );
        ypos+=item_hei+3;

        Lbackcolor = new TextView(ACTIVITY);
        Lbackcolor.setPadding(1, 1, 1, 1);
        Lbackcolor.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lbackcolor.setTextColor( Color.rgb( 0, 0, 0 ));
        Lbackcolor.setTextSize( FSIZE );
        Lbackcolor.setText(&quot;背景の色&quot;);
        Lbackcolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lbackcolor );

        bbackcolor = new Button(ACTIVITY);
        bbackcolor.setPadding(1, 1, 1, 1);
        bbackcolor.setGravity(Gravity.CENTER|Gravity.CENTER);
        bbackcolor.setTextSize( FSIZE );
        bbackcolor.setTextColor( Color.rgb( 0, 0, 0 ) );
        bbackcolor.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        bbackcolor.setText( &quot;変える&quot; );
        bbackcolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        bbackcolor.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ xhandler(me,&quot;backcolor&quot;);}
        });
        pbase.addView( bbackcolor );
        ypos+=item_hei+3;

        Lfont = new TextView(ACTIVITY);
        Lfont.setPadding(1, 1, 1, 1);
        Lfont.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lfont.setTextColor( Color.rgb( 0, 0, 0 ));
        Lfont.setTextSize( FSIZE );
        Lfont.setText(&quot;フォント&quot;);
        Lfont.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lfont );

        efont = new EditText(ACTIVITY);
        efont.setPadding(1, 1, 1, 1);
        efont.setGravity(Gravity.LEFT|Gravity.CENTER);
        efont.setTextSize( FSIZE );
        efont.setTextColor( Color.rgb( 0, 0, 0 ));
        efont.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        efont.setText( &quot;&quot;+font );
        efont.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        efont.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              font = get_text(efont);
              resize();
              efont.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( efont );
        ypos+=item_hei+3;

        Lfontsize = new TextView(ACTIVITY);
        Lfontsize.setPadding(1, 1, 1, 1);
        Lfontsize.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lfontsize.setTextColor( Color.rgb( 0, 0, 0 ));
        Lfontsize.setTextSize( FSIZE );
        Lfontsize.setText(&quot;文字のサイズ&quot;);
        Lfontsize.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lfontsize );

        efontsize = new EditText(ACTIVITY);
        efontsize.setPadding(1, 1, 1, 1);
        efontsize.setGravity(Gravity.LEFT|Gravity.CENTER);
        efontsize.setTextSize( FSIZE );
        efontsize.setTextColor( Color.rgb( 0, 0, 0 ));
        efontsize.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        efontsize.setText( &quot;&quot;+fontsize );
        efontsize.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        efontsize.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              fontsize = parseInt( get_text(efontsize) );
              resize();
              efontsize.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( efontsize );
        ypos+=item_hei+3;


        Lseethrough = new TextView(ACTIVITY);
        Lseethrough.setPadding(1, 1, 1, 1);
        Lseethrough.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lseethrough.setTextColor( Color.rgb( 0, 0, 0 ));
        Lseethrough.setTextSize( FSIZE );
        Lseethrough.setText(&quot;透明コンポーネント&quot;);
        Lseethrough.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lseethrough );

        cseethrough = new CheckBox(ACTIVITY);
        cseethrough.setPadding(1, 1, 1, 1);
        cseethrough.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        cseethrough.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        cseethrough.setChecked( seethrough );
        pbase.addView( cseethrough );
        ypos+=item_hei+3;

        Lscrollable = new TextView(ACTIVITY);
        Lscrollable.setPadding(1, 1, 1, 1);
        Lscrollable.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lscrollable.setTextColor( Color.rgb( 0, 0, 0 ));
        Lscrollable.setTextSize( FSIZE );
        Lscrollable.setText(&quot;スクロール可能&quot;);
        Lscrollable.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lscrollable );

        cscrollable = new CheckBox(ACTIVITY);
        cscrollable.setPadding(1, 1, 1, 1);
        cscrollable.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        cscrollable.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        cscrollable.setChecked( scrollable );
        pbase.addView( cscrollable );
        ypos+=item_hei+3;

        Lcreate_pin = new TextView(ACTIVITY);
        Lcreate_pin.setPadding(1, 1, 1, 1);
        Lcreate_pin.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lcreate_pin.setTextColor( Color.rgb( 0, 0, 0 ));
        Lcreate_pin.setTextSize( FSIZE );
        Lcreate_pin.setText(&quot;createdピンを表示&quot;);
        Lcreate_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lcreate_pin );

        ccreate_pin = new CheckBox(ACTIVITY);
        ccreate_pin.setPadding(1, 1, 1, 1);
        ccreate_pin.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        ccreate_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        ccreate_pin.setChecked( create_pin );
        pbase.addView( ccreate_pin );
        ypos+=item_hei+3;

        Lsuperclass = new TextView(ACTIVITY);
        Lsuperclass.setPadding(1, 1, 1, 1);
        Lsuperclass.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lsuperclass.setTextColor( Color.rgb( 0, 0, 0 ));
        Lsuperclass.setTextSize( FSIZE );
        Lsuperclass.setText(&quot;スーパークラス&quot;);
        Lsuperclass.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lsuperclass );

        esuperclass = new EditText(ACTIVITY);
        esuperclass.setPadding(1, 1, 1, 1);
        esuperclass.setGravity(Gravity.LEFT|Gravity.CENTER);
        esuperclass.setTextSize( FSIZE );
        esuperclass.setTextColor( Color.rgb( 0, 0, 0 ));
        esuperclass.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        esuperclass.setText( superclass[ApplicationType] );
        esuperclass.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        esuperclass.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              superclass[ApplicationType] = get_text(esuperclass);
              resize();
              esuperclass.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( esuperclass );
        ypos+=item_hei+3;

        me.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              me.requestFocus();
              xhandler(me,&quot;touch&quot;);
            }
            return true;
          }
        });
        me.setOnKeyListener( new View.OnKeyListener(){
          @Override
          public boolean onKey(View v, int keyCode, KeyEvent event) {
            if (event.getAction() == KeyEvent.ACTION_DOWN) {
              key_code = keyCode;
              xhandler(me,&quot;keyinput&quot;);
            }
            return true;
          }
        });
        pbase.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid * 2+10, ypos+180, 0, vpos ) );
        resize();
      }


      // サイズ調整する
      public void resize(){

dprint(&quot;xtextarea resize\n&quot;);

        setPadding(1, 1, 1, 1);
        setTextSize( fontsize );
        setTextColor( Color.rgb( fr, fg, fb ));
        setBackgroundColor( Color.rgb( br, bg, bb ));
        setText( text );
        setLayoutParams( new AbsoluteLayout.LayoutParams( width, height, x0, y0 ) );
      }

      // 各パラメータをセットする
      public void set_params(){

dprint(&quot;xtextarea set_prams\n&quot;);

        name = get_text(ename);
        text = get_text(etext);
        fontsize = parseInt( get_text(efontsize) );
        seethrough = cseethrough.isChecked();
        scrollable = cscrollable.isChecked();
        create_pin = ccreate_pin.isChecked();
        superclass[ApplicationType] = get_text(esuperclass);
      }

      // 各パラメータを返す
      public String get_params(){

dprint(&quot;xtextarea get_prams\n&quot;);

        return
          &quot;TEXTAREA;&quot;  +
          name +&quot;;&quot; +
          text +&quot;;&quot; +
          x0 + &quot;;&quot; + y0 + &quot;;&quot; + width + &quot;;&quot; + height + &quot;;&quot; +
          fr + &quot;;&quot; + fg + &quot;;&quot; + fb + &quot;;&quot; +
          br + &quot;;&quot; + bg + &quot;;&quot; + bb + &quot;;&quot; +
          font + &quot;;&quot; + fontsize + &quot;;&quot; + 
          (seethrough? 0:1) +&quot;;&quot;+
          (scrollable? 1:0) +&quot;;&quot;+
          (create_pin? 1:0) +&quot;;&quot;+
          superclass[ApplicationType]  + &quot;;&quot;
        ;
      }

      // 自分を追加する
      public void join(){

dprint(&quot;xtextarea join\n&quot;);

        designer.ebase.addView( me );
        designer.pbase.addView( pbase );
        designer.member.add(me);
        show_property();
      }

      // 自分を消去する
      public void suicide(){

dprint(&quot;xtextarea suicide\n&quot;);

        designer.ebase.removeView( me );
        if( pbase == present_property ) present_property = null;
        designer.pbase.removeView( pbase );
        designer.member.remove(me);
      }

      // プロパティを表示する
      public void show_property(){

dprint(&quot;xtextarea show property\n&quot;);

        if(present_property != null ) present_property.setVisibility(View.GONE);
        present_property = pbase;
        pbase.setVisibility(View.VISIBLE);
      }

      // X方向の位置を返す
      public int get_x(){
        return x0;
      }

      // Y方向の位置を返す
      public int get_y(){
        return y0;
      }

      // 幅を返す
      public int get_width(){
        return width;
      }

      // 高さを返す
      public int get_height(){
        return height;
      }

      // 位置・大きさを設定する
      public void setBounds( int x, int y, int wid, int hei ){

dprint(&quot;xtextarea setBounds\n&quot;);

        x0 = x;
        y0 = y;
        width = wid;
        height = hei;
        setLayoutParams( new AbsoluteLayout.LayoutParams( width, height, x0, y0 ) );
      }


      // 背景色を設定
      public void setBackground( int r, int g, int b ){
        br = r;
        bg = g;
        bb = b;
        setBackgroundColor( Color.rgb( br, bg, bb ) );
      }


      // 色を設定
      public void setForeground( int r, int g, int b ){
        fr = r;
        fg = g;
        fb = b;
        setTextColor( Color.rgb( fr, fg, fb ) );
      }


    }//~xtextarea
</codetext>
</codeclip>
<codeclip>
<ID>_C18</ID>
<x0>19</x0>
<y0>208</y0>
<width>240</width>
<height>34</height>
<codetext>    // xtextfield クラス
    class xtextfield extends EditText implements xview{
      View me;
      int x0, y0, width, height;
      int ypos;
      String[] superclass = {
        &quot;JTextField&quot;,
        &quot;JTextField&quot;,
        &quot;ETextField&quot;,
        &quot;ETextField&quot;,
        &quot;EditText&quot;,
        &quot;TextField&quot;,
        &quot;TextField&quot;,
        &quot;TextField&quot;,
        &quot;TextField&quot;,
        &quot;TextField&quot;,
        &quot;TextField&quot;,
        &quot;TextField&quot;,
        &quot;TextField&quot;,
        &quot;TextField&quot;,
        &quot;TextField&quot;,
        &quot;TextField&quot;
      };

      AbsoluteLayout pbase;
      TextView Lname;         EditText ename;        String  name;
      TextView Ltext;         EditText etext;        String  text;
      TextView Lforecolor;    Button   bforecolor;   int     fr, fg, fb;
      TextView Lbackcolor;    Button   bbackcolor;   int     br, bg, bb;
      TextView Lfont;         EditText efont;        String  font; // 無効(環境間の互換性に問題あり)
      TextView Lfontsize;     EditText efontsize;    int     fontsize;
      TextView Lseethrough;   CheckBox cseethrough;  boolean seethrough;
      TextView Lcreate_pin;   CheckBox ccreate_pin;  boolean create_pin;
      TextView Linput_pin;    CheckBox cinput_pin;   boolean input_pin;
      TextView Lsuperclass;   EditText esuperclass;


      // 新規作成
      xtextfield( String nam, String txt, int x, int y ){
        super(ACTIVITY);

dprint(&quot;new xtextfield\n&quot;);

        x0         = x;
        y0         = y;
        width      = default_width;
        height     = default_height;
        name       = nam;
        text       = txt;
        fr = 0;   fg = 0;   fb = 0;
        br = 200; bg = 200; bb = 200;
        font       = &quot;***&quot;;
        fontsize   = 16;
        seethrough = false;
        create_pin = true;
        input_pin  = true;
        init();
      }


      // Loginモードで生成(ファイルの情報をもとに生成)  
      xtextfield( String str ){
        super(ACTIVITY);

dprint(&quot;new textarea(s)\n&quot;);

        x0         = 0;
        y0         = 0;
        width      = 107;
        height     = 50;
        name       = &quot;no name&quot;;
        text       = &quot;&quot;;
        fr = 0;   fg = 0;   fb = 0;
        br = 200; bg = 200; bb = 200;
        font       = &quot;***&quot;;
        fontsize   = 16;
        seethrough = false;
        create_pin = true;
        input_pin  = true;
        if( (  str.startsWith(&quot;TEXTFIELD&quot;) ) ){
          StringTokenizer fld = new StringTokenizer( str, &quot;;&quot; );
          String d = fld.nextToken();
          name = fld.nextToken();
          String s = fld.nextToken();
          if( s.equals(&quot;null&quot;)) text =&quot;&quot;; else text = s;
          x0 = parseInt(fld.nextToken());
          y0 = parseInt(fld.nextToken());
          width  = parseInt(fld.nextToken());
          height = parseInt(fld.nextToken());
          fr = parseInt(fld.nextToken());
          fg = parseInt(fld.nextToken());
          fb = parseInt(fld.nextToken());
          br = parseInt(fld.nextToken());
          bg = parseInt(fld.nextToken());
          bb = parseInt(fld.nextToken());
          font = fld.nextToken();
          fontsize = parseInt(fld.nextToken());
          String imagefile = fld.nextToken();
          if( fld.hasMoreTokens() ) seethrough  = (parseInt(fld.nextToken())==0);
          if( fld.hasMoreTokens() ) create_pin  = (parseInt(fld.nextToken())!=0);
          if( fld.hasMoreTokens() ) input_pin   = (parseInt(fld.nextToken())!=0);
          if( fld.hasMoreTokens() ) superclass[ApplicationType] = fld.nextToken();
        }
        init();
      }


      // 初期化共通部  
      private void init(){

dprint(&quot;xtextfield init\n&quot;);

        pbase = new AbsoluteLayout(ACTIVITY);
        me = this;
        setFocusable(true);
        setFocusableInTouchMode(true);
        setGravity(Gravity.LEFT|Gravity.CENTER);
        ypos = 0;
        Lname = new TextView(ACTIVITY);
        Lname.setPadding(1, 1, 1, 1);
        Lname.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lname.setTextColor( Color.rgb( 0, 0, 0 ));
        Lname.setTextSize( FSIZE );
        Lname.setText(&quot;名前&quot;);
        Lname.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lname );

        ename = new EditText(ACTIVITY);
        ename.setPadding(1, 1, 1, 1);
        ename.setGravity(Gravity.LEFT|Gravity.CENTER);
        ename.setTextSize( FSIZE );
        ename.setTextColor( Color.rgb( 0, 0, 0 ));
        ename.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        ename.setText( name );
        ename.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        ename.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              name = get_text(ename);
              resize();
              ename.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( ename );
        ypos+=item_hei+3;

        Ltext = new TextView(ACTIVITY);
        Ltext.setPadding(1, 1, 1, 1);
        Ltext.setGravity(Gravity.LEFT|Gravity.CENTER);
        Ltext.setTextColor( Color.rgb( 0, 0, 0 ));
        Ltext.setTextSize( FSIZE );
        Ltext.setText(&quot;テキスト&quot;);
        Ltext.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Ltext );

        etext = new EditText(ACTIVITY);
        etext.setPadding(1, 1, 1, 1);
        etext.setGravity(Gravity.LEFT|Gravity.CENTER);
        etext.setTextSize( FSIZE );
        etext.setTextColor( Color.rgb( 0, 0, 0 ));
        etext.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        etext.setText( text );
        etext.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        etext.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              text = get_text(etext);
              resize();
              etext.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( etext );
        ypos+=item_hei+3;

        Lforecolor = new TextView(ACTIVITY);
        Lforecolor.setPadding(1, 1, 1, 1);
        Lforecolor.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lforecolor.setTextColor( Color.rgb( 0, 0, 0 ));
        Lforecolor.setTextSize( FSIZE );
        Lforecolor.setText(&quot;色&quot;);
        Lforecolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lforecolor );

        bforecolor = new Button(ACTIVITY);
        bforecolor.setPadding(1, 1, 1, 1);
        bforecolor.setGravity(Gravity.CENTER|Gravity.CENTER);
        bforecolor.setTextSize( FSIZE );
        bforecolor.setTextColor( Color.rgb( 0, 0, 0 ));
        bforecolor.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        bforecolor.setText( &quot;変える&quot; );
        bforecolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        bforecolor.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ xhandler(me,&quot;forecolor&quot;);}
        });
        pbase.addView( bforecolor );
        ypos+=item_hei+3;

        Lbackcolor = new TextView(ACTIVITY);
        Lbackcolor.setPadding(1, 1, 1, 1);
        Lbackcolor.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lbackcolor.setTextColor( Color.rgb( 0, 0, 0 ));
        Lbackcolor.setTextSize( FSIZE );
        Lbackcolor.setText(&quot;背景の色&quot;);
        Lbackcolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lbackcolor );

        bbackcolor = new Button(ACTIVITY);
        bbackcolor.setPadding(1, 1, 1, 1);
        bbackcolor.setGravity(Gravity.CENTER|Gravity.CENTER);
        bbackcolor.setTextSize( FSIZE );
        bbackcolor.setTextColor( Color.rgb( 0, 0, 0 ) );
        bbackcolor.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        bbackcolor.setText( &quot;変える&quot; );
        bbackcolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        bbackcolor.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ xhandler(me,&quot;backcolor&quot;);}
        });
        pbase.addView( bbackcolor );
        ypos+=item_hei+3;

        Lfont = new TextView(ACTIVITY);
        Lfont.setPadding(1, 1, 1, 1);
        Lfont.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lfont.setTextColor( Color.rgb( 0, 0, 0 ));
        Lfont.setTextSize( FSIZE );
        Lfont.setText(&quot;フォント&quot;);
        Lfont.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lfont );

        efont = new EditText(ACTIVITY);
        efont.setPadding(1, 1, 1, 1);
        efont.setGravity(Gravity.LEFT|Gravity.CENTER);
        efont.setTextSize( FSIZE );
        efont.setTextColor( Color.rgb( 0, 0, 0 ));
        efont.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        efont.setText( &quot;&quot;+font );
        efont.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        efont.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              font = get_text(efont);
              resize();
              efont.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( efont );
        ypos+=item_hei+3;

        Lfontsize = new TextView(ACTIVITY);
        Lfontsize.setPadding(1, 1, 1, 1);
        Lfontsize.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lfontsize.setTextColor( Color.rgb( 0, 0, 0 ));
        Lfontsize.setTextSize( FSIZE );
        Lfontsize.setText(&quot;文字のサイズ&quot;);
        Lfontsize.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lfontsize );

        efontsize = new EditText(ACTIVITY);
        efontsize.setPadding(1, 1, 1, 1);
        efontsize.setGravity(Gravity.LEFT|Gravity.CENTER);
        efontsize.setTextSize( FSIZE );
        efontsize.setTextColor( Color.rgb( 0, 0, 0 ));
        efontsize.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        efontsize.setText( &quot;&quot;+fontsize );
        efontsize.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        efontsize.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              fontsize = parseInt( get_text(efontsize) );
              resize();
              efontsize.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( efontsize );
        ypos+=item_hei+3;


        Lseethrough = new TextView(ACTIVITY);
        Lseethrough.setPadding(1, 1, 1, 1);
        Lseethrough.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lseethrough.setTextColor( Color.rgb( 0, 0, 0 ));
        Lseethrough.setTextSize( FSIZE );
        Lseethrough.setText(&quot;透明コンポーネント&quot;);
        Lseethrough.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lseethrough );

        cseethrough = new CheckBox(ACTIVITY);
        cseethrough.setPadding(1, 1, 1, 1);
        cseethrough.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        cseethrough.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        cseethrough.setChecked( seethrough );
        pbase.addView( cseethrough );
        ypos+=item_hei+3;

        Lcreate_pin = new TextView(ACTIVITY);
        Lcreate_pin.setPadding(1, 1, 1, 1);
        Lcreate_pin.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lcreate_pin.setTextColor( Color.rgb( 0, 0, 0 ));
        Lcreate_pin.setTextSize( FSIZE );
        Lcreate_pin.setText(&quot;createdピンを表示&quot;);
        Lcreate_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lcreate_pin );

        ccreate_pin = new CheckBox(ACTIVITY);
        ccreate_pin.setPadding(1, 1, 1, 1);
        ccreate_pin.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        ccreate_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        ccreate_pin.setChecked( create_pin );
        pbase.addView( ccreate_pin );
        ypos+=item_hei+3;

        Linput_pin = new TextView(ACTIVITY);
        Linput_pin.setPadding(1, 1, 1, 1);
        Linput_pin.setGravity(Gravity.LEFT|Gravity.CENTER);
        Linput_pin.setTextColor( Color.rgb( 0, 0, 0 ));
        Linput_pin.setTextSize( FSIZE );
        Linput_pin.setText(&quot;inputピンを表示&quot;);
        Linput_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Linput_pin );

        cinput_pin = new CheckBox(ACTIVITY);
        cinput_pin.setPadding(1, 1, 1, 1);
        cinput_pin.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        cinput_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        cinput_pin.setChecked( input_pin );
        pbase.addView( cinput_pin );
        ypos+=item_hei+3;

        Lsuperclass = new TextView(ACTIVITY);
        Lsuperclass.setPadding(1, 1, 1, 1);
        Lsuperclass.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lsuperclass.setTextColor( Color.rgb( 0, 0, 0 ));
        Lsuperclass.setTextSize( FSIZE );
        Lsuperclass.setText(&quot;スーパークラス&quot;);
        Lsuperclass.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lsuperclass );

        esuperclass = new EditText(ACTIVITY);
        esuperclass.setPadding(1, 1, 1, 1);
        esuperclass.setGravity(Gravity.LEFT|Gravity.CENTER);
        esuperclass.setTextSize( FSIZE );
        esuperclass.setTextColor( Color.rgb( 0, 0, 0 ));
        esuperclass.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        esuperclass.setText( superclass[ApplicationType] );
        esuperclass.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        esuperclass.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              superclass[ApplicationType] = get_text(esuperclass);
              resize();
              esuperclass.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( esuperclass );
        ypos+=item_hei+3;

        me.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              me.requestFocus();
              xhandler(me,&quot;touch&quot;);
            }
            return true;
          }
        });
        me.setOnKeyListener( new View.OnKeyListener(){
          @Override
          public boolean onKey(View v, int keyCode, KeyEvent event) {
            if (event.getAction() == KeyEvent.ACTION_DOWN) {
              key_code = keyCode;
              xhandler(me,&quot;keyinput&quot;);
            }
            return true;
          }
        });
        pbase.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid * 2+10, ypos+180, 0, vpos ) );
        resize();

      }

      // サイズ調整する
      public void resize(){

dprint(&quot;xtextfield resize\n&quot;);

        setPadding(1, 1, 1, 1);
        setTextSize( fontsize );
        setTextColor( Color.rgb( fr, fg, fb ));
        setBackgroundColor( Color.rgb( br, bg, bb ));
        setText( text );
        setLayoutParams( new AbsoluteLayout.LayoutParams( width, height, x0, y0 ) );
      }

      // 各パラメータをセットする
      public void set_params(){

dprint(&quot;xtextfield set_prams\n&quot;);

        name = get_text(ename);
        text = get_text(etext);
        fontsize = parseInt( get_text(efontsize) );
        seethrough = cseethrough.isChecked();
        create_pin = ccreate_pin.isChecked();
        input_pin  = cinput_pin.isChecked();
        superclass[ApplicationType] = get_text(esuperclass);
      }

      // 各パラメータを返す
      public String get_params(){

dprint(&quot;xtextfield get_prams\n&quot;);

        return
          &quot;TEXTFIELD;&quot;  +
          name +&quot;;&quot; +
          text +&quot;;&quot; +
          x0 + &quot;;&quot; + y0 + &quot;;&quot; + width + &quot;;&quot; + height + &quot;;&quot; +
          fr + &quot;;&quot; + fg + &quot;;&quot; + fb + &quot;;&quot; +
          br + &quot;;&quot; + bg + &quot;;&quot; + bb + &quot;;&quot; +
          font + &quot;;&quot; + fontsize + &quot;;&quot; + 
          (seethrough? 0:1) +&quot;;&quot;+
          (create_pin? 1:0) +&quot;;&quot;+
          (input_pin?  1:0) +&quot;;&quot;+
          superclass[ApplicationType]  + &quot;;&quot;
        ;
      }

      // 自分を追加する
      public void join(){

dprint(&quot;xtextfield join\n&quot;);

        designer.ebase.addView( me );
        designer.pbase.addView( pbase );
        designer.member.add(me);
        show_property();
      }

      // 自分を消去する
      public void suicide(){

dprint(&quot;xtextfield suicide\n&quot;);

        designer.ebase.removeView( me );
        if( pbase == present_property ) present_property = null;
        designer.pbase.removeView( pbase );
        designer.member.remove(me);
      }

      // プロパティを表示する
      public void show_property(){

dprint(&quot;xtextfield show property\n&quot;);

        if(present_property != null ) present_property.setVisibility(View.GONE);
        present_property = pbase;
        pbase.setVisibility(View.VISIBLE);
      }

      // X方向の位置を返す
      public int get_x(){
        return x0;
      }

      // Y方向の位置を返す
      public int get_y(){
        return y0;
      }

      // 幅を返す
      public int get_width(){
        return width;
      }

      // 高さを返す
      public int get_height(){
        return height;
      }

      // 位置・大きさを設定する
      public void setBounds( int x, int y, int wid, int hei ){

dprint(&quot;xtextfield setBounds\n&quot;);

        x0 = x;
        y0 = y;
        width = wid;
        height = hei;
        setLayoutParams( new AbsoluteLayout.LayoutParams( width, height, x0, y0 ) );
      }


      // 背景色を設定
      public void setBackground( int r, int g, int b ){
        br = r;
        bg = g;
        bb = b;
        setBackgroundColor( Color.rgb( br, bg, bb ) );
      }


      // 色を設定
      public void setForeground( int r, int g, int b ){
        fr = r;
        fg = g;
        fb = b;
        setTextColor( Color.rgb( fr, fg, fb ) );
      }


    }//~xtextfield
</codetext>
</codeclip>
<codeclip>
<ID>_C19</ID>
<x0>19</x0>
<y0>256</y0>
<width>235</width>
<height>35</height>
<codetext>    // xhslider クラス
    class xhslider extends SeekBar implements xview{
      View me;
      int x0, y0, width, height;
      int ypos;
      String[] superclass = {
        &quot;JSlider&quot;,
        &quot;JSlider&quot;,
        &quot;EHScrollBar&quot;,
        &quot;EHScrollBar&quot;,
        &quot;SeekBar&quot;,
        &quot;Slider&quot;,
        &quot;Slider&quot;,
        &quot;Slider&quot;,
        &quot;Slider&quot;,
        &quot;Slider&quot;,
        &quot;Slider&quot;,
        &quot;Slider&quot;,
        &quot;Slider&quot;,
        &quot;Slider&quot;,
        &quot;Slider&quot;,
        &quot;Slider&quot;
      };

      AbsoluteLayout pbase;
      TextView Lname;         EditText ename;        String  name;
      TextView Lforecolor;    Button   bforecolor;   int     fr, fg, fb;
      TextView Lbackcolor;    Button   bbackcolor;   int     br, bg, bb;
      TextView Lminimum;      EditText eminimum;     int     minimum;
      TextView Lmaximum;      EditText emaximum;     int     maximum;
      TextView Lseethrough;   CheckBox cseethrough;  boolean seethrough;
      TextView Lcreate_pin;   CheckBox ccreate_pin;  boolean create_pin;
      TextView Lchange_pin;   CheckBox cchange_pin;  boolean change_pin;
      TextView Lsuperclass;   EditText esuperclass;


      // 新規作成
      xhslider( String nam, int x, int y ){
        super(ACTIVITY);

dprint(&quot;new xhslider\n&quot;);

        x0         = x;
        y0         = y;
        width      = default_width;
        height     = default_height;
        name       = nam;
        fr = 0;   fg = 0;   fb = 0;
        br = 200; bg = 200; bb = 200;
        minimum    = 0;
        maximum    = 100;
        seethrough = false;
        create_pin = true;
        change_pin = true;
        init();
      }


      // Loginモードで生成(ファイルの情報をもとに生成)  
      xhslider( String str ){
        super(ACTIVITY);

dprint(&quot;new xhslider(s)\n&quot;);

        x0         = 0;
        y0         = 0;
        width      = 107;
        height     = 50;
        name       = &quot;no name&quot;;
        fr = 0;   fg = 0;   fb = 0;
        br = 200; bg = 200; bb = 200;
        minimum    = 0;
        maximum    = 100;
        seethrough = false;
        create_pin = true;
        change_pin = true;
        if( (  str.startsWith(&quot;HSLIDER&quot;) ) ){
          StringTokenizer fld = new StringTokenizer( str, &quot;;&quot; );
          String d = fld.nextToken();
          name = fld.nextToken();
          x0 = parseInt(fld.nextToken());
          y0 = parseInt(fld.nextToken());
          width  = parseInt(fld.nextToken());
          height = parseInt(fld.nextToken());
          fr = parseInt(fld.nextToken());
          fg = parseInt(fld.nextToken());
          fb = parseInt(fld.nextToken());
          br = parseInt(fld.nextToken());
          bg = parseInt(fld.nextToken());
          bb = parseInt(fld.nextToken());
          minimum = parseInt(fld.nextToken());
          maximum = parseInt(fld.nextToken());
          if( fld.hasMoreTokens() ) seethrough  = (parseInt(fld.nextToken())==0);
          if( fld.hasMoreTokens() ) create_pin  = (parseInt(fld.nextToken())!=0);
          if( fld.hasMoreTokens() ) change_pin  = (parseInt(fld.nextToken())!=0);
          if( fld.hasMoreTokens() ) superclass[ApplicationType] = fld.nextToken();
        }
        init();
      }


      // 初期化共通部  
      private void init(){

dprint(&quot;xhslider init\n&quot;);

        pbase = new AbsoluteLayout(ACTIVITY);
        me = this;
        setFocusable(true);
        setFocusableInTouchMode(true);
        ypos = 0;
        Lname = new TextView(ACTIVITY);
        Lname.setPadding(1, 1, 1, 1);
        Lname.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lname.setTextColor( Color.rgb( 0, 0, 0 ));
        Lname.setTextSize( FSIZE );
        Lname.setText(&quot;名前&quot;);
        Lname.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lname );

        ename = new EditText(ACTIVITY);
        ename.setPadding(1, 1, 1, 1);
        ename.setGravity(Gravity.LEFT|Gravity.CENTER);
        ename.setTextSize( FSIZE );
        ename.setTextColor( Color.rgb( 0, 0, 0 ));
        ename.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        ename.setText( name );
        ename.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        ename.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              name = get_text(ename);
              resize();
              ename.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( ename );
        ypos+=item_hei+3;

        Lforecolor = new TextView(ACTIVITY);
        Lforecolor.setPadding(1, 1, 1, 1);
        Lforecolor.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lforecolor.setTextColor( Color.rgb( 0, 0, 0 ));
        Lforecolor.setTextSize( FSIZE );
        Lforecolor.setText(&quot;色&quot;);
        Lforecolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lforecolor );

        bforecolor = new Button(ACTIVITY);
        bforecolor.setPadding(1, 1, 1, 1);
        bforecolor.setGravity(Gravity.CENTER|Gravity.CENTER);
        bforecolor.setTextSize( FSIZE );
        bforecolor.setTextColor( Color.rgb( 0, 0, 0 ));
        bforecolor.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        bforecolor.setText( &quot;変える&quot; );
        bforecolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        bforecolor.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ xhandler(me,&quot;forecolor&quot;);}
        });
        pbase.addView( bforecolor );
        ypos+=item_hei+3;

        Lbackcolor = new TextView(ACTIVITY);
        Lbackcolor.setPadding(1, 1, 1, 1);
        Lbackcolor.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lbackcolor.setTextColor( Color.rgb( 0, 0, 0 ));
        Lbackcolor.setTextSize( FSIZE );
        Lbackcolor.setText(&quot;背景の色&quot;);
        Lbackcolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lbackcolor );

        bbackcolor = new Button(ACTIVITY);
        bbackcolor.setPadding(1, 1, 1, 1);
        bbackcolor.setGravity(Gravity.CENTER|Gravity.CENTER);
        bbackcolor.setTextSize( FSIZE );
        bbackcolor.setTextColor( Color.rgb( 0, 0, 0 ) );
        bbackcolor.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        bbackcolor.setText( &quot;変える&quot; );
        bbackcolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        bbackcolor.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ xhandler(me,&quot;backcolor&quot;);}
        });
        pbase.addView( bbackcolor );
        ypos+=item_hei+3;

        Lminimum = new TextView(ACTIVITY);
        Lminimum.setPadding(1, 1, 1, 1);
        Lminimum.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lminimum.setTextColor( Color.rgb( 0, 0, 0 ));
        Lminimum.setTextSize( FSIZE );
        Lminimum.setText(&quot;最小値&quot;);
        Lminimum.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lminimum );

        eminimum = new EditText(ACTIVITY);
        eminimum.setPadding(1, 1, 1, 1);
        eminimum.setGravity(Gravity.LEFT|Gravity.CENTER);
        eminimum.setTextSize( FSIZE );
        eminimum.setTextColor( Color.rgb( 0, 0, 0 ));
        eminimum.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        eminimum.setText( &quot;&quot;+minimum );
        eminimum.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        eminimum.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              minimum = parseInt( get_text(eminimum) );
              resize();
              eminimum.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( eminimum );
        ypos+=item_hei+3;

        Lmaximum = new TextView(ACTIVITY);
        Lmaximum.setPadding(1, 1, 1, 1);
        Lmaximum.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lmaximum.setTextColor( Color.rgb( 0, 0, 0 ));
        Lmaximum.setTextSize( FSIZE );
        Lmaximum.setText(&quot;最大値&quot;);
        Lmaximum.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lmaximum );

        emaximum = new EditText(ACTIVITY);
        emaximum.setPadding(1, 1, 1, 1);
        emaximum.setGravity(Gravity.LEFT|Gravity.CENTER);
        emaximum.setTextSize( FSIZE );
        emaximum.setTextColor( Color.rgb( 0, 0, 0 ));
        emaximum.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        emaximum.setText( &quot;&quot;+maximum );
        emaximum.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        emaximum.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              maximum = parseInt( get_text(emaximum) );
              resize();
              emaximum.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( emaximum );
        ypos+=item_hei+3;

        Lseethrough = new TextView(ACTIVITY);
        Lseethrough.setPadding(1, 1, 1, 1);
        Lseethrough.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lseethrough.setTextColor( Color.rgb( 0, 0, 0 ));
        Lseethrough.setTextSize( FSIZE );
        Lseethrough.setText(&quot;透明コンポーネント&quot;);
        Lseethrough.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lseethrough );

        cseethrough = new CheckBox(ACTIVITY);
        cseethrough.setPadding(1, 1, 1, 1);
        cseethrough.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        cseethrough.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        cseethrough.setChecked( seethrough );
        pbase.addView( cseethrough );
        ypos+=item_hei+3;

        Lcreate_pin = new TextView(ACTIVITY);
        Lcreate_pin.setPadding(1, 1, 1, 1);
        Lcreate_pin.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lcreate_pin.setTextColor( Color.rgb( 0, 0, 0 ));
        Lcreate_pin.setTextSize( FSIZE );
        Lcreate_pin.setText(&quot;createdピンを表示&quot;);
        Lcreate_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lcreate_pin );

        ccreate_pin = new CheckBox(ACTIVITY);
        ccreate_pin.setPadding(1, 1, 1, 1);
        ccreate_pin.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        ccreate_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        ccreate_pin.setChecked( create_pin );
        pbase.addView( ccreate_pin );
        ypos+=item_hei+3;

        Lchange_pin = new TextView(ACTIVITY);
        Lchange_pin.setPadding(1, 1, 1, 1);
        Lchange_pin.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lchange_pin.setTextColor( Color.rgb( 0, 0, 0 ));
        Lchange_pin.setTextSize( FSIZE );
        Lchange_pin.setText(&quot;changedピンを表示&quot;);
        Lchange_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lchange_pin );

        cchange_pin = new CheckBox(ACTIVITY);
        cchange_pin.setPadding(1, 1, 1, 1);
        cchange_pin.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        cchange_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        cchange_pin.setChecked( change_pin );
        pbase.addView( cchange_pin );
        ypos+=item_hei+3;

        Lsuperclass = new TextView(ACTIVITY);
        Lsuperclass.setPadding(1, 1, 1, 1);
        Lsuperclass.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lsuperclass.setTextColor( Color.rgb( 0, 0, 0 ));
        Lsuperclass.setTextSize( FSIZE );
        Lsuperclass.setText(&quot;スーパークラス&quot;);
        Lsuperclass.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lsuperclass );

        esuperclass = new EditText(ACTIVITY);
        esuperclass.setPadding(1, 1, 1, 1);
        esuperclass.setGravity(Gravity.LEFT|Gravity.CENTER);
        esuperclass.setTextSize( FSIZE );
        esuperclass.setTextColor( Color.rgb( 0, 0, 0 ));
        esuperclass.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        esuperclass.setText( superclass[ApplicationType] );
        esuperclass.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        esuperclass.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              superclass[ApplicationType] = get_text(esuperclass);
              resize();
              esuperclass.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( esuperclass );
        ypos+=item_hei+3;

        me.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              me.requestFocus();
              xhandler(me,&quot;touch&quot;);
            }
            return true;
          }
        });
        me.setOnKeyListener( new View.OnKeyListener(){
          @Override
          public boolean onKey(View v, int keyCode, KeyEvent event) {
            if (event.getAction() == KeyEvent.ACTION_DOWN) {
              key_code = keyCode;
              xhandler(me,&quot;keyinput&quot;);
            }
            return true;
          }
        });
        pbase.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid * 2+10, ypos+180, 0, vpos ) );
        resize();

      }

      // サイズ調整する
      public void resize(){

dprint(&quot;xhslider resize\n&quot;);
//      setTextColor( Color.rgb( fr, fg, fb ));
        setBackgroundColor( Color.rgb( br, bg, bb ));
        setLayoutParams( new AbsoluteLayout.LayoutParams( width, height, x0, y0 ) );
        setProgress( minimum );
        setMax( maximum );
      }

      // 各パラメータをセットする
      public void set_params(){

dprint(&quot;xhslider set_prams\n&quot;);

        name = get_text(ename);
        seethrough = cseethrough.isChecked();
        create_pin = ccreate_pin.isChecked();
        change_pin = cchange_pin.isChecked();
        superclass[ApplicationType] = get_text(esuperclass);
      }

      // 各パラメータを返す
      public String get_params(){

dprint(&quot;xhslider get_prams\n&quot;);

        return
          &quot;HSLIDER;&quot;  +
          name +&quot;;&quot; +
          x0 + &quot;;&quot; + y0 + &quot;;&quot; + width + &quot;;&quot; + height + &quot;;&quot; +
          fr + &quot;;&quot; + fg + &quot;;&quot; + fb + &quot;;&quot; +
          br + &quot;;&quot; + bg + &quot;;&quot; + bb + &quot;;&quot; +
          minimum +&quot;;&quot; + maximum + &quot;;&quot; +
          (seethrough? 0:1) +&quot;;&quot;+
          (create_pin? 1:0) +&quot;;&quot;+
          (change_pin? 1:0) +&quot;;&quot;+
          superclass[ApplicationType]  + &quot;;&quot;
        ;
      }

      // 自分を追加する
      public void join(){

dprint(&quot;xhslider join\n&quot;);

        designer.ebase.addView( me );
        designer.pbase.addView( pbase );
        designer.member.add(me);
        show_property();
      }

      // 自分を消去する
      public void suicide(){

dprint(&quot;xhslider suicide\n&quot;);

        designer.ebase.removeView( me );
        if( pbase == present_property ) present_property = null;
        designer.pbase.removeView( pbase );
        designer.member.remove(me);
      }

      // プロパティを表示する
      public void show_property(){

dprint(&quot;xhslider show property\n&quot;);

        if(present_property != null ) present_property.setVisibility(View.GONE);
        present_property = pbase;
        pbase.setVisibility(View.VISIBLE);
      }

      // X方向の位置を返す
      public int get_x(){
        return x0;
      }

      // Y方向の位置を返す
      public int get_y(){
        return y0;
      }

      // 幅を返す
      public int get_width(){
        return width;
      }

      // 高さを返す
      public int get_height(){
        return height;
      }

      // 位置・大きさを設定する
      public void setBounds( int x, int y, int wid, int hei ){

dprint(&quot;xhslider setBounds\n&quot;);

        x0 = x;
        y0 = y;
        width = wid;
        height = hei;
        setLayoutParams( new AbsoluteLayout.LayoutParams( width, height, x0, y0 ) );
      }

      // 背景色を設定
      public void setBackground( int r, int g, int b ){
        br = r;
        bg = g;
        bb = b;
        setBackgroundColor( Color.rgb( br, bg, bb ) );
      }


      // 色を設定
      public void setForeground( int r, int g, int b ){
        fr = r;
        fg = g;
        fb = b;
//      setTextColor( Color.rgb( fr, fg, fb ) );
      }


    }//~xhslider
</codetext>
</codeclip>
<codeclip>
<ID>_C20</ID>
<x0>16</x0>
<y0>305</y0>
<width>235</width>
<height>35</height>
<codetext>    // xvslider クラス
    class xvslider extends SeekBar implements xview{
      View me;
      int x0, y0, width, height;
      int ypos;
      String[] superclass = {
        &quot;JSlider&quot;,
        &quot;JSlider&quot;,
        &quot;EVScrollBar&quot;,
        &quot;EVScrollBar&quot;,
        &quot;SeekBar&quot;,
        &quot;Slider&quot;,
        &quot;Slider&quot;,
        &quot;Slider&quot;,
        &quot;Slider&quot;,
        &quot;Slider&quot;,
        &quot;Slider&quot;,
        &quot;Slider&quot;,
        &quot;Slider&quot;,
        &quot;Slider&quot;,
        &quot;Slider&quot;,
        &quot;Slider&quot;
      };

      AbsoluteLayout pbase;
      TextView Lname;         EditText ename;        String  name;
      TextView Lforecolor;    Button   bforecolor;   int     fr, fg, fb;
      TextView Lbackcolor;    Button   bbackcolor;   int     br, bg, bb;
      TextView Lminimum;      EditText eminimum;     int     minimum;
      TextView Lmaximum;      EditText emaximum;     int     maximum;
      TextView Lseethrough;   CheckBox cseethrough;  boolean seethrough;
      TextView Lcreate_pin;   CheckBox ccreate_pin;  boolean create_pin;
      TextView Lchange_pin;   CheckBox cchange_pin;  boolean change_pin;
      TextView Lsuperclass;   EditText esuperclass;


      // 新規作成
      xvslider( String nam, int x, int y ){
        super(ACTIVITY);

dprint(&quot;new xvslider\n&quot;);

        x0         = x;
        y0         = y;
        width      = default_width;
        height     = default_height;
        name       = nam;
        fr = 0;   fg = 0;   fb = 0;
        br = 200; bg = 200; bb = 200;
        minimum   = 0;
        maximum   = 100;
        seethrough = false;
        create_pin = true;
        change_pin = true;
        init();
      }


      // Loginモードで生成(ファイルの情報をもとに生成)  
      xvslider( String str ){
        super(ACTIVITY);

dprint(&quot;new xvslider(s)\n&quot;);

        x0         = 0;
        y0         = 0;
        width      = 107;
        height     = 50;
        name       = &quot;no name&quot;;
        fr = 0;   fg = 0;   fb = 0;
        br = 200; bg = 200; bb = 200;
        minimum   = 0;
        maximum   = 100;
        seethrough = false;
        create_pin = true;
        change_pin = true;
        if( (  str.startsWith(&quot;VSLIDER&quot;) ) ){
          StringTokenizer fld = new StringTokenizer( str, &quot;;&quot; );
          String d = fld.nextToken();
          name = fld.nextToken();
          x0 = parseInt(fld.nextToken());
          y0 = parseInt(fld.nextToken());
          width  = parseInt(fld.nextToken());
          height = parseInt(fld.nextToken());
          fr = parseInt(fld.nextToken());
          fg = parseInt(fld.nextToken());
          fb = parseInt(fld.nextToken());
          br = parseInt(fld.nextToken());
          bg = parseInt(fld.nextToken());
          bb = parseInt(fld.nextToken());
          minimum = parseInt(fld.nextToken());
          maximum = parseInt(fld.nextToken());
          if( fld.hasMoreTokens() ) seethrough  = (parseInt(fld.nextToken())==0);
          if( fld.hasMoreTokens() ) create_pin  = (parseInt(fld.nextToken())!=0);
          if( fld.hasMoreTokens() ) change_pin  = (parseInt(fld.nextToken())!=0);
          if( fld.hasMoreTokens() ) superclass[ApplicationType] = fld.nextToken();
        }
        init();
      }


      // 初期化共通部  
      private void init(){

dprint(&quot;xvslider init\n&quot;);

        pbase = new AbsoluteLayout(ACTIVITY);
        me = this;
        setFocusable(true);
        setFocusableInTouchMode(true);
        ypos = 0;
        Lname = new TextView(ACTIVITY);
        Lname.setPadding(1, 1, 1, 1);
        Lname.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lname.setTextColor( Color.rgb( 0, 0, 0 ));
        Lname.setTextSize( FSIZE );
        Lname.setText(&quot;名前&quot;);
        Lname.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lname );

        ename = new EditText(ACTIVITY);
        ename.setPadding(1, 1, 1, 1);
        ename.setGravity(Gravity.LEFT|Gravity.CENTER);
        ename.setTextSize( FSIZE );
        ename.setTextColor( Color.rgb( 0, 0, 0 ));
        ename.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        ename.setText( name );
        ename.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        ename.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              name = get_text(ename);
              resize();
              ename.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( ename );
        ypos+=item_hei+3;

        Lforecolor = new TextView(ACTIVITY);
        Lforecolor.setPadding(1, 1, 1, 1);
        Lforecolor.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lforecolor.setTextColor( Color.rgb( 0, 0, 0 ));
        Lforecolor.setTextSize( FSIZE );
        Lforecolor.setText(&quot;色&quot;);
        Lforecolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lforecolor );

        bforecolor = new Button(ACTIVITY);
        bforecolor.setPadding(1, 1, 1, 1);
        bforecolor.setGravity(Gravity.CENTER|Gravity.CENTER);
        bforecolor.setTextSize( FSIZE );
        bforecolor.setTextColor( Color.rgb( 0, 0, 0 ));
        bforecolor.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        bforecolor.setText( &quot;変える&quot; );
        bforecolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        bforecolor.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ xhandler(me,&quot;forecolor&quot;);}
        });
        pbase.addView( bforecolor );
        ypos+=item_hei+3;

        Lbackcolor = new TextView(ACTIVITY);
        Lbackcolor.setPadding(1, 1, 1, 1);
        Lbackcolor.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lbackcolor.setTextColor( Color.rgb( 0, 0, 0 ));
        Lbackcolor.setTextSize( FSIZE );
        Lbackcolor.setText(&quot;背景の色&quot;);
        Lbackcolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lbackcolor );

        bbackcolor = new Button(ACTIVITY);
        bbackcolor.setPadding(1, 1, 1, 1);
        bbackcolor.setGravity(Gravity.CENTER|Gravity.CENTER);
        bbackcolor.setTextSize( FSIZE );
        bbackcolor.setTextColor( Color.rgb( 0, 0, 0 ) );
        bbackcolor.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        bbackcolor.setText( &quot;変える&quot; );
        bbackcolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        bbackcolor.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ xhandler(me,&quot;backcolor&quot;);}
        });
        pbase.addView( bbackcolor );
        ypos+=item_hei+3;

        Lminimum = new TextView(ACTIVITY);
        Lminimum.setPadding(1, 1, 1, 1);
        Lminimum.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lminimum.setTextColor( Color.rgb( 0, 0, 0 ));
        Lminimum.setTextSize( FSIZE );
        Lminimum.setText(&quot;最小値&quot;);
        Lminimum.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lminimum );

        eminimum = new EditText(ACTIVITY);
        eminimum.setPadding(1, 1, 1, 1);
        eminimum.setGravity(Gravity.LEFT|Gravity.CENTER);
        eminimum.setTextSize( FSIZE );
        eminimum.setTextColor( Color.rgb( 0, 0, 0 ));
        eminimum.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        eminimum.setText( &quot;&quot;+minimum );
        eminimum.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        eminimum.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              minimum = parseInt( get_text(eminimum) );
              resize();
              eminimum.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( eminimum );
        ypos+=item_hei+3;

        Lmaximum = new TextView(ACTIVITY);
        Lmaximum.setPadding(1, 1, 1, 1);
        Lmaximum.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lmaximum.setTextColor( Color.rgb( 0, 0, 0 ));
        Lmaximum.setTextSize( FSIZE );
        Lmaximum.setText(&quot;最大値&quot;);
        Lmaximum.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lmaximum );

        emaximum = new EditText(ACTIVITY);
        emaximum.setPadding(1, 1, 1, 1);
        emaximum.setGravity(Gravity.LEFT|Gravity.CENTER);
        emaximum.setTextSize( FSIZE );
        emaximum.setTextColor( Color.rgb( 0, 0, 0 ));
        emaximum.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        emaximum.setText( &quot;&quot;+maximum );
        emaximum.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        emaximum.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              maximum = parseInt( get_text(emaximum) );
              resize();
              emaximum.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( emaximum );
        ypos+=item_hei+3;

        Lseethrough = new TextView(ACTIVITY);
        Lseethrough.setPadding(1, 1, 1, 1);
        Lseethrough.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lseethrough.setTextColor( Color.rgb( 0, 0, 0 ));
        Lseethrough.setTextSize( FSIZE );
        Lseethrough.setText(&quot;透明コンポーネント&quot;);
        Lseethrough.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lseethrough );

        cseethrough = new CheckBox(ACTIVITY);
        cseethrough.setPadding(1, 1, 1, 1);
        cseethrough.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        cseethrough.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        cseethrough.setChecked( seethrough );
        pbase.addView( cseethrough );
        ypos+=item_hei+3;

        Lcreate_pin = new TextView(ACTIVITY);
        Lcreate_pin.setPadding(1, 1, 1, 1);
        Lcreate_pin.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lcreate_pin.setTextColor( Color.rgb( 0, 0, 0 ));
        Lcreate_pin.setTextSize( FSIZE );
        Lcreate_pin.setText(&quot;createdピンを表示&quot;);
        Lcreate_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lcreate_pin );

        ccreate_pin = new CheckBox(ACTIVITY);
        ccreate_pin.setPadding(1, 1, 1, 1);
        ccreate_pin.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        ccreate_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        ccreate_pin.setChecked( create_pin );
        pbase.addView( ccreate_pin );
        ypos+=item_hei+3;

        Lchange_pin = new TextView(ACTIVITY);
        Lchange_pin.setPadding(1, 1, 1, 1);
        Lchange_pin.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lchange_pin.setTextColor( Color.rgb( 0, 0, 0 ));
        Lchange_pin.setTextSize( FSIZE );
        Lchange_pin.setText(&quot;changedピンを表示&quot;);
        Lchange_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lchange_pin );

        cchange_pin = new CheckBox(ACTIVITY);
        cchange_pin.setPadding(1, 1, 1, 1);
        cchange_pin.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        cchange_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        cchange_pin.setChecked( change_pin );
        pbase.addView( cchange_pin );
        ypos+=item_hei+3;

        Lsuperclass = new TextView(ACTIVITY);
        Lsuperclass.setPadding(1, 1, 1, 1);
        Lsuperclass.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lsuperclass.setTextColor( Color.rgb( 0, 0, 0 ));
        Lsuperclass.setTextSize( FSIZE );
        Lsuperclass.setText(&quot;スーパークラス&quot;);
        Lsuperclass.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lsuperclass );

        esuperclass = new EditText(ACTIVITY);
        esuperclass.setPadding(1, 1, 1, 1);
        esuperclass.setGravity(Gravity.LEFT|Gravity.CENTER);
        esuperclass.setTextSize( FSIZE );
        esuperclass.setTextColor( Color.rgb( 0, 0, 0 ));
        esuperclass.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        esuperclass.setText( superclass[ApplicationType] );
        esuperclass.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        esuperclass.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              superclass[ApplicationType] = get_text(esuperclass);
              resize();
              esuperclass.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( esuperclass );
        ypos+=item_hei+3;

        me.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              me.requestFocus();
              xhandler(me,&quot;touch&quot;);
            }
            return true;
          }
        });
        me.setOnKeyListener( new View.OnKeyListener(){
          @Override
          public boolean onKey(View v, int keyCode, KeyEvent event) {
            if (event.getAction() == KeyEvent.ACTION_DOWN) {
              key_code = keyCode;
              xhandler(me,&quot;keyinput&quot;);
            }
            return true;
          }
        });
        pbase.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid * 2+10, ypos+180, 0, vpos ) );
        resize();

      }

      // サイズ調整する
      public void resize(){

dprint(&quot;xvslider resize\n&quot;);
//      setTextColor( Color.rgb( fr, fg, fb ));
        setBackgroundColor( Color.rgb( br, bg, bb ));
        setLayoutParams( new AbsoluteLayout.LayoutParams( width, height, x0, y0 ) );
        setProgress( minimum );
        setMax( maximum );
      }

      // 各パラメータをセットする
      public void set_params(){

dprint(&quot;xvslider set_prams\n&quot;);

        name = get_text(ename);
        seethrough = cseethrough.isChecked();
        create_pin = ccreate_pin.isChecked();
        change_pin = cchange_pin.isChecked();
        superclass[ApplicationType] = get_text(esuperclass);
      }

      // 各パラメータを返す
      public String get_params(){

dprint(&quot;xvslider get_prams\n&quot;);

        return
          &quot;VSLIDER;&quot;  +
          name +&quot;;&quot; +
          x0 + &quot;;&quot; + y0 + &quot;;&quot; + width + &quot;;&quot; + height + &quot;;&quot; +
          fr + &quot;;&quot; + fg + &quot;;&quot; + fb + &quot;;&quot; +
          br + &quot;;&quot; + bg + &quot;;&quot; + bb + &quot;;&quot; +
          minimum +&quot;;&quot; + maximum + &quot;;&quot; +
          (seethrough? 0:1) +&quot;;&quot;+
          (create_pin? 1:0) +&quot;;&quot;+
          (change_pin? 1:0) +&quot;;&quot;+
          superclass[ApplicationType]  + &quot;;&quot;
        ;
      }

      // 自分を追加する
      public void join(){

dprint(&quot;xvslider join\n&quot;);

        designer.ebase.addView( me );
        designer.pbase.addView( pbase );
        designer.member.add(me);
        show_property();
      }

      // 自分を消去する
      public void suicide(){

dprint(&quot;xvslider suicide\n&quot;);

        designer.ebase.removeView( me );
        if( pbase == present_property ) present_property = null;
        designer.pbase.removeView( pbase );
        designer.member.remove(me);
      }

      // プロパティを表示する
      public void show_property(){

dprint(&quot;xvslider show property\n&quot;);

        if(present_property != null ) present_property.setVisibility(View.GONE);
        present_property = pbase;
        pbase.setVisibility(View.VISIBLE);
      }

      // X方向の位置を返す
      public int get_x(){
        return x0;
      }

      // Y方向の位置を返す
      public int get_y(){
        return y0;
      }

      // 幅を返す
      public int get_width(){
        return width;
      }

      // 高さを返す
      public int get_height(){
        return height;
      }

      // 位置・大きさを設定する
      public void setBounds( int x, int y, int wid, int hei ){

dprint(&quot;xvslider setBounds\n&quot;);

        x0 = x;
        y0 = y;
        width = wid;
        height = hei;
        setLayoutParams( new AbsoluteLayout.LayoutParams( width, height, x0, y0 ) );
      }

      // 背景色を設定
      public void setBackground( int r, int g, int b ){
        br = r;
        bg = g;
        bb = b;
        setBackgroundColor( Color.rgb( br, bg, bb ) );
      }


      // 色を設定
      public void setForeground( int r, int g, int b ){
        fr = r;
        fg = g;
        fb = b;
//      setTextColor( Color.rgb( fr, fg, fb ) );
      }


    }//~xvslider
</codetext>
</codeclip>
<codeclip>
<ID>_C23</ID>
<x0>15</x0>
<y0>354</y0>
<width>262</width>
<height>35</height>
<codetext>    // xcheckbox クラス
    class xcheckbox extends CheckBox implements xview{
      View me;
      int x0, y0, width, height;
      int ypos;
      String[] superclass = {
        &quot;JCheckBox&quot;,
        &quot;JCheckBox&quot;,
        &quot;EChecBox&quot;,
        &quot;ECheckbox&quot;,
        &quot;CheckBox&quot;,
        &quot;CheckBox&quot;,
        &quot;CheckBox&quot;,
        &quot;CheckBox&quot;,
        &quot;CheckBox&quot;,
        &quot;CheckBox&quot;,
        &quot;CheckBox&quot;,
        &quot;CheckBox&quot;,
        &quot;CheckBox&quot;,
        &quot;CheckBox&quot;,
        &quot;CheckBox&quot;,
        &quot;CheckBox&quot;
      };

      AbsoluteLayout pbase;
      TextView Lname;         EditText ename;        String  name;
      TextView Lforecolor;    Button   bforecolor;   int     fr, fg, fb;
      TextView Lbackcolor;    Button   bbackcolor;   int     br, bg, bb;
      TextView Lseethrough;   CheckBox cseethrough;  boolean seethrough;
      TextView Lcreate_pin;   CheckBox ccreate_pin;  boolean create_pin;
      TextView Lcheck_pin;    CheckBox ccheck_pin;   boolean check_pin;
      TextView Lsuperclass;   EditText esuperclass;


      // 新規作成
      xcheckbox( String nam, int x, int y ){
        super(ACTIVITY);

dprint(&quot;new xcheckbox\n&quot;);

        x0         = x;
        y0         = y;
        width      = default_width;
        height     = default_height;
        name       = nam;
        fr = 0;   fg = 0;   fb = 0;
        br = 200; bg = 200; bb = 200;
        seethrough = false;
        create_pin = true;
        check_pin  = true;
        init();
      }


      // Loginモードで生成(ファイルの情報をもとに生成)  
      xcheckbox( String str ){
        super(ACTIVITY);

dprint(&quot;new xcheckbox(s)\n&quot;);

        x0         = 0;
        y0         = 0;
        width      = 107;
        height     = 50;
        name       = &quot;no name&quot;;
        fr = 0;   fg = 0;   fb = 0;
        br = 200; bg = 200; bb = 200;
        seethrough = false;
        create_pin = true;
        check_pin  = true;
        if( (  str.startsWith(&quot;CHECKBOX&quot;) ) ){
          StringTokenizer fld = new StringTokenizer( str, &quot;;&quot; );
          String d = fld.nextToken();
          name = fld.nextToken();
          setChecked(parseInt(fld.nextToken())!=0);
          x0 = parseInt(fld.nextToken());
          y0 = parseInt(fld.nextToken());
          width  = parseInt(fld.nextToken());
          height = parseInt(fld.nextToken());
          fr = parseInt(fld.nextToken());
          fg = parseInt(fld.nextToken());
          fb = parseInt(fld.nextToken());
          br = parseInt(fld.nextToken());
          bg = parseInt(fld.nextToken());
          bb = parseInt(fld.nextToken());
          if( fld.hasMoreTokens() ) seethrough  = (parseInt(fld.nextToken())==0);
          if( fld.hasMoreTokens() ) create_pin  = (parseInt(fld.nextToken())!=0);
          if( fld.hasMoreTokens() ) check_pin   = (parseInt(fld.nextToken())!=0);
          if( fld.hasMoreTokens() ) superclass[ApplicationType] = fld.nextToken();
        }
        init();
      }


      // 初期化共通部  
      private void init(){

dprint(&quot;xcheckbox init\n&quot;);

        pbase = new AbsoluteLayout(ACTIVITY);
        me = this;
        setFocusable(true);
        setFocusableInTouchMode(true);
        ypos = 0;
        Lname = new TextView(ACTIVITY);
        Lname.setPadding(1, 1, 1, 1);
        Lname.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lname.setTextColor( Color.rgb( 0, 0, 0 ));
        Lname.setTextSize( FSIZE );
        Lname.setText(&quot;名前&quot;);
        Lname.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lname );

        ename = new EditText(ACTIVITY);
        ename.setPadding(1, 1, 1, 1);
        ename.setGravity(Gravity.LEFT|Gravity.CENTER);
        ename.setTextSize( FSIZE );
        ename.setTextColor( Color.rgb( 0, 0, 0 ));
        ename.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        ename.setText( name );
        ename.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        ename.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              name = get_text(ename);
              resize();
              ename.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( ename );
        ypos+=item_hei+3;

        Lforecolor = new TextView(ACTIVITY);
        Lforecolor.setPadding(1, 1, 1, 1);
        Lforecolor.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lforecolor.setTextColor( Color.rgb( 0, 0, 0 ));
        Lforecolor.setTextSize( FSIZE );
        Lforecolor.setText(&quot;色&quot;);
        Lforecolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lforecolor );

        bforecolor = new Button(ACTIVITY);
        bforecolor.setPadding(1, 1, 1, 1);
        bforecolor.setGravity(Gravity.CENTER|Gravity.CENTER);
        bforecolor.setTextSize( FSIZE );
        bforecolor.setTextColor( Color.rgb( 0, 0, 0 ));
        bforecolor.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        bforecolor.setText( &quot;変える&quot; );
        bforecolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        bforecolor.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ xhandler(me,&quot;forecolor&quot;);}
        });
        pbase.addView( bforecolor );
        ypos+=item_hei+3;

        Lbackcolor = new TextView(ACTIVITY);
        Lbackcolor.setPadding(1, 1, 1, 1);
        Lbackcolor.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lbackcolor.setTextColor( Color.rgb( 0, 0, 0 ));
        Lbackcolor.setTextSize( FSIZE );
        Lbackcolor.setText(&quot;背景の色&quot;);
        Lbackcolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lbackcolor );

        bbackcolor = new Button(ACTIVITY);
        bbackcolor.setPadding(1, 1, 1, 1);
        bbackcolor.setGravity(Gravity.CENTER|Gravity.CENTER);
        bbackcolor.setTextSize( FSIZE );
        bbackcolor.setTextColor( Color.rgb( 0, 0, 0 ) );
        bbackcolor.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        bbackcolor.setText( &quot;変える&quot; );
        bbackcolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        bbackcolor.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ xhandler(me,&quot;backcolor&quot;);}
        });
        pbase.addView( bbackcolor );
        ypos+=item_hei+3;

        Lseethrough = new TextView(ACTIVITY);
        Lseethrough.setPadding(1, 1, 1, 1);
        Lseethrough.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lseethrough.setTextColor( Color.rgb( 0, 0, 0 ));
        Lseethrough.setTextSize( FSIZE );
        Lseethrough.setText(&quot;透明コンポーネント&quot;);
        Lseethrough.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lseethrough );

        cseethrough = new CheckBox(ACTIVITY);
        cseethrough.setPadding(1, 1, 1, 1);
        cseethrough.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        cseethrough.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        cseethrough.setChecked( seethrough );
        pbase.addView( cseethrough );
        ypos+=item_hei+3;

        Lcreate_pin = new TextView(ACTIVITY);
        Lcreate_pin.setPadding(1, 1, 1, 1);
        Lcreate_pin.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lcreate_pin.setTextColor( Color.rgb( 0, 0, 0 ));
        Lcreate_pin.setTextSize( FSIZE );
        Lcreate_pin.setText(&quot;createdピンを表示&quot;);
        Lcreate_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lcreate_pin );

        ccreate_pin = new CheckBox(ACTIVITY);
        ccreate_pin.setPadding(1, 1, 1, 1);
        ccreate_pin.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        ccreate_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        ccreate_pin.setChecked( create_pin );
        pbase.addView( ccreate_pin );
        ypos+=item_hei+3;

        Lcheck_pin = new TextView(ACTIVITY);
        Lcheck_pin.setPadding(1, 1, 1, 1);
        Lcheck_pin.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lcheck_pin.setTextColor( Color.rgb( 0, 0, 0 ));
        Lcheck_pin.setTextSize( FSIZE );
        Lcheck_pin.setText(&quot;chckedピンを表示&quot;);
        Lcheck_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lcheck_pin );

        ccheck_pin = new CheckBox(ACTIVITY);
        ccheck_pin.setPadding(1, 1, 1, 1);
        ccheck_pin.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        ccheck_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        ccheck_pin.setChecked( check_pin );
        pbase.addView( ccheck_pin );
        ypos+=item_hei+3;

        Lsuperclass = new TextView(ACTIVITY);
        Lsuperclass.setPadding(1, 1, 1, 1);
        Lsuperclass.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lsuperclass.setTextColor( Color.rgb( 0, 0, 0 ));
        Lsuperclass.setTextSize( FSIZE );
        Lsuperclass.setText(&quot;スーパークラス&quot;);
        Lsuperclass.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lsuperclass );

        esuperclass = new EditText(ACTIVITY);
        esuperclass.setPadding(1, 1, 1, 1);
        esuperclass.setGravity(Gravity.LEFT|Gravity.CENTER);
        esuperclass.setTextSize( FSIZE );
        esuperclass.setTextColor( Color.rgb( 0, 0, 0 ));
        esuperclass.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        esuperclass.setText( superclass[ApplicationType] );
        esuperclass.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        esuperclass.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              superclass[ApplicationType] = get_text(esuperclass);
              resize();
              esuperclass.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( esuperclass );
        ypos+=item_hei+3;

        me.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              setChecked( !isChecked() );
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              me.requestFocus();
              xhandler(me,&quot;touch&quot;);
            }
            return true;
          }
        });
        me.setOnKeyListener( new View.OnKeyListener(){
          @Override
          public boolean onKey(View v, int keyCode, KeyEvent event) {
            if (event.getAction() == KeyEvent.ACTION_DOWN) {
              key_code = keyCode;
              xhandler(me,&quot;keyinput&quot;);
            }
            return true;
          }
        });
        pbase.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid * 2+10, ypos+180, 0, vpos ) );
        resize();

      }

      // サイズ調整する
      public void resize(){

dprint(&quot;xcheckbox resize\n&quot;);
        setTextColor( Color.rgb( fr, fg, fb ));
        setBackgroundColor( Color.rgb( br, bg, bb ));
        setLayoutParams( new AbsoluteLayout.LayoutParams( width, height, x0, y0 ) );
      }

      // 各パラメータをセットする
      public void set_params(){

dprint(&quot;xcheckbox set_prams\n&quot;);

        name = get_text(ename);
        seethrough = cseethrough.isChecked();
        create_pin = ccreate_pin.isChecked();
        check_pin  = ccheck_pin.isChecked();
        superclass[ApplicationType] = get_text(esuperclass);
      }

      // 各パラメータを返す
      public String get_params(){

dprint(&quot;xcheckbox get_prams\n&quot;);

        return
          &quot;CHECKBOX;&quot;  +
          name +&quot;;&quot; +
          (isChecked()?1:0) + &quot;;&quot; +
          x0 + &quot;;&quot; + y0 + &quot;;&quot; + width + &quot;;&quot; + height + &quot;;&quot; +
          fr + &quot;;&quot; + fg + &quot;;&quot; + fb + &quot;;&quot; +
          br + &quot;;&quot; + bg + &quot;;&quot; + bb + &quot;;&quot; +
          (seethrough?0:1) +&quot;;&quot;+
          (create_pin?1:0) +&quot;;&quot;+
          (check_pin? 1:0) +&quot;;&quot;+
          superclass[ApplicationType]  + &quot;;&quot;
        ;
      }

      // 自分を追加する
      public void join(){

dprint(&quot;xcheckbox join\n&quot;);

        designer.ebase.addView( me );
        designer.pbase.addView( pbase );
        designer.member.add(me);
        show_property();
      }

      // 自分を消去する
      public void suicide(){

dprint(&quot;xcheckbox suicide\n&quot;);

        designer.ebase.removeView( me );
        if( pbase == present_property ) present_property = null;
        designer.pbase.removeView( pbase );
        designer.member.remove(me);
      }

      // プロパティを表示する
      public void show_property(){

dprint(&quot;xcheckbox show property\n&quot;);

        if(present_property != null ) present_property.setVisibility(View.GONE);
        present_property = pbase;
        pbase.setVisibility(View.VISIBLE);
      }

      // X方向の位置を返す
      public int get_x(){
        return x0;
      }

      // Y方向の位置を返す
      public int get_y(){
        return y0;
      }

      // 幅を返す
      public int get_width(){
        return width;
      }

      // 高さを返す
      public int get_height(){
        return height;
      }

      // 位置・大きさを設定する
      public void setBounds( int x, int y, int wid, int hei ){

dprint(&quot;xcheckbox setBounds\n&quot;);

        x0 = x;
        y0 = y;
        width = wid;
        height = hei;
        setLayoutParams( new AbsoluteLayout.LayoutParams( width, height, x0, y0 ) );
      }


      // 背景色を設定
      public void setBackground( int r, int g, int b ){
        br = r;
        bg = g;
        bb = b;
        setBackgroundColor( Color.rgb( br, bg, bb ) );
      }


      // 色を設定
      public void setForeground( int r, int g, int b ){
        fr = r;
        fg = g;
        fb = b;
//      setTextColor( Color.rgb( fr, fg, fb ) );
      }


    }//~xcheckbox
</codetext>
</codeclip>
<codeclip>
<ID>_C24</ID>
<x0>16</x0>
<y0>408</y0>
<width>209</width>
<height>35</height>
<codetext>    // xlist クラス
    class xlist extends ListView implements xview{
      View me;
      int x0, y0, width, height;
      int ypos;
      String[] superclass = {
        &quot;JList&quot;,
        &quot;JList&quot;,
        &quot;EList&quot;,
        &quot;EList&quot;,
        &quot;ListView&quot;,
        &quot;List&quot;,
        &quot;List&quot;,
        &quot;List&quot;,
        &quot;List&quot;,
        &quot;List&quot;,
        &quot;List&quot;,
        &quot;List&quot;,
        &quot;List&quot;,
        &quot;List&quot;,
        &quot;List&quot;,
        &quot;List&quot;
      };

      AbsoluteLayout pbase;
      TextView Lname;         EditText ename;        String  name;
      TextView Lforecolor;    Button   bforecolor;   int     fr, fg, fb;
      TextView Lbackcolor;    Button   bbackcolor;   int     br, bg, bb;
      TextView Lfont;         EditText efont;        String  font; // 無効(環境間の互換性に問題あり)
      TextView Lfontsize;     EditText efontsize;    int     fontsize;
      TextView Lseethrough;   CheckBox cseethrough;  boolean seethrough;
      TextView Lscrollable;   CheckBox cscrollable;  boolean scrollable;
      TextView Lcreate_pin;   CheckBox ccreate_pin;  boolean create_pin;
      TextView Lselect_pin;   CheckBox cselect_pin;  boolean select_pin;
      TextView Lsuperclass;   EditText esuperclass;


      // 新規作成
      xlist( String nam, int x, int y ){
        super(ACTIVITY);

dprint(&quot;new xlist\n&quot;);

        x0         = x;
        y0         = y;
        width      = default_width;
        height     = default_height;
        name       = nam;
        fr = 0;   fg = 0;   fb = 0;
        br = 200; bg = 200; bb = 200;
        font       = &quot;***&quot;;
        fontsize   = 16;
        seethrough = false;
        scrollable = true;
        create_pin = true;
        select_pin = true;
        init();
      }


      // Loginモードで生成(ファイルの情報をもとに生成)  
      xlist( String str ){
        super(ACTIVITY);

dprint(&quot;new textarea(s)\n&quot;);

        x0         = 0;
        y0         = 0;
        width      = 107;
        height     = 50;
        name       = &quot;no name&quot;;
        fr = 0;   fg = 0;   fb = 0;
        br = 200; bg = 200; bb = 200;
        font       = &quot;***&quot;;
        fontsize   = 16;
        seethrough = false;
        scrollable = true;
        create_pin = true;
        select_pin = true;
        if( (  str.startsWith(&quot;TEXTAREA&quot;) ) ){
          StringTokenizer fld = new StringTokenizer( str, &quot;;&quot; );
          String d = fld.nextToken();
          name = fld.nextToken();
          x0 = parseInt(fld.nextToken());
          y0 = parseInt(fld.nextToken());
          width  = parseInt(fld.nextToken());
          height = parseInt(fld.nextToken());
          fr = parseInt(fld.nextToken());
          fg = parseInt(fld.nextToken());
          fb = parseInt(fld.nextToken());
          br = parseInt(fld.nextToken());
          bg = parseInt(fld.nextToken());
          bb = parseInt(fld.nextToken());
          font = fld.nextToken();
          fontsize = parseInt(fld.nextToken());
          if( fld.hasMoreTokens() ) seethrough  = (parseInt(fld.nextToken())==0);
          if( fld.hasMoreTokens() ) scrollable  = (parseInt(fld.nextToken())!=0);
          if( fld.hasMoreTokens() ) create_pin  = (parseInt(fld.nextToken())!=0);
          if( fld.hasMoreTokens() ) select_pin  = (parseInt(fld.nextToken())!=0);
          if( fld.hasMoreTokens() ) superclass[ApplicationType] = fld.nextToken();
        }
        init();
      }


      // 初期化共通部  
      private void init(){

dprint(&quot;xlist init\n&quot;);

        pbase = new AbsoluteLayout(ACTIVITY);
        me = this;
        setFocusable(true);
        setFocusableInTouchMode(true);
        ypos = 0;
        Lname = new TextView(ACTIVITY);
        Lname.setPadding(1, 1, 1, 1);
        Lname.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lname.setTextColor( Color.rgb( 0, 0, 0 ));
        Lname.setTextSize( FSIZE );
        Lname.setText(&quot;名前&quot;);
        Lname.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lname );

        ename = new EditText(ACTIVITY);
        ename.setPadding(1, 1, 1, 1);
        ename.setGravity(Gravity.LEFT|Gravity.CENTER);
        ename.setTextSize( FSIZE );
        ename.setTextColor( Color.rgb( 0, 0, 0 ));
        ename.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        ename.setText( name );
        ename.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        ename.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              name = get_text(ename);
              resize();
              ename.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( ename );
        ypos+=item_hei+3;

        Lforecolor = new TextView(ACTIVITY);
        Lforecolor.setPadding(1, 1, 1, 1);
        Lforecolor.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lforecolor.setTextColor( Color.rgb( 0, 0, 0 ));
        Lforecolor.setTextSize( FSIZE );
        Lforecolor.setText(&quot;色&quot;);
        Lforecolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lforecolor );

        bforecolor = new Button(ACTIVITY);
        bforecolor.setPadding(1, 1, 1, 1);
        bforecolor.setGravity(Gravity.CENTER|Gravity.CENTER);
        bforecolor.setTextSize( FSIZE );
        bforecolor.setTextColor( Color.rgb( 0, 0, 0 ));
        bforecolor.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        bforecolor.setText( &quot;変える&quot; );
        bforecolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        bforecolor.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ xhandler(me,&quot;forecolor&quot;);}
        });
        pbase.addView( bforecolor );
        ypos+=item_hei+3;

        Lbackcolor = new TextView(ACTIVITY);
        Lbackcolor.setPadding(1, 1, 1, 1);
        Lbackcolor.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lbackcolor.setTextColor( Color.rgb( 0, 0, 0 ));
        Lbackcolor.setTextSize( FSIZE );
        Lbackcolor.setText(&quot;背景の色&quot;);
        Lbackcolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lbackcolor );

        bbackcolor = new Button(ACTIVITY);
        bbackcolor.setPadding(1, 1, 1, 1);
        bbackcolor.setGravity(Gravity.CENTER|Gravity.CENTER);
        bbackcolor.setTextSize( FSIZE );
        bbackcolor.setTextColor( Color.rgb( 0, 0, 0 ) );
        bbackcolor.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        bbackcolor.setText( &quot;変える&quot; );
        bbackcolor.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        bbackcolor.setOnClickListener( new View.OnClickListener(){
          @Override
          public void onClick(View v){ xhandler(me,&quot;backcolor&quot;);}
        });
        pbase.addView( bbackcolor );
        ypos+=item_hei+3;

        Lfont = new TextView(ACTIVITY);
        Lfont.setPadding(1, 1, 1, 1);
        Lfont.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lfont.setTextColor( Color.rgb( 0, 0, 0 ));
        Lfont.setTextSize( FSIZE );
        Lfont.setText(&quot;フォント&quot;);
        Lfont.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lfont );

        efont = new EditText(ACTIVITY);
        efont.setPadding(1, 1, 1, 1);
        efont.setGravity(Gravity.LEFT|Gravity.CENTER);
        efont.setTextSize( FSIZE );
        efont.setTextColor( Color.rgb( 0, 0, 0 ));
        efont.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        efont.setText( &quot;&quot;+font );
        efont.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        efont.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              font = get_text(efont);
              resize();
              efont.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( efont );
        ypos+=item_hei+3;

        Lfontsize = new TextView(ACTIVITY);
        Lfontsize.setPadding(1, 1, 1, 1);
        Lfontsize.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lfontsize.setTextColor( Color.rgb( 0, 0, 0 ));
        Lfontsize.setTextSize( FSIZE );
        Lfontsize.setText(&quot;文字のサイズ&quot;);
        Lfontsize.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lfontsize );

        efontsize = new EditText(ACTIVITY);
        efontsize.setPadding(1, 1, 1, 1);
        efontsize.setGravity(Gravity.LEFT|Gravity.CENTER);
        efontsize.setTextSize( FSIZE );
        efontsize.setTextColor( Color.rgb( 0, 0, 0 ));
        efontsize.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        efontsize.setText( &quot;&quot;+fontsize );
        efontsize.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        efontsize.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              fontsize = parseInt( get_text(efontsize) );
              resize();
              efontsize.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( efontsize );
        ypos+=item_hei+3;

        Lseethrough = new TextView(ACTIVITY);
        Lseethrough.setPadding(1, 1, 1, 1);
        Lseethrough.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lseethrough.setTextColor( Color.rgb( 0, 0, 0 ));
        Lseethrough.setTextSize( FSIZE );
        Lseethrough.setText(&quot;透明コンポーネント&quot;);
        Lseethrough.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lseethrough );

        cseethrough = new CheckBox(ACTIVITY);
        cseethrough.setPadding(1, 1, 1, 1);
        cseethrough.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        cseethrough.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        cseethrough.setChecked( seethrough );
        pbase.addView( cseethrough );
        ypos+=item_hei+3;

        Lscrollable = new TextView(ACTIVITY);
        Lscrollable.setPadding(1, 1, 1, 1);
        Lscrollable.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lscrollable.setTextColor( Color.rgb( 0, 0, 0 ));
        Lscrollable.setTextSize( FSIZE );
        Lscrollable.setText(&quot;スクロール可能&quot;);
        Lscrollable.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lscrollable );

        cscrollable = new CheckBox(ACTIVITY);
        cscrollable.setPadding(1, 1, 1, 1);
        cscrollable.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        cscrollable.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        cscrollable.setChecked( scrollable );
        pbase.addView( cscrollable );
        ypos+=item_hei+3;

        Lcreate_pin = new TextView(ACTIVITY);
        Lcreate_pin.setPadding(1, 1, 1, 1);
        Lcreate_pin.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lcreate_pin.setTextColor( Color.rgb( 0, 0, 0 ));
        Lcreate_pin.setTextSize( FSIZE );
        Lcreate_pin.setText(&quot;createdピンを表示&quot;);
        Lcreate_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lcreate_pin );

        ccreate_pin = new CheckBox(ACTIVITY);
        ccreate_pin.setPadding(1, 1, 1, 1);
        ccreate_pin.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        ccreate_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        ccreate_pin.setChecked( create_pin );
        pbase.addView( ccreate_pin );
        ypos+=item_hei+3;

        Lselect_pin = new TextView(ACTIVITY);
        Lselect_pin.setPadding(1, 1, 1, 1);
        Lselect_pin.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lselect_pin.setTextColor( Color.rgb( 0, 0, 0 ));
        Lselect_pin.setTextSize( FSIZE );
        Lselect_pin.setText(&quot;selectedピンを表示&quot;);
        Lselect_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lselect_pin );

        cselect_pin = new CheckBox(ACTIVITY);
        cselect_pin.setPadding(1, 1, 1, 1);
        cselect_pin.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        cselect_pin.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        cselect_pin.setChecked( select_pin );
        pbase.addView( cselect_pin );
        ypos+=item_hei+3;

        Lsuperclass = new TextView(ACTIVITY);
        Lsuperclass.setPadding(1, 1, 1, 1);
        Lsuperclass.setGravity(Gravity.LEFT|Gravity.CENTER);
        Lsuperclass.setTextColor( Color.rgb( 0, 0, 0 ));
        Lsuperclass.setTextSize( FSIZE );
        Lsuperclass.setText(&quot;スーパークラス&quot;);
        Lsuperclass.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,0,ypos ) );
        pbase.addView( Lsuperclass );

        esuperclass = new EditText(ACTIVITY);
        esuperclass.setPadding(1, 1, 1, 1);
        esuperclass.setGravity(Gravity.LEFT|Gravity.CENTER);
        esuperclass.setTextSize( FSIZE );
        esuperclass.setTextColor( Color.rgb( 0, 0, 0 ));
        esuperclass.setBackgroundColor( Color.rgb( 230, 230, 230 ));
        esuperclass.setText( superclass[ApplicationType] );
        esuperclass.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid,item_hei,item_wid,ypos ) );
        esuperclass.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              superclass[ApplicationType] = get_text(esuperclass);
              resize();
              esuperclass.requestFocus();
            }
            return true;
          }
        });
        pbase.addView( esuperclass );
        ypos+=item_hei+3;

        me.setOnTouchListener( new View.OnTouchListener(){
          @Override    
          public boolean onTouch(View v, MotionEvent event) {
            if (event.getAction() == MotionEvent.ACTION_UP) {
              touch_x = (int) event.getRawX();    
              touch_y = (int) event.getRawY();
              me.requestFocus();
              xhandler(me,&quot;touch&quot;);
            }
            return true;
          }
        });
        me.setOnKeyListener( new View.OnKeyListener(){
          @Override
          public boolean onKey(View v, int keyCode, KeyEvent event) {
            if (event.getAction() == KeyEvent.ACTION_DOWN) {
              key_code = keyCode;
              xhandler(me,&quot;keyinput&quot;);
            }
            return true;
          }
        });
        pbase.setLayoutParams( new AbsoluteLayout.LayoutParams( item_wid * 2+10, ypos+180, 0, vpos ) );
        resize();
      }

      // サイズ調整する
      public void resize(){

dprint(&quot;xlist resize\n&quot;);

        setPadding(1, 1, 1, 1);
//      setTextColor( Color.rgb( fr, fg, fb ) );
        setBackgroundColor( Color.rgb( br, bg, bb ));
        setLayoutParams( new AbsoluteLayout.LayoutParams( width, height, x0, y0 ) );
      }

      // 各パラメータをセットする
      public void set_params(){

dprint(&quot;xlist set_prams\n&quot;);

        name = get_text(ename);
        fontsize = parseInt( get_text(efontsize) );
        seethrough = cseethrough.isChecked();
        scrollable = cscrollable.isChecked();
        create_pin = ccreate_pin.isChecked();
        select_pin = cselect_pin.isChecked();
        superclass[ApplicationType] = get_text(esuperclass);
      }

      // 各パラメータを返す
      public String get_params(){

dprint(&quot;xlist get_prams\n&quot;);

        return
          &quot;LIST;&quot;  +
          name +&quot;;&quot; +
          x0 + &quot;;&quot; + y0 + &quot;;&quot; + width + &quot;;&quot; + height + &quot;;&quot; +
          fr + &quot;;&quot; + fg + &quot;;&quot; + fb + &quot;;&quot; +
          br + &quot;;&quot; + bg + &quot;;&quot; + bb + &quot;;&quot; +
          font + &quot;;&quot; + fontsize + &quot;;&quot; + 
          (seethrough? 0:1) +&quot;;&quot;+
          (scrollable? 1:0) +&quot;;&quot;+
          (create_pin? 1:0) +&quot;;&quot;+
          (select_pin? 1:0) +&quot;;&quot;+
          superclass[ApplicationType]  + &quot;;&quot;
        ;
      }

      // 自分を追加する
      public void join(){

dprint(&quot;xlist join\n&quot;);

        designer.ebase.addView( me );
        designer.pbase.addView( pbase );
        designer.member.add(me);
        show_property();
      }

      // 自分を消去する
      public void suicide(){

dprint(&quot;xlist suicide\n&quot;);

        designer.ebase.removeView( me );
        if( pbase == present_property ) present_property = null;
        designer.pbase.removeView( pbase );
        designer.member.remove(me);
      }

      // プロパティを表示する
      public void show_property(){

dprint(&quot;xlist show property\n&quot;);

        if(present_property != null ) present_property.setVisibility(View.GONE);
        present_property = pbase;
        pbase.setVisibility(View.VISIBLE);
      }

      // X方向の位置を返す
      public int get_x(){
        return x0;
      }

      // Y方向の位置を返す
      public int get_y(){
        return y0;
      }

      // 幅を返す
      public int get_width(){
        return width;
      }

      // 高さを返す
      public int get_height(){
        return height;
      }

      // 位置・大きさを設定する
      public void setBounds( int x, int y, int wid, int hei ){

dprint(&quot;xlist setBounds\n&quot;);

        x0 = x;
        y0 = y;
        width = wid;
        height = hei;
        setLayoutParams( new AbsoluteLayout.LayoutParams( width, height, x0, y0 ) );
      }


      // 背景色を設定
      public void setBackground( int r, int g, int b ){
        br = r;
        bg = g;
        bb = b;
        setBackgroundColor( Color.rgb( br, bg, bb ) );
      }


      // 色を設定
      public void setForeground( int r, int g, int b ){
        fr = r;
        fg = g;
        fb = b;
//      setTextColor( Color.rgb( fr, fg, fb ) );
      }


    }//~xlist
</codetext>
</codeclip>
<operation>
<ID>_O26</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>466</x0>
<y0>76</y0>
<width>168</width>
<height>54</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(String s)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>34</inpiny0>
<inpinwidth>76</inpinwidth>
<inpinheight>20</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// GUIデザイナを呼び出す


designer.show();
callback_str = s;
if( layout_data != null ){
  try{
    BufferedWriter dout = new BufferedWriter( new FileWriter(LayoutData) );
    dout.write(layout_data);
    dout.close();
  } catch( IOException e ){}
  open(LayoutData);
}
layout_data = null;
</codetext>
</operation>
<pin>
<ID>_P27</ID>
<x0>327</x0>
<y0>91</y0>
<width>112</width>
<height>26</height>
<text>show(String str)</text>
<px>5</px>
<py>62</py>
</pin>
<relation>
<ID>_R28</ID>
<pin1name>_P27</pin1name>
<pin2name>_O26</pin2name>
</relation>
<operation>
<ID>_O29</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>444</x0>
<y0>140</y0>
<width>192</width>
<height>57</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(File f)</inpintext>
<inpinx0>1</inpinx0>
<inpiny0>35</inpiny0>
<inpinwidth>57</inpinwidth>
<inpinheight>22</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// レイアウトファイルを開く




dprint(&quot;open layout file&quot;);

if( f == null ) return;

String line;
try{
  designer.clear();
  BufferedReader din = new BufferedReader( new FileReader(f) );
  designer.etitle.setText( din.readLine() );
  String dmy1 = din.readLine();
  String dmy2 = din.readLine();
  designer.setBackground( parseInt(din.readLine()),parseInt(din.readLine()),parseInt( din.readLine()) );
  while( (line = din.readLine()) != null ){
    if( line.startsWith(&quot;xxscale=&quot;) ) designer.escale.setText(line.substring(8));
    else if(line.startsWith(&quot;LABEL;&quot;))     (new xlabel(line)).join();
    else if(line.startsWith(&quot;BUTTON;&quot;))    (new xbutton(line)).join();
    else if(line.startsWith(&quot;TEXTAREA;&quot;))  (new xtextarea(line)).join();
    else if(line.startsWith(&quot;TEXTFIELD;&quot;)) (new xtextfield(line)).join();
    else if(line.startsWith(&quot;HSLIDER;&quot;))   (new xhslider(line)).join();
    else if(line.startsWith(&quot;VSLIDER;&quot;))   (new xvslider(line)).join();
    else if(line.startsWith(&quot;CHECKBOX;&quot;))  (new xcheckbox(line)).join();
    else if(line.startsWith(&quot;LIST;&quot;))      (new xlist(line)).join();
  }
  din.close();
} catch( IOException e ){
dprint(&quot;ioexception\n&quot;);
 e.printStackTrace();
}
</codetext>
</operation>
<pin>
<ID>_P30</ID>
<x0>330</x0>
<y0>164</y0>
<width>78</width>
<height>30</height>
<text>open(File f)</text>
<px>119</px>
<py>74</py>
</pin>
<relation>
<ID>_R31</ID>
<pin1name>_P30</pin1name>
<pin2name>_O29</pin2name>
</relation>
<operation>
<ID>_O32</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>447</x0>
<y0>217</y0>
<width>192</width>
<height>57</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>36</inpiny0>
<inpinwidth>33</inpinwidth>
<inpinheight>22</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// レイアウトファイルを保存



try{
  File file = new File( CurrentDir, get_text(designer.etitle)+&quot;.lay&quot; );
  BufferedWriter dout = new BufferedWriter( new FileWriter( file  ) );
  dout.write(get_text(designer.etitle)+&quot;\n640\n480\n&quot;);
  dout.write(designer.back_r+&quot;\n&quot;+designer.back_g+&quot;\n&quot;+designer.back_b+&quot;\n&quot;);
  dout.write(&quot;xxscale=&quot;+get_text(designer.escale)+&quot;\n&quot;);
  for( int i = designer.member.size()-1; i &gt;= 0; i-- ){
    dout.write( ((xview)designer.member.get(i)).get_params() + &quot;\n&quot; );
  }
  dout.close();
} catch(IOException e){ e.printStackTrace(); }
</codetext>
</operation>
<pin>
<ID>_P33</ID>
<x0>341</x0>
<y0>234</y0>
<width>54</width>
<height>26</height>
<text>save()</text>
<px>9</px>
<py>131</py>
</pin>
<relation>
<ID>_R34</ID>
<pin1name>_P33</pin1name>
<pin2name>_O32</pin2name>
</relation>
<pin>
<ID>_P37</ID>
<x0>333</x0>
<y0>305</y0>
<width>69</width>
<height>26</height>
<text>compile()</text>
<px>12</px>
<py>132</py>
</pin>
<relation>
<ID>_R38</ID>
<pin1name>_P37</pin1name>
<pin2name>_X_O36(_Pin)</pin2name>
</relation>
<codeclip>
<ID>_C39</ID>
<x0>388</x0>
<y0>360</y0>
<width>254</width>
<height>96</height>
<codetext>// フォントサイズ
static final float FSIZE = 16f;

// コンポーネントサイズに関する定数
static final int MIN_SIZE = 10;
static final int CORNER_RANGE = 50;
</codetext>
</codeclip>
<xobject>
<ID>_X_O36</ID>
<x0>454</x0>
<y0>287</y0>
<width>133</width>
<height>56</height>
<ID_maker>15</ID_maker>
<objectname>compiler</objectname>
<description></description>
<pin>
<ID>_Pin</ID>
<x0>31</x0>
<y0>94</y0>
<width>71</width>
<height>24</height>
<text>compile()</text>
<px>0</px>
<py>36</py>
</pin>
<operation>
<ID>_O5</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>177</x0>
<y0>62</y0>
<width>195</width>
<height>80</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in()</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>60</inpiny0>
<inpinwidth>32</inpinwidth>
<inpinheight>19</inpinheight>
<outpintext>out(String out)</outpintext>
<outpinx0>79</outpinx0>
<outpiny0>59</outpiny0>
<outpinwidth>106</outpinwidth>
<outpinheight>22</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>/* 条件:
 ApplicationTyp==android
android用データを生成する

 */



if( ApplicationType!=4 ) return;

String xml;
int i = 0;;
int j = 0;

double scale = Double.parseDouble(get_text(designer.escale));

StringBuffer guideclare = new StringBuffer(&quot; class XGUI{\n&quot;);
StringBuffer guiconstruct   = new StringBuffer(&quot; XGUI(){\n AbsoluteLayout layout=new AbsoluteLayout(ACTIVITY);\n&quot;);
guiconstruct.append(&quot;layout.setBackgroundColor(Color.rgb( &quot; + designer.back_r + &quot;, &quot; + designer.back_g + &quot;, &quot; + designer.back_b +  &quot;));\n&quot;);
guiconstruct.append(&quot;ACTIVITY.setContentView(layout);\n&quot;);
guiconstruct.append(&quot;ACTIVITY.setTitle(\&quot;&quot; + get_text(designer.etitle) + &quot;\&quot;);\n&quot;);


xml=           &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;Shift_JIS\&quot; ?&gt;\n&lt;!-- なんちゃってXML version 0.1( ObjectEditor専用 ) --&gt;\n&quot;;
xml=xml+&quot;&lt;aobject&gt;\n&lt;ID&gt;GUI&lt;/ID&gt;&lt;x0&gt;100&lt;/x0&gt;&lt;y0&gt;100&lt;/y0&gt;&lt;width&gt;280&lt;/width&gt;&lt;objectname&gt;GUI&lt;/objectname&gt;&lt;description&gt;GUIオブジェクト\n&lt;/description&gt;\n&quot;;
xml=xml+&quot;&lt;state&gt;&lt;ID&gt;_SINIT&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;40&lt;/y0&gt;&lt;width&gt;70&lt;/width&gt;&lt;height&gt;40&lt;/height&gt;&lt;text&gt;  InitState&lt;/text&gt;&lt;isinitstate&gt;1&lt;/isinitstate&gt;&lt;/state&gt;\n&quot;;
xml=xml+&quot;&lt;pin&gt;&lt;ID&gt;_Pstart&lt;/ID&gt;&lt;x0&gt;400&lt;/x0&gt;&lt;y0&gt;100&lt;/y0&gt;&lt;width&gt;80&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;Start()&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;36&lt;/py&gt;&lt;/pin&gt;\n&quot;;
xml=xml+&quot;&lt;pin&gt;&lt;ID&gt;_PGUIout&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;84&lt;/y0&gt;&lt;width&gt;180&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;GUI_created(AbsoluteLayout l)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;54&lt;/py&gt;&lt;/pin&gt;\n&quot;;
xml=xml+&quot;&lt;action&gt;&lt;ID&gt;_Astart&lt;/ID&gt;&lt;comp1name&gt;_Pstart&lt;/comp1name&gt;&lt;comp2name&gt;_Ocreate&lt;/comp2name&gt;&lt;/action&gt;\n&quot;;
xml=xml+&quot;&lt;operation&gt;&lt;ID&gt;_Ocreate&lt;/ID&gt;&lt;state1&gt;_SINIT&lt;/state1&gt;&lt;state2&gt;_SINIT&lt;/state2&gt;&lt;x0&gt;220&lt;/x0&gt;&lt;y0&gt;40&lt;/y0&gt;&lt;width&gt;130&lt;/width&gt;&lt;height&gt;64&lt;/height&gt;&quot;;
xml=xml+&quot;&lt;inconnectx0&gt;0&lt;/inconnectx0&gt;&lt;inconnecty0&gt;30&lt;/inconnecty0&gt;&lt;outconnectx0&gt;0&lt;/outconnectx0&gt;&lt;outconnecty0&gt;30&lt;/outconnecty0&gt;&quot;;
xml=xml+&quot;&lt;inpintext&gt;in()&lt;/inpintext&gt;&lt;inpinx0&gt;90&lt;/inpinx0&gt;&lt;inpiny0&gt;43&lt;/inpiny0&gt;&lt;inpinwidth&gt;40&lt;/inpinwidth&gt;&lt;inpinheight&gt;20&lt;/inpinheight&gt;&quot;;
xml=xml+&quot;&lt;outpintext&gt;out()&lt;/outpintext&gt;&lt;outpinx0&gt;90&lt;/outpinx0&gt;&lt;outpiny0&gt;40&lt;/outpiny0&gt;&lt;outpinwidth&gt;40&lt;/outpinwidth&gt;&lt;outpinheight&gt;20&lt;/outpinheight&gt;&quot;;
xml=xml+&quot;&lt;inpinlinkcount&gt;1&lt;/inpinlinkcount&gt;&lt;description&gt;GUIを作成する\n&lt;/description&gt;&lt;codetext&gt;XGUI x = new XGUI();\n\n&lt;/codetext&gt;&lt;/operation&gt;\n&quot;;

for( i=designer.member.size()-1;i&gt;=0;i--){

  if( designer.member.get(i) instanceof xlabel ){
    xlabel lbl = (xlabel)(designer.member.get(i));
    lbl.set_params();
    String name = lbl.name;
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;LBL&quot;+ i;
    String txt = lbl.text;
    String f = lbl.font;
    int sz = lbl.fontsize;
    int ax = lbl.halign;
    int ay = lbl.valign;
    String sax=&quot;&quot;;
    if( ax == 0 ) sax = &quot;Gravity.LEFT&quot;;
    if( ax == 1 ) sax = &quot;Gravity.CENTER&quot;;
    if( ax == 2 ) sax = &quot;Gravity.RIGHT&quot;;
    String say=&quot;&quot;;
    if( ay == 0 ) say = &quot;Gravity.TOP&quot;;
    if( ay == 1 ) say = &quot;Gravity.CENTER&quot;; 
    if( ay == 2 ) say = &quot;Gravity.BOTTOM&quot;;
    String imagefile = &quot;null&quot;;
    int x0 = (int)(lbl.x0* scale);
    int y0 = (int)(lbl.y0 * scale);
    int wid = (int)(lbl.width* scale);
    int hei  = (int)(lbl.height * scale);

    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    guideclare.append( &quot; class &quot; + name + &quot; extends &quot; + lbl.superclass[ApplicationType] + &quot;{\n&quot; );
    guideclare.append( &quot; &quot;  + name + &quot;(){\n super(ACTIVITY);\n&quot; );
    guideclare.append( &quot; setGravity(&quot; + sax + &quot;|&quot; + say + &quot;);\n&quot;);
    guideclare.append( &quot; setPadding(1, 1, 1, 1);\n&quot;);
    guideclare.append( &quot; setTextSize( &quot;+ sz + &quot;f );&quot;);
    guideclare.append( &quot; setTextColor( Color.rgb( &quot; + lbl.fr + &quot;, &quot; + lbl.fg + &quot;, &quot; + lbl.fb + &quot; ));\n&quot;);
    if( !lbl.seethrough )  guideclare.append( &quot; setBackgroundColor( Color.rgb( &quot; + lbl.br + &quot;, &quot; + lbl.bg + &quot;, &quot; + lbl.bb + &quot; ));\n&quot;);
    else  guideclare.append( &quot; setBackgroundColor( Color.argb( 0,0,0,0 ));\n&quot;);
    if( txt != null ) guideclare.append( &quot; setText( \&quot;&quot; + txt + &quot;\&quot; );\n&quot; );
    if( lbl.create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    if( lbl.paint_pin) guideclare.append( &quot; protected void onDraw(Canvas g){ super.onDraw( g ); &quot; + name +&quot;_paint(g); }\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setLayoutParams( new AbsoluteLayout.LayoutParams( &quot; + wid + &quot;,&quot; + hei + &quot;,&quot; + x0 + &quot;,&quot; + y0 +&quot; ) );\n&quot; );
    guiconstruct.append( &quot; layout.addView( I&quot; + name + &quot; );\n&quot; );
    if( lbl.create_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(TextView t)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    if( lbl.paint_pin)  xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_PP&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_paint(Canvas g)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
  }

  if( designer.member.get(i) instanceof xbutton ){
    xbutton btn = (xbutton)(designer.member.get(i));
    btn.set_params();
    String name = btn.name;
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;BTN&quot;+ i;
    String txt = btn.text;
    String f = btn.font;
    int sz = btn.fontsize;
    int ax = btn.halign;
    int ay = btn.valign;
    String sax=&quot;&quot;;
    if( ax == 0 ) sax = &quot;Gravity.LEFT&quot;;
    if( ax == 1 ) sax = &quot;Gravity.CENTER&quot;;
    if( ax == 2 ) sax = &quot;Gravity.RIGHT&quot;;
    String say=&quot;&quot;;
    if( ay == 0 ) say = &quot;Gravity.TOP&quot;;
    if( ay == 1 ) say = &quot;Gravity.CENTER&quot;; 
    if( ay == 2 ) say = &quot;Gravity.BOTTOM&quot;;
    String imagefile = &quot;null&quot;;
    int x0 = (int)(btn.x0* scale);
    int y0 = (int)(btn.y0 * scale);
    int wid = (int)(btn.width* scale);
    int hei  = (int)(btn.height * scale);

    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    guideclare.append( &quot; class &quot; + name + &quot; extends &quot; + btn.superclass[ApplicationType] + &quot;{\n&quot; );
    guideclare.append( &quot; &quot;  + name + &quot;(){\n super(ACTIVITY);\n&quot; );
    guideclare.append( &quot; setGravity(&quot; + sax + &quot;|&quot; + say + &quot;);\n&quot;);
    guideclare.append( &quot; setPadding(1, 1, 1, 1);\n&quot;);
    guideclare.append( &quot; setTextSize( &quot;+ sz + &quot;f );&quot;);
    guideclare.append( &quot; setTextColor( Color.rgb( &quot; + btn.fr + &quot;, &quot; + btn.fg + &quot;, &quot; + btn.fb + &quot; ));\n&quot;);
    if( !btn.seethrough )  guideclare.append( &quot; setBackgroundColor( Color.rgb( &quot; + btn.br + &quot;, &quot; + btn.bg + &quot;, &quot; + btn.bb + &quot; ));\n&quot;);
    else  guideclare.append( &quot; setBackgroundColor( Color.argb( 0,0,0,0 ));\n&quot;);
    if( txt != null ) guideclare.append( &quot; setText( \&quot;&quot; + txt + &quot;\&quot; );\n&quot; );
    if( btn.click_pin) guideclare.append( &quot; setOnClickListener(new Button.OnClickListener(){ public void onClick(View v) {&quot; + name + &quot;_clicked();}} );\n&quot;);
    if( btn.create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setLayoutParams( new AbsoluteLayout.LayoutParams( &quot; + wid + &quot;,&quot; + hei + &quot;,&quot; + x0 + &quot;,&quot; + y0 +&quot; ) );\n&quot; );
    guiconstruct.append( &quot; layout.addView( I&quot; + name + &quot; );\n&quot; );
    if( btn.create_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(Button b)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    if( btn.click_pin)  xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_PA&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_clicked()&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
  }

  if( designer.member.get(i) instanceof xtextarea ){
    xtextarea ara = (xtextarea)(designer.member.get(i));
    ara.set_params();
    String name = ara.name;
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;ARA&quot;+ i;
    String txt = ara.text;
    String f = ara.font;
    int sz = ara.fontsize;
    int x0 = (int)(ara.x0* scale);
    int y0 = (int)(ara.y0 * scale);
    int wid = (int)(ara.width* scale);
    int hei  = (int)(ara.height * scale);

    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + ara.superclass[ApplicationType] + &quot;{\n&quot; );
    guideclare.append( &quot; &quot;  + name + &quot;(){\n super(ACTIVITY);\n&quot; );
    guideclare.append( &quot; setPadding(1, 1, 1, 1);\n&quot;);
    guideclare.append( &quot; setGravity(Gravity.LEFT | Gravity.TOP);\n&quot;);
    guideclare.append( &quot; setTextSize( &quot;+ sz + &quot;f );&quot;);
    guideclare.append( &quot; setTextColor( Color.rgb( &quot; + ara.fr + &quot;, &quot; + ara.fg + &quot;, &quot; + ara.fb + &quot; ));\n&quot;);
    if( !ara.seethrough )  guideclare.append( &quot; setBackgroundColor( Color.rgb( &quot; + ara.br + &quot;, &quot; + ara.bg + &quot;, &quot; + ara.bb + &quot; ));\n&quot;);
    else  guideclare.append( &quot; setBackgroundColor( Color.argb( 0,0,0,0 ));\n&quot;);
    if( txt != null ) guideclare.append( &quot; setText( \&quot;&quot; + txt + &quot;\&quot; );\n&quot; );
    if( ara.create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setLayoutParams( new AbsoluteLayout.LayoutParams( &quot; + wid + &quot;,&quot; + hei + &quot;,&quot; + x0 + &quot;,&quot; + y0 +&quot; ) );\n&quot; );
    guiconstruct.append( &quot; layout.addView( I&quot; + name + &quot; );\n&quot; );
    if( ara.create_pin)  xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(EditText e)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
  }

  if( designer.member.get(i) instanceof xtextfield ){
    xtextfield fld = (xtextfield)(designer.member.get(i));
    fld.set_params();
    String name = fld.name;
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;FLD&quot;+ i;
    String txt = fld.text;
    String f = fld.font;
    int sz = fld.fontsize;
    int x0 = (int)(fld.x0* scale);
    int y0 = (int)(fld.y0 * scale);
    int wid = (int)(fld.width* scale);
    int hei  = (int)(fld.height * scale);

    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + fld.superclass[ApplicationType] + &quot;{\n&quot; );
    guideclare.append( &quot; &quot;  + name + &quot;(){\n super(ACTIVITY);\n&quot; );
    guideclare.append( &quot; setPadding(1, 1, 1, 1);\n&quot;);
    guideclare.append( &quot; setTextSize( &quot;+ sz + &quot;f );&quot;);
    guideclare.append( &quot; setTextColor( Color.rgb( &quot; + fld.fr + &quot;, &quot; + fld.fg + &quot;, &quot; + fld.fb + &quot; ));\n&quot;);
    if( !fld.seethrough )  guideclare.append( &quot; setBackgroundColor( Color.rgb( &quot; + fld.br + &quot;, &quot; + fld.bg + &quot;, &quot; + fld.bb + &quot; ));\n&quot;);
    else  guideclare.append( &quot; setBackgroundColor( Color.argb( 0,0,0,0 ));\n&quot;);
    if( txt != null ) guideclare.append( &quot; setText( \&quot;&quot; + txt + &quot;\&quot; );\n&quot; );
    if( fld.create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setLayoutParams( new AbsoluteLayout.LayoutParams( &quot; + wid + &quot;,&quot; + hei + &quot;,&quot; + x0 + &quot;,&quot; + y0 +&quot; ) );\n&quot; );
    guiconstruct.append( &quot; layout.addView( I&quot; + name + &quot; );\n&quot; );
    if( fld.create_pin)  xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(EditText e)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
  }

  if( designer.member.get(i) instanceof xhslider ){
    xhslider sld = (xhslider)(designer.member.get(i));
    sld.set_params();
    String name = sld.name;
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;HSL&quot;+ i;
    int x0 = (int)(sld.x0* scale);
    int y0 = (int)(sld.y0 * scale);
    int wid = (int)(sld.width* scale);
    int hei  = (int)(sld.height * scale);

    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + sld.superclass[ApplicationType] + &quot;{\n&quot; );
    guideclare.append( &quot; &quot;  + name + &quot;(){\n super(ACTIVITY);\n&quot; );
    if( !sld.seethrough )  guideclare.append( &quot; setBackgroundColor( Color.rgb( &quot; + sld.br + &quot;, &quot; + sld.bg + &quot;, &quot; + sld.bb + &quot; ));\n&quot;);
    else  guideclare.append( &quot; setBackgroundColor( Color.argb( 0,0,0,0 ));\n&quot;);
    guideclare.append( &quot; setProgress( &quot; + sld.minimum + &quot; );\n&quot; );
    guideclare.append( &quot; setMax( &quot; + sld.maximum + &quot; );\n&quot; );
    if( sld.change_pin){
      guideclare.append( &quot; setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n&quot; );
      guideclare.append( &quot; public void onStopTrackingTouch(SeekBar seekBar) {}\n&quot; );
      guideclare.append( &quot; public void onStartTrackingTouch(SeekBar seekBar) {}\n&quot; );
      guideclare.append( &quot; public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) { &quot; + name +&quot;_changed( progress ); }\n&quot; );
      guideclare.append( &quot; });\n&quot; );
    }
    if( sld.create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setLayoutParams( new AbsoluteLayout.LayoutParams( &quot; + wid + &quot;,&quot; + hei + &quot;,&quot; + x0 + &quot;,&quot; + y0 +&quot; ) );\n&quot; );
    guiconstruct.append( &quot; layout.addView( I&quot; + name + &quot; );\n&quot; );
    if( sld.create_pin)  xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(SeekBar b)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    if( sld.change_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_PA&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_changed(int val)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
  }

  if( designer.member.get(i) instanceof xvslider ){
    xvslider sld = (xvslider)(designer.member.get(i));
    sld.set_params();
    String name = sld.name;
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;VSL&quot;+ i;
    int x0 = (int)(sld.x0* scale);
    int y0 = (int)(sld.y0 * scale);
    int wid = (int)(sld.width* scale);
    int hei  = (int)(sld.height * scale);

    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + sld.superclass[ApplicationType] + &quot;{\n&quot; );
    guideclare.append( &quot; &quot;  + name + &quot;(){\n super(ACTIVITY);\n&quot; );
    if( !sld.seethrough )  guideclare.append( &quot; setBackgroundColor( Color.rgb( &quot; + sld.br + &quot;, &quot; + sld.bg + &quot;, &quot; + sld.bb + &quot; ));\n&quot;);
    else  guideclare.append( &quot; setBackgroundColor( Color.argb( 0,0,0,0 ));\n&quot;);
    guideclare.append( &quot; setProgress( &quot; + sld.minimum + &quot; );\n&quot; );
    guideclare.append( &quot; setMax( &quot; + sld.maximum + &quot; );\n&quot; );
    if( sld.change_pin){
      guideclare.append( &quot; setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {\n&quot; );
      guideclare.append( &quot; public void onStopTrackingTouch(SeekBar seekBar) {}\n&quot; );
      guideclare.append( &quot; public void onStartTrackingTouch(SeekBar seekBar) {}\n&quot; );
      guideclare.append( &quot; public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) { &quot; + name +&quot;_changed( progress ); }\n&quot; );
      guideclare.append( &quot; });\n&quot; );
    }
    if( sld.create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setLayoutParams( new AbsoluteLayout.LayoutParams( &quot; + wid + &quot;,&quot; + hei + &quot;,&quot; + x0 + &quot;,&quot; + y0 +&quot; ) );\n&quot; );
    guiconstruct.append( &quot; layout.addView( I&quot; + name + &quot; );\n&quot; );
    if( sld.create_pin)  xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(SeekBar b)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
    if( sld.change_pin) xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_PA&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_changed(int val)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;
  }

  if( designer.member.get(i) instanceof xcheckbox ){
    xcheckbox chk = (xcheckbox)(designer.member.get(i));
    chk.set_params();
    String name = chk.name;
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;CHK&quot;+ i;
    int x0 = (int)(chk.x0* scale);
    int y0 = (int)(chk.y0 * scale);
    int wid = (int)(chk.width* scale);
    int hei  = (int)(chk.height * scale);
    boolean c = chk.isChecked();

    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + chk.superclass[ApplicationType] + &quot;{\n&quot; );
    guideclare.append( &quot; &quot;  + name + &quot;(){\n super(ACTIVITY);\n&quot; );
    guideclare.append( &quot; setPadding(1, 1, 1, 1);\n&quot;);
    guideclare.append( &quot; setChecked(&quot;+c+&quot;);\n&quot;);
//    guideclare.append( &quot; setTextColor( Color.rgb( &quot; + chk.fr + &quot;, &quot; + chk.fg + &quot;, &quot; + chk.fb + &quot; ));\n&quot;);
    if( !chk.seethrough )  guideclare.append( &quot; setBackgroundColor( Color.rgb( &quot; + chk.br + &quot;, &quot; + chk.bg + &quot;, &quot; + chk.bb + &quot; ));\n&quot;);
    else  guideclare.append( &quot; setBackgroundColor( Color.argb( 0,0,0,0 ));\n&quot;);
    if( chk.create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; I&quot; + name + &quot;.setLayoutParams( new AbsoluteLayout.LayoutParams( &quot; + wid + &quot;,&quot; + hei + &quot;,&quot; + x0 + &quot;,&quot; + y0 +&quot; ) );\n&quot; );
    guiconstruct.append( &quot; layout.addView( I&quot; + name + &quot; );\n&quot; );

    if( chk.create_pin)  xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(CheckBox c)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;

  }

  if( designer.member.get(i) instanceof xlist ){
    xlist lst = (xlist)(designer.member.get(i));
    lst.set_params();
    String name = lst.name;
    if( name == null || name.equals(&quot;&quot;) ) name = &quot;LST&quot;+ i;
    int x0 = (int)(lst.x0* scale);
    int y0 = (int)(lst.y0 * scale);
    int wid = (int)(lst.width* scale);
    int hei  = (int)(lst.height * scale);

    guideclare.append(   name + &quot; I&quot;+name+&quot;;\n&quot; );
    guideclare.append( &quot; class &quot;+ name +&quot; extends &quot; + lst.superclass[ApplicationType] + &quot;{\n&quot; );
    guideclare.append( &quot; &quot;  + name + &quot;(){\n super(ACTIVITY);\n&quot; );
    guideclare.append( &quot; setPadding(1, 1, 1, 1);\n&quot;);
    if( !lst.seethrough )  guideclare.append( &quot; setBackgroundColor( Color.rgb( &quot; + lst.br + &quot;, &quot; + lst.bg + &quot;, &quot; + lst.bb + &quot; ));\n&quot;);
    else  guideclare.append( &quot; setBackgroundColor( Color.argb( 0,0,0,0 ));\n&quot;);
    if( lst.create_pin) guideclare.append( &quot; &quot; + name + &quot;_created( this );\n&quot; );
    guideclare.append( &quot;}\n&quot; );
    guideclare.append( &quot;}\n&quot; );

    guiconstruct.append( &quot; I&quot; + name + &quot; = new &quot; + name + &quot;();\n&quot; );
    guiconstruct.append( &quot; I&quot; + name  + &quot;.setLayoutParams( new AbsoluteLayout.LayoutParams( &quot; + wid + &quot;,&quot; + hei + &quot;,&quot; + x0 + &quot;,&quot; + y0 +&quot; ) );\n&quot; );
    guiconstruct.append( &quot; layout.addView( I&quot; + name + &quot; );\n&quot; );
    if( lst.create_pin)  xml = xml + &quot;&lt;pin&gt;&lt;ID&gt;_P&quot; + name + &quot;&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;&quot; + (j*28+110) + &quot;&lt;/y0&gt;&lt;width&gt;200&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;text&gt;&quot; + name + &quot;_created(ListView l)&lt;/text&gt;&lt;px&gt;0&lt;/px&gt;&lt;py&gt;&quot; + ((j++)*18+72) + &quot;&lt;/py&gt;&lt;/pin&gt;\n&quot;;

  }

}

guiconstruct.append( &quot; GUI_created( layout );\n}\n&quot; );
guideclare.append( guiconstruct.toString() );
guideclare.append( &quot;}\n&quot; );

String s1 = guideclare.toString();
String s2 = &quot;&quot;;
for( int p = 0; p &lt; s1.length(); p++ ){
  char c = s1.charAt(p);
  if( c == &apos;&lt;&apos; ) s2 = s2 + &quot;&amp;lt;&quot;;
  else if( c == &apos;&gt;&apos; ) s2 = s2 + &quot;&amp;gt;&quot;;
  else if( c == &apos;&amp;&apos; ) s2 = s2 + &quot;&amp;amp;&quot;;
  else if( c == &apos;\&apos;&apos; ) s2 =s2 + &quot;&amp;apos;&quot;;
  else if( c == &apos;\&quot;&apos; ) s2 = s2 + &quot;&amp;quot;&quot;;
  else s2 = s2 + c;
}

xml = xml + &quot;&lt;codeclip&gt;&lt;ID&gt;_CXSTART&lt;/ID&gt;&lt;x0&gt;0&lt;/x0&gt;&lt;y0&gt;0&lt;/y0&gt;&lt;width&gt;300&lt;/width&gt;&lt;height&gt;26&lt;/height&gt;&lt;codetext&gt;&quot; + s2 + &quot;&lt;/codetext&gt;&lt;/codeclip&gt;\n&quot;
          + &quot;&lt;ID_maker&gt;&quot; + (j+20) + &quot;&lt;/ID_maker&gt;&lt;height&gt;&quot; + (18*j+76) + &quot;&lt;/height&gt;&lt;/aobject&gt;\n&quot;;

out = xml;
</codetext>
</operation>
<relation>
<ID>_R9</ID>
<pin1name>_Pin</pin1name>
<pin2name>_O5</pin2name>
</relation>
<operation>
<ID>_O10</ID>
<state1>_SINIT</state1>
<state2>_SINIT</state2>
<x0>469</x0>
<y0>65</y0>
<width>191</width>
<height>68</height>
<inconnectx0>0</inconnectx0>
<inconnecty0>40</inconnecty0>
<outconnectx0>0</outconnectx0>
<outconnecty0>40</outconnecty0>
<inpintext>in(String s)</inpintext>
<inpinx0>0</inpinx0>
<inpiny0>46</inpiny0>
<inpinwidth>76</inpinwidth>
<inpinheight>22</inpinheight>
<outpintext>out()</outpintext>
<outpinx0>90</outpinx0>
<outpiny0>40</outpiny0>
<outpinwidth>40</outpinwidth>
<outpinheight>20</outpinheight>
<inpinlinkcount>1</inpinlinkcount>
<description></description>
<codetext>// レイアウトデータを設定して
// 文字列をファイルに出力する



layout_data = get_text(designer.etitle) +
              &quot;\n640\n480\n&quot; + 
              designer.back_r+&quot;\n&quot;+designer.back_g+&quot;\n&quot;+designer.back_b+&quot;\n&quot; +
              &quot;xxscale=&quot;+get_text(designer.escale)+&quot;\n&quot;;

for( int i = designer.member.size()-1; i &gt;= 0; i-- ){
  layout_data = layout_data + ((xview)designer.member.get(i)).get_params() + &quot;\n&quot;;
}

try{
BufferedWriter dout = new BufferedWriter( new FileWriter(GUIDesignerWork) );
dout.write(s);
dout.close();
} catch( IOException e ){dprint(&quot;GUIDesigner Work File output Error\n&quot;);}
</codetext>
</operation>
<relation>
<ID>_R13</ID>
<pin1name>_O5</pin1name>
<pin2name>_O10</pin2name>
</relation>
<codeclip>
<ID>_C14</ID>
<x0>134</x0>
<y0>31</y0>
<width>286</width>
<height>19</height>
<codetext>// *****    android以外の部分は未実装 *****</codetext>
</codeclip>
</xobject>
</xobject>
<relation>
<ID>_R104</ID>
<pin1name>_X_G83(_P84)</pin1name>
<pin2name>_X99(_P2)</pin2name>
</relation>
<pin>
<ID>_P105</ID>
<x0>784</x0>
<y0>408</y0>
<width>112</width>
<height>27</height>
<text>guidsin(String s)</text>
<px>10</px>
<py>40</py>
</pin>
<relation>
<ID>_R106</ID>
<pin1name>_P105</pin1name>
<pin2name>_X99(_P27)</pin2name>
</relation>
<pin>
<ID>_P108</ID>
<x0>900</x0>
<y0>408</y0>
<width>87</width>
<height>27</height>
<text>gopen(File f)</text>
<px>10</px>
<py>40</py>
</pin>
<relation>
<ID>_R110</ID>
<pin1name>_P108</pin1name>
<pin2name>_X99(_P30)</pin2name>
</relation>
<codeclip>
<ID>_C113</ID>
<x0>793</x0>
<y0>444</y0>
<width>173</width>
<height>34</height>
<codetext>// レイアウトデータ
String layout_data;
</codetext>
</codeclip>
<codeclip>
<ID>_C114</ID>
<x0>790</x0>
<y0>489</y0>
<width>179</width>
<height>62</height>
<codetext>// メニューコンポーネント
MenuGUI menu_gui;
boolean menu_active;
class MenuGUI{
  String menu_text;
  int bottom_margine = 180; // 下部の余白

  AbsoluteLayout base;
  AbsoluteLayout bbase;
  ScrollView     byview;
  TextView       tversion;
  Button         bedit;
  Button         bconsole;
  Button         bcancel;
  TextView       Lmargine;

  // コマンド実行ボタン
  class cbutton extends Button{
    String cmd;
    cbutton( String t, String c ){
      super(ACTIVITY);
      setText(t);
      cmd = c;
      setPadding(1, 1, 1, 1);
      setGravity(Gravity.CENTER|Gravity.CENTER);
      setTextColor( Color.rgb( 0, 0, 0 ));
      setBackgroundColor( Color.rgb( 255, 255, 255 ));
      setOnClickListener( new View.OnClickListener(){
        @Override
        public void onClick(View v){
          menu_active = false;
          ACTIVITY.setContentView(present_view);
          execute( cmd, false );
        }
      });
    }
  }


  // ファイルコンポーネントを作成
  MenuGUI(){

  dprint(&quot;menu gui\n&quot;);

    menu_active = false;
    int bwid=screen_width-16;
    int bhei=62;
    int p = 3;

    menu_text = null;
    base = new AbsoluteLayout(ACTIVITY);
    base.setBackgroundColor(Color.rgb( 255, 255, 255));
    bbase = new AbsoluteLayout(ACTIVITY);
    bbase.setBackgroundColor(Color.rgb( 255, 255, 255));

    tversion = new TextView(ACTIVITY);
    tversion.setPadding(1, 1, 1, 1);
    tversion.setGravity(Gravity.CENTER|Gravity.CENTER);
    tversion.setTextColor( Color.rgb( 0, 0, 0 ));
    tversion.setBackgroundColor( Color.rgb( 255, 255, 255 ));
    tversion.setText(&quot;Objedit version &quot;+VERSION+&quot;  Menu&quot;);
    tversion.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bhei,3,p ) );
    bbase.addView( tversion );
    p+=bhei+3;

    bedit = new Button(ACTIVITY);
    bedit.setPadding(1, 1, 1, 1);
    bedit.setGravity(Gravity.CENTER|Gravity.CENTER);
    bedit.setTextColor( Color.rgb( 0, 0, 0 ));
    bedit.setBackgroundColor( Color.rgb( 255, 255, 255 ));
    bedit.setText(&quot;メニューを編集&quot;);
    bedit.setOnClickListener( new View.OnClickListener(){
      @Override
      public void onClick(View v){
        if( menu_text == null ) menu_text = &quot;&quot;;
        menu_active = false;
        editor_gui.show(&quot;callback:edit_menu&quot;, menu_text );
      }
    });
    bedit.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid/3-3,bhei,3,p ) );
    bbase.addView( bedit );

    bconsole = new Button(ACTIVITY);
    bconsole.setPadding(1, 1, 1, 1);
    bconsole.setGravity(Gravity.CENTER|Gravity.CENTER);
    bconsole.setTextColor( Color.rgb( 0, 0, 0 ));
    bconsole.setBackgroundColor( Color.rgb( 255, 255, 255 ));
    bconsole.setText(&quot;コンソールを表示&quot;);
    bconsole.setOnClickListener( new View.OnClickListener(){
      @Override
      public void onClick(View v){
        console_gui.show();
      }
    });
    bconsole.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid/3-3,bhei,3+bwid/3,p ) );
    bbase.addView( bconsole );

    bcancel = new Button(ACTIVITY);
    bcancel.setPadding(1, 1, 1, 1);
    bcancel.setGravity(Gravity.CENTER|Gravity.CENTER);
    bcancel.setTextColor( Color.rgb( 0, 0, 0 ));
    bcancel.setBackgroundColor( Color.rgb( 255, 255, 255 ));
    bcancel.setText(&quot;キャンセル&quot;);
    bcancel.setOnClickListener( new View.OnClickListener(){
      @Override
      public void onClick(View v){
        menu_active = false;
        ACTIVITY.setContentView(present_view);
      }
    });
    bcancel.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid/3-3,bhei,3+bwid*2/3,p ) );
    bbase.addView( bcancel );
    p+=bhei+3;

    Object project = xml.child( xml.root_element(), &quot;project&quot; );
    if( project != null ){
      Object properties = xml.child( project, &quot;properties&quot; );
      if( properties == null ) loadProperty();
      menu_text = xml.get_attribute( properties, &quot;menu&quot; );
      if( menu_text != null ){
        StringTokenizer fld = new StringTokenizer( menu_text, &quot;,\n&quot; );
        while(true){
          if(!fld.hasMoreTokens()) break;
          String txt = fld.nextToken();
          if(!fld.hasMoreTokens()) break;
          String cmd = fld.nextToken();
          cbutton btn = new cbutton(txt,cmd);
          btn.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bhei,3,p ) );
          bbase.addView( btn );
          p+=bhei+3;
        }
      }
    }

    Lmargine = new TextView(ACTIVITY);
    Lmargine.setPadding(1, 1, 1, 1);
    Lmargine.setGravity(Gravity.LEFT|Gravity.CENTER);
    Lmargine.setTextSize( 16f );
    Lmargine.setTextColor( Color.rgb( 0, 0, 0 ));
    Lmargine.setText(&quot;     &quot;);
    Lmargine.setLayoutParams( new AbsoluteLayout.LayoutParams( bwid,bottom_margine,0,p ) );
    bbase.addView( Lmargine );
    byview = new ScrollView(ACTIVITY);
    byview.addView(bbase);
    byview.setLayoutParams( new AbsoluteLayout.LayoutParams( screen_width,screen_height,0,0 ) );
    base.addView(byview);
  }

  // 表示する
  public void show(){
    menu_active = true;
    ACTIVITY.setContentView(base);
  }

}

</codetext>
</codeclip>
<codeclip>
<ID>_C116</ID>
<x0>790</x0>
<y0>556</y0>
<width>179</width>
<height>50</height>
<codetext>// イメージコンポーネント
ImageGUI image_gui;
class ImageGUI{
  Bitmap  image = null;
  int     width,  height;
  int     min_size = 60;
  float   scale = 1.1f;
  boolean is_active;

  TextView disp;
  AbsoluteLayout layout;
  ScrollView iyview;
  HorizontalScrollView ixview;
  AbsoluteLayout base;

  class disp_view extends TextView{
    disp_view(){
      super(ACTIVITY);
      setText(&quot; &quot;);
      setPadding(0, 0, 0, 0);
      setFocusable(true);
      setFocusableInTouchMode(true);
      setOnKeyListener( new View.OnKeyListener(){
        @Override
        public boolean onKey(View v, int keyCode, KeyEvent event) {
          if (event.getAction() == KeyEvent.ACTION_UP) {

dprint(&quot;image gui key event action up\n&quot;);
dprint(&quot;width=&quot;+width+&quot;, height=&quot;+height+&quot;\n&quot;);

            switch( keyCode ){
            case LEFT_KEY:
            case UP_KEY:
            case KeyEvent.KEYCODE_VOLUME_DOWN:
              if( width &gt; min_size &amp;&amp; height &gt; min_size ){
                width  = (int)( (float)width  / scale );
                height = (int)( (float)height / scale );
                setLayoutParams( new AbsoluteLayout.LayoutParams(width, height, 0, 0));
                invalidate();
              }
              break;
            case RIGHT_KEY:
            case DOWN_KEY:
            case KeyEvent.KEYCODE_VOLUME_UP:
              width  = (int)( (float)width  * scale );
              height = (int)( (float)height * scale );
              setLayoutParams( new AbsoluteLayout.LayoutParams(width, height, 0, 0));
              invalidate();
              break;
            default:
              ACTIVITY.setContentView(present_view);
              is_active = false;
              image.recycle();
              image = null;
              System.gc();
            }
          }
          return true;
        }
      });
    }
  
    @Override
    public void onDraw(Canvas g){
      super.onDraw(g);
      if( image != null ){
        Rect r0 = new Rect(0, 0, image.getWidth(), image.getHeight());
        Rect r  = new Rect(0, 0, getWidth(),  getHeight());
        g.drawBitmap( image, r0, r, null);
      }
    }

  }

// ファイルコンポーネントを作成
ImageGUI(){

dprint(&quot;image gui\n&quot;);

is_active = false;
disp = new disp_view();
layout = new AbsoluteLayout(ACTIVITY);
layout.setBackgroundColor(Color.rgb( 255, 255, 255));
layout.addView(disp);
iyview = new ScrollView(ACTIVITY);
iyview.addView(layout);
ixview = new HorizontalScrollView(ACTIVITY);
ixview.addView(iyview);
base = new AbsoluteLayout(ACTIVITY);
base.setBackgroundColor(Color.rgb( 255, 255, 255));
base.setLayoutParams( new AbsoluteLayout.LayoutParams( screen_width,screen_height,0,0 ) );
base.addView(ixview);
}

// 表示する
public void show( Bitmap img ){
  if( (image = img) != null ){
    ACTIVITY.setContentView(base);
    is_active = true;
    width  = image.getWidth();
    height = image.getHeight();
    disp.requestFocus();
    disp.setLayoutParams( new AbsoluteLayout.LayoutParams(width, height, 0, 0));
    disp.invalidate();
  }
}

}
</codetext>
</codeclip>
<codeclip>
<ID>_C117</ID>
<x0>389</x0>
<y0>522</y0>
<width>173</width>
<height>50</height>
<codetext>// ファイル選択ダイアログ
FileSelector fileselector;
class FileSelector{
  String dir_header=&quot;[DIR] &quot;;
  String files[];
  XFile dir;
  XFile selected_file;
  String id;
  String title;
  CallBackAccepter ac;

 FileSelector(){
 
dprint(&quot;file selector\n&quot;);

 }
 
  // ハンドラで結果を返す呼び出し
  public void show( String i, File directory ) {

dprint(&quot;file selector show1\n&quot;);

         id = i;
         dir = new XFile(directory);
         selected_file = null;

        // ファイルリスト
        File[] fileArray = dir.listFiles();
        if(fileArray == null)  return;

        // 名前リスト
        List&lt;String&gt; nameList = new ArrayList&lt;String&gt;();
        for (File file : fileArray) {
          if (file.isDirectory())  nameList.add(dir_header+file.getName());
          else nameList.add(file.getName());
        }
        Collections.sort(nameList);
        files = nameList.toArray(new String[0]);
 
        // ダイアログを生成
        AlertDialog.Builder dialog = new AlertDialog.Builder(ACTIVITY);
        dialog.setTitle(dir.getName());
        dialog.setItems( files, new DialogInterface.OnClickListener() {
          @Override
          public void onClick(DialogInterface dialog, int index) {
            String fname = files[index];
            if(fname.startsWith(dir_header)) show(id,new File(dir, fname.substring(dir_header.length())));
            else {
              selected_file = new XFile(dir, fname);
              handler(null,id);
            } 
          }
        });
        dialog.setPositiveButton(&quot;上 へ&quot;, new DialogInterface.OnClickListener() {
          @Override
          public void onClick(DialogInterface dialog, int index){
            File parent = dir.getParentFile();
            if(parent != null) show(id,parent); else show(id,dir);
          }
        });
        dialog.setNegativeButton(&quot;キャンセル&quot;, new DialogInterface.OnClickListener() {
          @Override
          public void onClick(DialogInterface dialog, int index){
            selected_file = null;
            handler(null,id);
          }
        });
        selected_file = null;
        dialog.show();
  }
 
  // コールバックで結果を返す呼び出し
  public void show( CallBackAccepter a, String t, File directory ) {

dprint(&quot;file selector show2\n&quot;);

         ac = a;
         title = t;
         dir = new XFile(directory);

        // ファイルリスト
        File[] fileArray = dir.listFiles();
        if(fileArray == null)  return;

        // 名前リスト
        List&lt;String&gt; nameList = new ArrayList&lt;String&gt;();
        for (File file : fileArray) {
          if (file.isDirectory())  nameList.add(dir_header+file.getName());
          else nameList.add(file.getName());
        }
        Collections.sort(nameList);
        files = nameList.toArray(new String[0]);
 
        // ダイアログを生成
        AlertDialog.Builder dialog = new AlertDialog.Builder(ACTIVITY);
        dialog.setTitle(title + &quot;: &quot; + dir.getName());
        dialog.setItems( files, new DialogInterface.OnClickListener() {
          @Override
          public void onClick(DialogInterface dialog, int index) {
            String fname = files[index];
            if(fname.startsWith(dir_header)) show(ac,title, new File(dir, fname.substring(dir_header.length())));
            else {
              ac.callBack( new XFile(dir, fname) );
            } 
          }
        });
        dialog.setPositiveButton(&quot;上 へ&quot;, new DialogInterface.OnClickListener() {
          @Override
          public void onClick(DialogInterface dialog, int index){
            File parent = dir.getParentFile();
            if(parent != null) show(ac, title, parent); else show(ac, title, dir);
          }
        });
        dialog.setNegativeButton(&quot;キャンセル&quot;, new DialogInterface.OnClickListener() {
          @Override
          public void onClick(DialogInterface dialog, int index){
            ac.callBack( null );
          }
        });
        dialog.show();
  }
 
}

</codetext>
</codeclip>
<codeclip>
<ID>_C118</ID>
<x0>10</x0>
<y0>9</y0>
<width>243</width>
<height>20</height>
<codetext>static final String VERSION=&quot;1.0&quot;;</codetext>
</codeclip>
</xobject>
